[
    {
        "id": "2ba57bbe.bdfc14",
        "type": "tab",
        "label": "Global Management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c5268cea.8c086",
        "type": "tab",
        "label": "Admin",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bd322587.f323b8",
        "type": "tab",
        "label": "Smartthings Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "398c27d8cfa27d04",
        "type": "tab",
        "label": "Save Messages",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "910cb7f1e9a01c80",
        "type": "tab",
        "label": "esp mgt",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c8dffe5.004eb",
        "type": "tab",
        "label": "Network Devices",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fd2ee22c0f5f3787",
        "type": "tab",
        "label": "Glow Mqtt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac5cca1e38fc76be",
        "type": "tab",
        "label": "Smartthings REST Api",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "86ae6dbd.035eb",
        "type": "tab",
        "label": "Sensor Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "95d00868.2c53c8",
        "type": "tab",
        "label": "Efergy",
        "disabled": false,
        "info": ""
    },
    {
        "id": "24aebbb7.83d844",
        "type": "tab",
        "label": "Yeelights",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bebdbac7.9f4e88",
        "type": "tab",
        "label": "Alexa Management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fbc788ea.fbf9a8",
        "type": "tab",
        "label": "Garden Motion",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f0af95b4.d8efc8",
        "type": "tab",
        "label": "Timelapse Camera",
        "disabled": false,
        "info": ""
    },
    {
        "id": "96432656.4c5b18",
        "type": "tab",
        "label": "WIP - Alexa Skills",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bfa2bdee7c11e1ae",
        "type": "subflow",
        "name": "Debug CSV",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "227f6268f77d1d34"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 700,
            "y": 180,
            "wires": [
                {
                    "id": "227f6268f77d1d34",
                    "port": 1
                }
            ]
        }
    },
    {
        "id": "e6dcd8331e41ae02",
        "type": "subflow",
        "name": "Table Manager",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 20,
                "y": 80,
                "wires": [
                    {
                        "id": "9b5a81c385f9a69e"
                    },
                    {
                        "id": "1d2107bf234291e1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 40,
                "wires": [
                    {
                        "id": "9b5a81c385f9a69e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 440,
            "y": 160,
            "wires": [
                {
                    "id": "9b5a81c385f9a69e",
                    "port": 2
                }
            ]
        }
    },
    {
        "id": "0717bf37e43f2199",
        "type": "group",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "style": {
            "fill": "#ffff00",
            "label": true
        },
        "nodes": [
            "6bde08656d371503",
            "d4958946e03aeeac",
            "2e5a2b150c586e39",
            "31812effe258bd7d",
            "dc23fba34379255a",
            "d2960f816c1b0fc3",
            "6c611663a894a996",
            "f7f59ed364caa824",
            "f602192a0b9be3f3",
            "1181b6fc3e421815"
        ],
        "x": 1704,
        "y": 79
    },
    {
        "id": "4d3a22ee044f7563",
        "type": "group",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "style": {
            "fill": "#ffff00",
            "label": true
        },
        "nodes": [
            "3acd8964e85c741c",
            "4791f399fa1319b2",
            "cdb375dedb047601",
            "3fa5e3311c28c5fa",
            "9f5afe294dac58dd",
            "8b94da1b5fd03d58",
            "b36326180ee36474",
            "5866aa4f7b6e79d4",
            "c3b243ec7cf9d50e",
            "d030214a238bb64e"
        ],
        "x": 1704,
        "y": 639
    },
    {
        "id": "8658ca8daeea84ce",
        "type": "group",
        "z": "86ae6dbd.035eb",
        "name": "General",
        "style": {
            "label": true
        },
        "nodes": [
            "e891442cd81af953",
            "3f263d10048907d8",
            "5b55d0c47a95efe1",
            "b595e6915835510a",
            "6a8592f7fe85cce9",
            "a9fecd29f3b96a38",
            "4ec374a4a7d5ecea",
            "11930e9b515b50a0"
        ],
        "x": 874,
        "y": 79
    },
    {
        "id": "6b2966ab51d0e6f1",
        "type": "group",
        "z": "86ae6dbd.035eb",
        "name": "Downstairs",
        "style": {
            "label": true
        },
        "nodes": [
            "b2f2eeb67ce9104a",
            "66f92c803338e6f7",
            "855747dc43e5831e",
            "681cd0f1d66e1e90",
            "7609e2c0e8fe921b",
            "e6f6979c3768aeec",
            "cfe4d13ccf3eed32",
            "c1b815f4951b7317"
        ],
        "x": 1594,
        "y": 419
    },
    {
        "id": "36e2d1781b0b5433",
        "type": "group",
        "z": "86ae6dbd.035eb",
        "name": "Upstairs",
        "style": {
            "label": true
        },
        "nodes": [
            "7ecddb4d43b6c109",
            "251fa2bc93445284",
            "55cbc63ec94fadb7",
            "1e104e8c3dbebe5f",
            "f2e4aa2eea37c0ba",
            "cacc4d53b9f04827",
            "098472a3d72119a0",
            "7cd6f3d2c9312a28"
        ],
        "x": 994,
        "y": 899
    },
    {
        "id": "4b7ff161dbf34933",
        "type": "group",
        "z": "86ae6dbd.035eb",
        "name": "Downstairs 2",
        "style": {
            "label": true
        },
        "nodes": [
            "4d82693150c14b7f",
            "0b689f9edb76b332",
            "e384c082645e310b",
            "01b83b0de977e111",
            "fdeccbdcf6f1b509",
            "1ee16e6b116d0079",
            "3c216a2db6871c4e",
            "cac720b013b0de58"
        ],
        "x": 1754,
        "y": 719
    },
    {
        "id": "21b9376f567aa702",
        "type": "group",
        "z": "86ae6dbd.035eb",
        "name": "Pool",
        "style": {
            "label": true
        },
        "nodes": [
            "e23512fc0642243a",
            "24206e97a02b3b78",
            "df409031cd5eabfc",
            "cbcf05c4bf130809",
            "e633a780ff7b5415",
            "df6ba2c38a9ba79e",
            "fdef494a1c38896a",
            "7499a32f116bfc0c"
        ],
        "x": 1754,
        "y": 99
    },
    {
        "id": "92251d9b.78552",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Beta Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "none",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 72,
                "sy": 72,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "110f867a.87e07a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "57f12562.e48f6c",
        "type": "ui_group",
        "name": "Temperatures",
        "tab": "110f867a.87e07a",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "1f432cba.7fdf83",
        "type": "ui_tab",
        "name": "Admin Home",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "827c9488.27bf78",
        "type": "mqtt-broker",
        "name": "MQT",
        "broker": "CREAGERS-WHS",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b2ca2f26.ec78b",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "57f12562.e48f6c",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "bab69914.d484f8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "57f12562.e48f6c",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "3e4171d9.5b39be",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "57f12562.e48f6c",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "f0c6945f.deae18",
        "type": "ui_group",
        "name": "LAB",
        "tab": "4f0e950f.de36cc",
        "order": 12,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "4f0e950f.de36cc",
        "type": "ui_tab",
        "d": true,
        "name": "Rubbish",
        "icon": "dashboard",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7a38f16b.72f3e",
        "type": "ui_group",
        "name": "Display Devices",
        "tab": "1f432cba.7fdf83",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a460ddfa.65aec",
        "type": "ui_tab",
        "name": "Camera Management",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ab341143.35405",
        "type": "ui_group",
        "name": "Manage Cameras",
        "tab": "a460ddfa.65aec",
        "order": 1,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "a5ebe13.914e82",
        "type": "ui_group",
        "name": "List of Cameras",
        "tab": "a460ddfa.65aec",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "4b60f798.d4fa",
        "type": "ui_group",
        "name": "Energy",
        "tab": "110f867a.87e07a",
        "order": 3,
        "disp": true,
        "width": "6"
    },
    {
        "id": "a90d6502.9380d8",
        "type": "yeelight-config"
    },
    {
        "id": "ce366a3.9ab9b98",
        "type": "yeelight-config"
    },
    {
        "id": "4c3d1daa.2f8fa4",
        "type": "yeelight-config"
    },
    {
        "id": "4549c65.b965538",
        "type": "yeelight-config"
    },
    {
        "id": "9851a518.c1e1b8",
        "type": "hue-bridge",
        "name": "Philips hue",
        "bridge": "192.168.1.131",
        "key": "lXgRCil4PzwlEWDweAnAF0K-OSSHJQoYevG8Qq0q",
        "interval": "3000",
        "disableupdates": false
    },
    {
        "id": "e5ab6893.e6ce48",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "1f71fd5d.d27583",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "2e002999.8f1b26",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "833f9e89.95f92",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "a002bf14.accf6",
        "type": "alexa-remote-account",
        "name": "Alexa",
        "authMethod": "proxy",
        "proxyOwnIp": "192.168.1.144",
        "proxyPort": "3456",
        "cookieFile": "/data/alexaauth",
        "refreshInterval": "3",
        "alexaServiceHost": "alexa.amazon.co.uk",
        "amazonPage": "amazon.co.uk",
        "acceptLanguage": "en-UK",
        "userAgent": "",
        "useWsMqtt": "on",
        "autoInit": "on"
    },
    {
        "id": "ed2bef2.d13bd1",
        "type": "alexa-remote-account",
        "name": "Alexa 2",
        "authMethod": "proxy",
        "proxyOwnIp": "192.168.1.144",
        "proxyPort": "3456",
        "cookieFile": "/data/alexaauth2",
        "refreshInterval": "3",
        "alexaServiceHost": "alexa.amazon.co.uk",
        "amazonPage": "amazon.co.uk",
        "acceptLanguage": "en-UK",
        "userAgent": "",
        "useWsMqtt": "on",
        "autoInit": "off"
    },
    {
        "id": "d37d8f53.a8add",
        "type": "node-lifx-server",
        "name": "Lifx Server",
        "address": "",
        "broadcast": "",
        "lights": "192.168.1.171",
        "interval": "10000"
    },
    {
        "id": "d626bfa6.e460a",
        "type": "ui_tab",
        "name": "Input Output Mapping",
        "icon": "dashboard",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3f6270c7.fbae8",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "d626bfa6.e460a",
        "order": 1,
        "disp": false,
        "width": "15",
        "collapse": false
    },
    {
        "id": "d2cc341d.cff668",
        "type": "mqtt-broker",
        "name": "MQT",
        "broker": "CREAGERS-WHS",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e4694e1.8ef94b",
        "type": "ui_tab",
        "name": "Smart Device Admin",
        "icon": "dashboard",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fd8a8e61.282aa",
        "type": "ui_group",
        "name": "Smart Devices Admin",
        "tab": "e4694e1.8ef94b",
        "order": 1,
        "disp": false,
        "width": "13",
        "collapse": false
    },
    {
        "id": "428181fcca22bd35",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "25b80872846320e0",
        "order": 1,
        "disp": false,
        "width": "16",
        "collapse": false
    },
    {
        "id": "25b80872846320e0",
        "type": "ui_tab",
        "name": "Widget Mapping Admin",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "910db11be4a8484f",
        "type": "ui_group",
        "name": "General",
        "tab": "d179a41f46257a25",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b02fb250b6c39f8a",
        "type": "ui_group",
        "name": "Pool",
        "tab": "d179a41f46257a25",
        "order": 2,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "d179a41f46257a25",
        "type": "ui_tab",
        "name": "New Gauges",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1801e84be6377def",
        "type": "ui_group",
        "name": "Downstairs",
        "tab": "d179a41f46257a25",
        "order": 3,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "34766c9549917e68",
        "type": "ui_group",
        "name": "Upstairs",
        "tab": "d179a41f46257a25",
        "order": 5,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "9c3a530deb9b5e74",
        "type": "ui_tab",
        "name": "Charts",
        "icon": "dashboard",
        "order": 13,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f636ab702bc4979b",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "9c3a530deb9b5e74",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "930bac7c73f417f1",
        "type": "mqtt-broker",
        "name": "Glow MQT",
        "broker": "glowmqtt.energyhive.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "bc7d2736025b6010",
        "type": "ui_tab",
        "name": "Network Devices",
        "icon": "dashboard",
        "order": 14,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d96adc49a2b78b1f",
        "type": "ui_group",
        "name": "Network Devices",
        "tab": "bc7d2736025b6010",
        "order": 1,
        "disp": false,
        "width": "16",
        "collapse": false
    },
    {
        "id": "c97e9bb1ac824975",
        "type": "ui_group",
        "name": "Base Values",
        "tab": "788ef83cf3bba0b3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1d04a057fbe64e1b",
        "type": "ui_group",
        "name": "Last 30 mins",
        "tab": "788ef83cf3bba0b3",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "788ef83cf3bba0b3",
        "type": "ui_tab",
        "name": "Glow Market",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f7c9bcba0870aa94",
        "type": "ui_group",
        "name": "Last Hour",
        "tab": "788ef83cf3bba0b3",
        "order": 3,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "9436b22b19bb3f7e",
        "type": "ui_group",
        "name": "Tables",
        "tab": "788ef83cf3bba0b3",
        "order": 5,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "3a5fd9a15c317965",
        "type": "ui_group",
        "name": "Charts",
        "tab": "788ef83cf3bba0b3",
        "order": 4,
        "disp": true,
        "width": "30",
        "collapse": false
    },
    {
        "id": "551e147027ce95a7",
        "type": "websocket-client",
        "path": "ws:///192.168.1.82:9006/as/system/status",
        "tls": "",
        "wholemsg": "false",
        "hb": "0"
    },
    {
        "id": "33923fb5cf55427f",
        "type": "ui_tab",
        "name": "Message Saving",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "81dda4cbde86f8e9",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "33923fb5cf55427f",
        "order": 2,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "d707558aa23b3dc5",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "33923fb5cf55427f",
        "order": 3,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "5509a9f605a80857",
        "type": "ui_group",
        "name": "Replay Displays",
        "tab": "33923fb5cf55427f",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "fb687f3f164627c1",
        "type": "ui_group",
        "name": "Downstairs 2",
        "tab": "d179a41f46257a25",
        "order": 4,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b370dcae0d8b1671",
        "type": "ui_tab",
        "name": "Motions",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4e4468465663eb6e",
        "type": "ui_group",
        "name": "Motions",
        "tab": "b370dcae0d8b1671",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "44500ad3f2169d89",
        "type": "ui_group",
        "name": "esp table",
        "tab": "a0985848d684ca6b",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "fc351a18e5b912e7",
        "type": "ui_group",
        "name": "MAC Addresses",
        "tab": "a0985848d684ca6b",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "d9110728974771ec",
        "type": "ui_group",
        "name": "BLE Devices",
        "tab": "a0985848d684ca6b",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "879853c9cbbf6102",
        "type": "ui_tab",
        "name": "ESP Management",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2c0327def1d1c166",
        "type": "ui_group",
        "name": "esp table",
        "tab": "879853c9cbbf6102",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "bbcc15c7065be440",
        "type": "ui_group",
        "name": "MAC Addresses",
        "tab": "879853c9cbbf6102",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ae7db8c4abafff28",
        "type": "ui_group",
        "name": "BLE Devices",
        "tab": "879853c9cbbf6102",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "9ed27ccb5883116e",
        "type": "file",
        "z": "bfa2bdee7c11e1ae",
        "name": "MsgsDebug",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 730,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "d81d13242da1942c",
        "type": "csv",
        "z": "bfa2bdee7c11e1ae",
        "name": "MsgsDebug CSV",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 470,
        "y": 120,
        "wires": [
            [
                "9ed27ccb5883116e"
            ]
        ]
    },
    {
        "id": "227f6268f77d1d34",
        "type": "function",
        "z": "bfa2bdee7c11e1ae",
        "name": "Msgs Debug",
        "func": "\nlet debugFileNames = flow.get(\"debugFileNames\");\nlet doOnce = true;\nlet msgCount = flow.get(\"msgCount\");\nlet fileName = flow.get(\"$parent.debugFileName\");\nif (!fileName) fileName =  msg.debugFileName;\nif (!fileName) fileName = \"/devices/debug.csv\"\n\nif (debugFileNames[fileName]) {\n\tdoOnce = false;\n} else {\n\tdebugFileNames[fileName] = true;\n\tdoOnce = true;\n\tflow.set(\"debugFileNames\",debugFileNames);\n}\n\nconst fs = global.get(\"fs\");\nconst path = global.get(\"path\")\nif (doOnce) {\n\tlet baseName = path.join(path.dirname(fileName),path.basename(fileName,path.extname(fileName)))\n    node.warn( [ \"[\" + node.name + \"] \" + \"[Info] \" + \"Debug Filename is \" + fileName]);\n\tlet cnt = 0;\n\tlet rotator = \"_\" + (++cnt) + path.extname(fileName);\n\twhile (fs.existsSync(baseName + rotator)) {\n\t\trotator = \"_\" + (++cnt) + path.extname(fileName);\n\t}\n    try {\n\t\tif (fs.existsSync(fileName)) {\n\t\t\tnode.warn( [ \"[\" + node.name + \"] \" + \"[Info] \", \n\t\t\t\t\t\"Output File old file renamed from  \" + fileName + \"to \" + baseName + rotator ]);\n\t\t\tfs.renameSync(fileName,baseName + rotator);\n\t\t\t//fs.unlinkSync(fileName)\n\t\t}\n    } catch(err) {\n\t\tnode.warn( [err, \"[\" + node.name + \"] \" + \"[Info] \", \"Output File does not exit \" + fileName ]);\n    }\n}\nlet cmds = [];\nlet tmpDate = new Date().toLocaleDateString(\"en-gb\");\nlet tmpTime = new Date().toLocaleTimeString(\"en-gb\");\nlet cols = msg.columns \nif (cols) {\n    cols = \"Date,Time, Topic,\" + cols;\n} else {\n    cols = \"Date,Time, Topic,Commands\";\n}\ntry {\n\tif ( (msg.payload) && typeof(msg.payload) == \"object\" ) {\n\t\tif (Array.isArray(msg.payload)) {\n\t\t\tmsg.payload.forEach( (cmdo) => {\n\t\t\t\tif ( (cmdo) && ( typeof(cmdo) == \"object\" ) ) {\n\t\t\t\t\t//cmds.push(cmdo.cmd + \":\" + cmdo.payload)\n\t\t\t\t\tObject.keys( cmdo ).forEach( (key) => {\n\t\t\t\t\t\tcmds.push(key + \":\" + cmdo[key]);\n\t\t\t\t\t})\n\t\t\t\t} else if (cmdo) {\n\t\t\t\t\t//cmds.push(typeof(cmdo) + \":\" + cmdo)\n\t\t\t\t\tcmds.push(cmdo)\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tObject.keys( msg.payload ).forEach( (key) => {\n\t\t\t\tcmds.push(key + \":\" + msg.payload[key]);\n\t\t\t})\n\t\t}\n\t} else {\n\t\tflow.set(\"msgCount\",++msgCount);\n\t\treturn [\t{topic:msg.topic,\n\t\t\t\t\tcolumns: cols,\n\t\t\t\t\tfilename: fileName,\n\t\t\t\t\tpayload: [tmpDate,tmpTime,msg.topic, msg.payload ]\n\t\t\t\t},\n\t\t\t\t{topic:\"status\", payload: ({fill: \"green\",text: fileName + \" (\" + msgCount + \")msgs\"})}\n\t\t\t\t]\n\t}\n} catch (err) {\n\tnode.error( [ \"[\" + node.name + \"] \" + \"[Error] \" + err, err, msg]);\n}\nflow.set(\"msgCount\",++msgCount);\n//Date,Topic,Pathway,Commands\nreturn [\t{topic:msg.topic,\n\t\t\t\tcolumns: cols,\n\t\t\t\tfilename: fileName,\n\t\t\t\tpayload: [tmpDate,tmpTime, msg.topic,...cmds ]\n\t\t\t},\n\t\t\t\t{topic:\"status\", payload: ({fill: \"green\",text: fileName + \" (\" + msgCount + \")msgs\"})}\n\t\t]\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//  const path = './file.txt'\n\n//flow.set(\"DoOnce\",true)\nflow.set(\"msgCount\",0);\nflow.set(\"debugFileNames\",{});",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "d81d13242da1942c"
            ],
            []
        ]
    },
    {
        "id": "9b5a81c385f9a69e",
        "type": "function",
        "z": "e6dcd8331e41ae02",
        "name": "Table Manager",
        "func": "//Table Manager\nlet gDebug = global.get(\"gDebug\");\n//gDebug=true;\nlet sockets = context.get(\"sockets\")\nif (!sockets) sockets = {};\nlet tabs = context.get(\"tabs\");\nif (!tabs) tabs = {};\nlet tableInit = context.get(\"tableInit\");\n//node.warn([\"DEBUG\",msg])\nif (!tableInit) {\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \"[Info] \",\"tableInit is undefined - setting up\",msg]);\n\ttableInit = {ready: false, details:null};\n\tcontext.set(\"tableInit\",tableInit);\n}\nif ( (msg.topic==\"initTable\") && (msg.hasOwnProperty(\"tableInit\")) ) {\n\ttableInit = msg.tableInit;\n\ttableInit.details = \"$parent.\" + tableInit.details\n\tcontext.set(\"tableInit\",tableInit);\n}\nif ( (typeof(msg.payload) == \"string\") && (!msg.topic) && \n\t\t( (msg.payload==\"lost\") || (msg.payload==\"change\") || (msg.payload==\"connect\") ) ) {\n\t// From UI Control - refresh or tab change\n\tif ( (msg.payload==\"connect\")  || (msg.payload==\"change\") ) {\n\t\tsockets[msg.socketid] = true;\n\t\ttabs[msg.socketid] = [];\n\t} else {\n\t\tsockets[msg.socketid] = false;\n\t\ttabs[msg.socketid] = [];\n\t}\n\tif (msg.payload==\"change\") {\n\t\ttabs[msg.socketid].push(msg.name);\n\t}\n\tcontext.set(\"sockets\", sockets);\n\tcontext.set(\"tabs\", tabs)\n}\nif ( (msg.topic == \"RefreshTable\") &&  (!context.get(\"refreshableTable\")) ) {\n\treturn [null, null, null];\n}\n\nif (!tableInit.ready) {\n\tif (msg.topic) node.error( [ \"[\" + node.name + \"] \" + \"[Error] tableInit Not ready no processing done\", msg]);\n\treturn [null, null, null];\n}\n\nlet tableDetails = flow.get(tableInit.details);\ncontext.set(\"refreshableTable\", tableDetails.refreshableTable);\nif (tableDetails === undefined) {\n\tnode.error( [ \"[\" + node.name + \"] \" + \"[Error] \",\"tableDetails is undefined\"]);\n\treturn [null, null, null];\n}\n\nlet statusMsg = {};\nlet updateMsg = [];\nlet tableMsg = {};\nlet updateMsgBase = {\n\t\t\t\t\t\t\"topic\": \"TableUpdate\",\n\t\t\t\t\t\t\"tableDatabase\": tableDetails.tableDatabase,\n\t\t\t\t\t\t\"tableDatabaseName\": tableDetails.tableDatabaseName,\n\t\t\t\t\t\t\"tableInit\": tableInit\n\t\t\t\t\t\t};\n\nif (tableDetails.lastID === undefined) {\n\ttableDetails.lastID = 0;\n\ttableDetails.tableData.forEach( (row,index) => {if (tableDetails.lastID < row.id) tableDetails.lastID = row.id});\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"lastID set to \" + tableDetails.lastID]);\n\tflow.set(tableInit.details,tableDetails);\n}\nif ( (!tableDetails.tableDatabase) || (!tableDetails.tableDatabaseName) ){\n\tnode.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"tableDatabase is undefined\",tableDetails.tableDatabaseName, tableDetails.tableDatabase]);\n}\n\n// find the index for a row in tableData for a given index (id)\nfunction checkIndex(id) {\n    let matchRow=-1\n    tableDetails.tableData.forEach(function (row,index){\n        if (row.id === id){\n            matchRow=index;\n            return matchRow;\n        }\n    })\n    return matchRow;\n}\n\n// flat merge one row \nfunction mergeRow(dest,source) {\n    Object.keys(source).forEach(function(key) {\n        dest[key]=source[key];\n    })\n}\n\n//merge or add one or many rows into tableData \nfunction mergeData(newData,toTop) {\n    newData.forEach(function (item,index) {\n        if (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [findIndex] \",item,index]);\n        let row=checkIndex(item.id);4\n        if (row<0) { // row do not existst in tableData\n            if (toTop) {\n                tableDetails.tableData.push(item);\n\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [findIndex] \",\" new row top \",item,index]);\n\t\t\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" Added newRow @ top\"});\n\t\t\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Added newRow @ top\"}};\n\t\t\t\tnode.status(statusMsg);\n            } else {\n                tableDetails.tableData.unshift(item);\n\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [findIndex] \",\" new row bottom \",item,index]);\n\t\t\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Added newRow @ bottom\"}};\n\t\t\t\tnode.status(statusMsg);\n\t\t\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" Added newRow @ bottom\"});\n            }\n            return;\n        } else { // row exists so update\n            mergeRow(tableDetails.tableData[row],item);\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [findIndex] \",\" row updated \",item,index]);\n\t\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \"  row updated \"}};\n\t\t\tnode.status(statusMsg);\n\t\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \"  row updated \"});\n            return;\n        }\n    });\n}\nif (msg.topic == \"UpdateTable\") {\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"Update Table Rec'd\", msg.payload, msg, tableDetails]);\n\tif ( (!msg.payload) || (!msg.payload.cmd) || (!msg.payload.value) ) {\n\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"Update Table invalid payload\", msg.payload, msg, tableDetails]);\n\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Update Table invalid payload\"}};\n\t\treturn [null,null,statusMsg]\n\t}\n\tlet found = -1;\n\tif (!msg.payload.value[tableDetails.tableKeys[0]]) {\n\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"Update Table no key in payload\", msg.payload, msg, tableDetails]);\n\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Update Table no key in payload\"}};\n\t\treturn [null,null,statusMsg]\n\t}\n\ttableDetails.tableData.forEach(function (row,index){\n\t\tif ( row[tableDetails.tableKeys[0]] == msg.payload.value[tableDetails.tableKeys[0]] ) found = index\n\t});\n\tlet clonedMsg = RED.util.cloneMessage(msg);\n\tif (msg.payload.cmd == \"addRow\") {\n\t\tif (found !=-1) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"Update Table add row exists\", msg.payload, msg, tableDetails]);\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Update Table add row exists\"}};\n\t\t\treturn [null,null,statusMsg]\n\t\t}\n\t\tif (gDebug) node.warn([\"[\" + node.name + \"] [UpdateTable][Info] \",\"Adding Row \", msg.payload, msg]);\n\t\ttableDetails.lastID = tableDetails.lastID + 1;\n\t\tclonedMsg.payload.value.id = tableDetails.lastID;\n\t\ttableDetails.tableData.push(clonedMsg.payload.value);\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Updated Table with new row\"}};\n\t\ttableMsg = {topic: \"updateData\", payload:{command: \"updateData\", arguments: [[clonedMsg.payload.value]]}};\n\t\treturn [tableMsg,null,statusMsg]\n\t} else if (msg.payload.cmd == \"updateRow\") {\n\t\tif (found ==-1) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"Update Table updateRow doesn't exist\", msg.payload, msg, tableDetails]);\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Update Table updateRow doesn't exist\"}};\n\t\t\treturn [null,null,statusMsg]\n\t\t}\n\t\tObject.keys(msg.payload.value).forEach( (ele) => {\n\t\t\tif (ele != tableDetails.tableKeys[0]) tableDetails.tableData[found][ele] = msg.payload.value[ele]\n\t\t});\n\t\tclonedMsg.payload.value.id = tableDetails.tableData[found].id;\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Updated Table updated row\"}};\n\t\ttableMsg = {topic: \"updateData\", payload:{command: \"updateData\", arguments: [[clonedMsg.payload.value]]}};\n\t\treturn [tableMsg,null,statusMsg]\n\t} else if (msg.payload.cmd == \"deleteRow\") {\n\t\tif (found ==-1) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"Update Table DeleteRow doesn't exist\", msg.payload, msg, tableDetails]);\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Update Table DeleteRow doesn't exist\"}};\n\t\t\treturn [null,null,statusMsg]\n\t\t}\n\t\tclonedMsg.payload.value.id = tableDetails.tableData[found].id;\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Updated Table Deleted row\"}};\n\t\treturn [null,null,statusMsg]\n\t} else {\n\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"Update Table invalid cmd\", msg.payload, msg, tableDetails]);\n\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Update Table invalid cmd\"}};\n\t\treturn [null,null,statusMsg]\n\t}\t\t\n}\nif (msg.topic == \"RefreshTable\") {\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"Refresh Table Rec'd\", msg.payload, msg, tableDetails]);\n\tconst connd = Object.values(sockets).reduce((pv,cv, ind) => {return (pv||cv)}, false);\n\tif (connd) {\n\t\tstatusMsg = {fill:\"green\",shape:\"ring\",text: \"Clients connected\"};\t\n\t\tconst tabbed = Object.values(tabs).reduce((pv,cv,ind) => { return (pv||cv.includes(tableDetails.tableTab))}, false);\n\t\tif (tabbed) {\n\t\t\tlet nowDate = new Date();\n\t\t\tmsg.payload = tableDetails.tableData.map( (ent) => {\n\t\t\t\treturn({refreshTime:nowDate,...ent});\n\t\t\t});\n\t\t\tmsg.refreshDate = nowDate.getDate() + \"/\" + (nowDate.getMonth() + 1) + \n\t\t\t\t\t\"/\" + nowDate.getFullYear() + \" \" + nowDate.getHours() + \":\" + nowDate.getMinutes() + \":\" + nowDate.getSeconds();\n\t\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Refresh Table issued\"}};\n\t\t\tlet msgs = [];\n\t\t\tmsgs.push(msg);\n\t\t\tif (tableDetails.sortField) {\n\t\t\t\tmsgs.push({topic:\"sortTable\",refreshDate: msg.refreshDate,\n\t\t\t\t\t\tpayload:{\"command\": \"setSort\",\"arguments\":\n\t\t\t\t\t\t\t[[{\"column\": tableDetails.sortField, \"dir\": tableDetails.sortDir}],\n\t\t\t\t\t\t\t\ttrue],\"returnPromise\": false}});\n\t\t\t}\n\t\t\tnode.status(statusMsg);\n\t\t\treturn [msgs, null, statusMsg]\n\t\t} else {\n\t\t\tstatusMsg = {payload: {fill:\"blue\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Refresh Table No Client Tabs\"}};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn [null, null, statusMsg]\n\t\t}\n\t} else {\n\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Refresh Table Nobody Connected\"}};\n\t\tnode.status(statusMsg)\n\t\treturn [null, null, statusMsg]\n\t}\n}\nif ( (msg.topic == \"headerClicked\") && (msg.hasOwnProperty(\"ui_control\")) ) {\n\ttableDetails.sortField = msg.ui_control.column;\n\ttableDetails.sortDir = \"asc\";\n\tconst newSortField = msg.ui_control.column;\n\tconst getSort = (msg.ui_control.getSorters) ? msg.ui_control.getSorters.find( (ele) => ele.field == newSortField ) : null;\n\tif ( (getSort) && (getSort.dir == \"asc\") ) tableDetails.sortDir = \"desc\"; \n\tflow.set(tableInit.details,tableDetails);\n\tstatusMsg = {payload:{fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Table was sorted:\" + msg.ui_control.column}}\n\tnode.status(statusMsg);\n\treturn [null, null, statusMsg]\n}\nif ( (msg.hasOwnProperty(\"payload\")) && \n\t( msg.hasOwnProperty(\"ui_control\") ) && ( msg.ui_control.hasOwnProperty(\"callback\") )) {\n\tif (msg.ui_control.callback == \"cellEdited\") {\n\t// From Table, edit field\n\t\tif ( (!msg.hasOwnProperty(\"field\")) || (!msg.hasOwnProperty(\"id\")) ) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"field and/or id missing \", msg, tableDetails.tableData]);\n\t\t\t//node.status({fill:\"red\",shape:\"ring\",text: tableInit.details + \" cellEdit field and/or id missing \"});\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" cellEdit field and/or id missing \"}};\n\t\t\tnode.status(statusMsg);\n\t\t\treturn [null, null, statusMsg]\n\t\t}\n\t\tlet ind = checkIndex(msg.id);\n\t\tif (ind==-1) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"id not in tableData \", msg, tableDetails.tableData]);\n\t\t\t//node.status({fill:\"red\",shape:\"ring\",text: tableInit.details + \" id not in tableData  \"});\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" id not in tableData  \"}};\n\t\t\tnode.status(statusMsg);\n\t\t\treturn [null, null, statusMsg]\n\t\t}\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [cellEdited] amending \",tableDetails.tableData[ind],msg.field,msg.payload]);\n\t\t\t\t\t\t\t\n\t\tlet oldField = {};\n\t\toldField[msg.field] = msg.oldValue;\n\t\tupdateMsg.push({...updateMsgBase, \"tableOldField\": oldField, tableUpdateCommand: \"cellEdited\",\n\t\t\t\t\t\t\tpayload: tableDetails.tableData[ind]});\n\t\ttableDetails.tableData[ind][msg.field] = msg.payload;\n\t\tflow.set(tableInit.details,tableDetails);\n\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" User edited id:\" + msg.id + \",row:\" + ind + \",field:\" + msg.field});\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" User edited id:\" + msg.id + \",row:\" + ind + \",field:\" + msg.field}};\n\t\tnode.status(statusMsg)\n\t\treturn [null, updateMsg, statusMsg]\n\t} else if (msg.ui_control.callback == \"rowDeleted\") {\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [cellEdited] \", \"Deleting Row \" + msg.rowID,msg]);\n\t\tlet ind = checkIndex(msg.rowID);\n\t\tif (ind==-1) {\n\t\t\tnode.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \",\"id not in tableData for deleteRow \", msg]);\n\t\t\t//node.status({fill:\"red\",shape:\"ring\",text: tableInit.details + \" id not in tableData  \"});\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" id not in tableData\"}};\n\t\t\tnode.status(statusMsg);\n\t\t\treturn [null, null, statusMsg]\n\t\t}\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [cellEdited] \", \n\t\t\t\t\t\t\t\t\"Deleting ind=\" + ind + \" \",tableDetails.tableData[ind][tableDetails.tableKeys[0]],\n\t\t\t\t\t\t\t\tmsg.rowID,tableDetails.tableData[ind],msg]);\n\t\tupdateMsg.push({...updateMsgBase, tableUpdateCommand: \"deleteRow\", payload: tableDetails.tableData[ind]});\n\t\ttableDetails.tableData.splice(ind,1);\n\t\tflow.set(tableInit.details,tableDetails);\n\t\treturn [null, updateMsg, statusMsg]\n\t} else if (msg.ui_control.callback == \"buttonClicked\") {\n\t\t//Just passing on at the moment\n\t\tlet ind = checkIndex(msg.id);\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] [cellEdited] \", \"Button Clicked \" + msg.rowID,msg]);\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Button Clicked \" + msg.id + \",row:\" + ind}};\n\t\treturn [msg, null, statusMsg]\n\t}\n\tnode.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] Unknown Callback Value\", msg]);\n\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" Unknown callback \" + msg.ui_control.callback}};\n\tnode.status(statusMsg);\n\treturn [null, null, statusMsg]\n}\nif ( (typeof(msg.payload) == \"object\") && ( Array.isArray(msg.payload) ) ) {\n\t// Loading Table\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"Loading Table \",msg.ui_control]);\n\ttableDetails.tableData=RED.util.cloneMessage(msg.payload); \n\ttableDetails.lastID = 0;\n\ttableDetails.tableData.forEach( (row,index) => {if (tableDetails.lastID < row.id) tableDetails.lastID = row.id});\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"lastID set to \" + tableDetails.lastID]);\n\tflow.set(tableInit.details,tableDetails);\n\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" table replaced \"+msg.payload.length+\" rows\"});\n\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" table replaced \"+msg.payload.length+\" rows\"}};\n\tnode.status(statusMsg);\n\treturn [msg, null, statusMsg]\n}\nif ( (typeof(msg.payload) == \"object\") && ( msg.hasOwnProperty(\"row\") ) ) {\n\t// From Table, click on cell (row)\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"User clicked on row \",msg.row,msg]);\n\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" User Clicked on Row \" + msg.row});\n\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" User Clicked on Row \" + msg.row}};\n\tnode.status(statusMsg);\n\treturn [null, null, statusMsg]\n}\n\nif ( (msg.topic) && (msg.topic == \"success\") && ( msg.hasOwnProperty(\"ui_control\") ) ) {\n\t// From Table - promise return\n\tif (gDebug) node.warn([\"[\" + node.name + \"] [Info] \",\"Promise Return \",msg.ui_control,msg]);\n\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" Successful Promise Returned:\" + msg.ui_control.callback});\n\treturn [null, null, null]\n}\n\nif ( (typeof(msg.payload) == \"string\") && (!msg.topic) && \n\t\t( (msg.payload==\"lost\") || (msg.payload==\"change\") || (msg.payload==\"connect\") ) ) {\n\t// From UI Control - refresh or tab change\n\tif (msg.payload == \"change\") {\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"UI Control Change issued \", msg.payload, msg, tableDetails]);\n\t\tmsg.topic = \"changeRefresh\";\n\t\tmsg.payload = tableDetails.tableData;\n\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" UI Control Change issued \"});\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" UI Control Change issued\"}};\n\t\tnode.status(statusMsg);\n\t\treturn [msg, null, statusMsg]\n\t}\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \",\"UI Control \", msg.payload, msg]);\n\treturn [null, null, null]\n}\n\nif ( (typeof(msg.payload) == \"object\") && ( msg.payload.hasOwnProperty(\"command\") ) ) {\n\t// Sending Command to table addRow,  updateData\n\tlet clonedMsg = RED.util.cloneMessage(msg);\n\tif (gDebug) node.warn([\"[\" + node.name + \"][addRow] [Info] \",\"Command sent to table \", msg.payload, msg]);\n\tif (msg.payload.command == \"addRow\") {\n\t\tif (gDebug) node.warn([\"[\" + node.name + \"] [addRow] [Info] \",\"Adding Row \", msg.payload, msg]);\n\t\tclonedMsg.payload.arguments[0].forEach( (row,index) => {\n\t\t\ttableDetails.lastID = tableDetails.lastID + 1;\n\t\t\trow.id = tableDetails.lastID;\n\t\t\ttableDetails.tableKeys.forEach( (tkey) => {\n\t\t\t\tif (tkey != \"id\" ) row[tkey] = row[tkey] + \"(\" + row.id + \")\";\n\t\t\t});\n\t\t\t//row[tableDetails.tableKeys[0]] = row[tableDetails.tableKeys[0]] + \"(\" + row.id + \")\";\n\t\t\tif (gDebug) node.warn([\"[\" + node.name + \"] [addRow] [Info] \",\"In CopiedMsg \", row, msg]);\n            if (msg.payload.arguments[1]) {\n\t\t\t\ttableDetails.tableData.push(row);\n\t\t\t\tif (gDebug) node.warn([\"[\" + node.name + \"] [addRow] [Info] \",\"new row top \",row,index]);\n\t\t\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" addRow:newRow @ top\"});\n\t\t\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" addRow:newRow @ top\"}};\n            } else {\n\t\t\t\ttableDetails.tableData.unshift(row);\n\t\t\t\tif (gDebug) node.warn([\"[\" + node.name + \"] [addRow] [Info] \",\"new row bottom \",row,index]);\n\t\t\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" addRow:newRow @ bottom\"});\n\t\t\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" addRow:newRow @ bottom\"}};\n            }\n\t\t\tupdateMsg.push({...updateMsgBase, tableUpdateCommand: clonedMsg.payload.command, payload: row});\n\t\t});\n\t\tnode.status(statusMsg);\n\t\tflow.set(tableInit.details,tableDetails);\n\t\treturn [clonedMsg, updateMsg, statusMsg]\n\t}\n\tif ( (msg.payload.command == \"updateOrAddData\") || (msg.payload.command == \"updateData\") ) {\n\t\tmsg.payload.arguments[0].forEach( (row,index) => {\n\t\t\tlet ind = checkIndex(row.id);\n\t\t\tif (ind != -1) {\n\t\t\t\tupdateMsg.push({...updateMsgBase, tableUpdateCommand: msg.payload.command, payload: tableDetails.tableData[ind]});\n\t\t\t} else {\n\t\t\t\tnode.error([\"[\" + node.name + \"][updateOrAddData] [error] \",\"row doesn't exist in tableData \", row, msg]);\n\t\t\t}\n\t\t});\n\t\tmergeData(msg.payload.arguments[0]);\n\t\tflow.set(tableInit.details,tableDetails);\n\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" updateOrAddData:\"});\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" updateOrAddData:\"}};\n\t\tnode.status(statusMsg);\n\t\treturn [msg, updateMsg, statusMsg]\n\t}\n\tif (msg.payload.command == \"deleteRow\") {\n\t\tlet row=checkIndex(msg.payload.arguments[0]);\n\t\ttableDetails.tableData.splice(row,1);\n\t\tflow.set(tableInit.details,tableDetails);\n\t\tnode.error([\"[\" + node.name + \"][deleteRow] [Error] Did not expect to get here\", msg]);\n\t\t//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" deleteRow:\" + row + \" deleted\"});\n\t\tstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" deleteRow:\" + row + \" deleted\"}};\n\t\tnode.status(statusMsg);\n\t\treturn [msg, updateMsg, statusMsg]\n\t}\n\t//node.status({fill:\"red\",shape:\"ring\",text:msg.payload.command + \" unknown!\"});\n\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\", text:msg.payload.command + \" unknown!\"}};\n\tnode.status(statusMsg);\n\tnode.error([\"[\" + node.name + \"] [error] unknown command \",msg.payload.command]);\n\treturn [null, null, statusMsg]\n}\n// Shouldn't get here we don't know what this is - Lets send to Table and see what happens -:)\nnode.error([\"[\" + node.name + \"] [error] \", \"Don't know what this is \",msg]);\nreturn [msg,updateMsg, null]",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [],
            [
                "77193902c0d45496"
            ],
            []
        ]
    },
    {
        "id": "77193902c0d45496",
        "type": "function",
        "z": "e6dcd8331e41ae02",
        "name": "Global Data Updater",
        "func": "//Update globalData\nlet gDebug = global.get(\"gDebug\");\n//gDebug=true;\nlet tableInit = context.get(\"tableInit\");\nif (!tableInit) {\n\tnode.warn( [ \"[\" + node.name + \"] \" + \"[Info] \",\"tableInit is undefined - setting up\",msg]);\n\ttableInit = {ready: false, details:null};\n\tcontext.set(\"tableInit\",tableInit);\n}\n\nif  (msg.hasOwnProperty(\"tableInit\")) {\n\ttableInit = msg.tableInit;\n\tcontext.set(\"tableInit\",tableInit);\n}\nlet statusMsg = {};\nif (!tableInit.ready) {\n\tnode.error( [ \"[\" + node.name + \"] \" + \"[Error] \",\"tableInit is Not ready no processing done\"]);\n\treturn [null, statusMsg];\t\n}\n\nlet tableDetails = flow.get(tableInit.details);\nif (tableDetails === undefined) {\n\tnode.error( [ \"[\" + node.name + \"] \" + \"[Error] \",\"tableDetails is undefined\"]);\n\treturn [null, statusMsg];\t\n}\n\nlet globalData = global.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] globalData not set \" + tableDetails.tableDatabaseName]);\n    return [null, statusMsg];\t\n}\nfunction recordLookup(rec) {\n\tif (tableDetails.tableType==\"object\") {\n\t\tlet keys = tableDetails.tableKeys;\n\t\tif (!keys) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] Keys not set \" ,keys, tableDetails]);\n\t\t\treturn -1;\n\t\t}\n\t\tif (!globalData[rec[keys[0]]]) return -1;\n\t\treturn rec[keys[0]];\n\t}\n\t//we have an array with potentially multiple match conditions\n\tlet ind = globalData.findIndex( (ele) => {\n\t\tlet finder = true;\n\t\tObject.keys(rec).forEach( (key) => {\n\t\t\tif ( ( (key != \"id\") || (ele[key]) )  && (ele[key] != rec[key]) ) finder = false;\n\t\t\t//if (key != \"id\") if (ele[key] != rec[key] ) finder = false;\n\t\t});\n\t\treturn finder;\n\t});\n\treturn ind; \n}\nlet found;\nif (msg.tableOldField)  {\n\tlet prevRec = RED.util.cloneMessage(msg.payload);// or spread{...msg.payload}; //should we use red.clone?\n\tObject.keys(msg.tableOldField).forEach( (key) => { prevRec[key] = msg.tableOldField[key] } );\n\tfound = recordLookup(prevRec);\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \" +  \" Lookup using prevRec \",prevRec,msg,tableDetails]);\n} else {\n\tfound = recordLookup(msg.payload)\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \" +  \" Lookup using payload \",msg,tableDetails]);\n}\nif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \" +  \" Received Msg found=\" + found + \" \" + msg.tableUpdateCommand,msg,tableDetails]);\nif (msg.tableUpdateCommand == \"addRow\") {\n\tif ( (found != -1) || (globalData[found] != null) ) {\n\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \" +  msg.tableUpdateCommand +\n\t\t\t\t\t\"Device already exists in \" + tableDetails.tableDatabaseName + \" found=\" + found, globalData[found],tableDetails,msg]);\n\t\t//node.status({fill:\"red\",shape:\"ring\",text: tableInit.details + \" \" + msg.tableUpdateCommand +\" Device already in \" + tableDetails.tableDatabaseName + \" \"  + msg.payload[tableDetails.tableKeys[0]]});\n\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" \" + msg.tableUpdateCommand +\n\t\t\" Device already in \" + tableDetails.tableDatabaseName + \" \"  + msg.payload[tableDetails.tableKeys[0]]}};\n\t\tnode.status(statusMsg);\n\t\treturn [null, statusMsg];\t\n\t}\n\tlet {id, ...sms} = msg.payload; // Update all fields except id\n\tif (tableDetails.tableType == \"array\" ){\n\t\tglobalData.unshift(sms);\n\t} else {\n\t\tdelete sms[tableDetails.tableKeys[0]]; // get rid of key if object\n\t\tglobalData[msg.payload[tableDetails.tableKeys[0]]] = sms;\n\t}\n} else {\n\tif ( (msg.tableUpdateCommand == \"deleteRow\") || (msg.tableUpdateCommand == \"cellEdited\") ||\n\t\t\t\t\t(msg.tableUpdateCommand == \"updateData\") || (msg.tableUpdateCommand == \"updateOrAddData\") ) {\n\t\tif (found == -1) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \" +  msg.tableUpdateCommand +\n\t\t\t\t\t\t\" Device not in \" + tableDetails.tableDatabaseName, tableDetails,msg]);\n\t\t\t//node.status({fill:\"red\",shape:\"ring\",text: tableInit.details + \" \" + msg.tableUpdateCommand + \" Device not in  \" + tableDetails.tableDatabaseName + \" \"  + msg.payload[tableDetails.tableKeys[0]]});\n\t\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" \" + msg.tableUpdateCommand + \n\t\t\t\" Device not in \" + tableDetails.tableDatabaseName + \" \"  + msg.payload[tableDetails.tableKeys[0]]}};\n\t\t\tnode.status(statusMsg);\n\t\t\treturn [null, statusMsg];\t\t\t\t\t\t\t\t\n\t\t}\n\t\tif (msg.tableUpdateCommand == \"deleteRow\") {\n\t\t\tif (tableDetails.tableType == \"array\" ){\n\t\t\t\tglobalData.splice(found,1);\n\t\t\t} else {\n\t\t\t\tglobalData[msg.payload[tableDetails.tableKeys[0]]] = null;\n\t\t\t}\n\t\t} else {\n\t\t\tlet {id, ...sms} = msg.payload; // Update all fields except id\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"][Info]Updating Record found=\" + \n\t\t\t\t\t\t\t\t\t\tfound,msg,tableDetails,globalData[found],sms]);\n\t\t\tif (tableDetails.tableType == \"object\" ) {\n\t\t\t\tlet incomingKey = sms[tableDetails.tableKeys[0]]\n\t\t\t\tdelete sms[tableDetails.tableKeys[0]];\n\t\t\t\tif (incomingKey != found) {\n\t\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \" +  \" Key Change found=\" + found + \" inc=\" + incomingKey,msg,tableDetails]);\n\t\t\t\t\tglobalData[incomingKey] = {};\n\t\t\t\t\tObject.keys(sms).forEach((key) => {\n\t\t\t\t\t\tglobalData[incomingKey][key] = globalData[found][key];\n\t\t\t\t\t});\n\t\t\t\t\tglobalData[found] = null;\n\t\t\t\t\tdelete globalData.found\n\t\t\t\t} else {\n\t\t\t\t\tObject.keys(sms).forEach((key) => {\n\t\t\t\t\t\tglobalData[found][key] = sms[key];\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tObject.keys(sms).forEach((key) => { \n\t\t\t\t\tglobalData[found][key] = sms[key];\n\t\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"][Info]Updating key=\" + key,\n\t\t\t\t\t\t\t\t\t\t\tglobalData[found],sms]);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} else {\n\t\tnode.error( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Error] \", \"Msg topic not = TableUpdate \",tableDetails,msg]);\n\t\t//node.status({fill:\"red\",shape:\"ring\",text: tableInit.details + \" \" + \"Unknown Command  \" + msg.tableUpdateCommand });\n\t\tstatusMsg = {payload: {fill:\"red\",shape:\"ring\",text: tableInit.details.replace(\"$parent.\",\"\") + \" \" + \"Unknown Command  \" + msg.tableUpdateCommand }};\n\t\tnode.status(statusMsg);\n\t\treturn [null, statusMsg];\t\n\t}\n}\nglobal.set(tableDetails.tableDatabaseName,globalData);\nif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + tableDetails.tableDatabaseName + \"]\" + \"[Info] \" + msg.tableUpdateCommand, msg.payload,msg,globalData,tableDetails.tableDatabaseName]);\n//node.status({fill:\"green\",shape:\"dot\",text: tableInit.details + \" \" + msg.tableUpdateCommand + \" updated \" + msg.payload[tableDetails.tableKeys[0]]});\t\nstatusMsg = {payload: {fill:\"green\",shape:\"dot\",text: tableInit.details.replace(\"$parent.\",\"\") + \" \" + msg.tableUpdateCommand + \" updated \" + msg.payload[tableDetails.tableKeys[0]]}};\nnode.status(statusMsg);\nif (!tableDetails.tableJsonName) return [null, statusMsg]\nreturn [{topic:\"globalData\", payload:globalData, filename: tableDetails.tableJsonName }, statusMsg];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [
            [
                "705d5191a8a0ae06"
            ],
            []
        ]
    },
    {
        "id": "387ef78c09413a20",
        "type": "debug",
        "z": "e6dcd8331e41ae02",
        "name": "Status of Data Updater Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "705d5191a8a0ae06",
        "type": "file",
        "z": "e6dcd8331e41ae02",
        "name": "Output Widgets",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 820,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1d2107bf234291e1",
        "type": "function",
        "z": "e6dcd8331e41ae02",
        "name": "Periodic Refresher",
        "func": "\n//Periodic Refresher // On close clears timer\nlet gDebug = global.get(\"gDebug\");\n//gDebug=true;\nlet refreshTimer = context.get(\"refreshTimer\");\nlet refreshEnabled = context.get(\"refreshEnabled\");\nlet flowDef = null;\nlet refreshTime = 20;\nif ( (msg.topic == \"clear\") && (refreshTimer) ) {\n\tnode.warn(\"Clearing refreshTimer\");\n\tclearInterval(refreshTimer);\n\treturn null;\n} else if (msg.topic==\"clear\") {\n\tnode.warn(\"refreshTimer not set\");\n\treturn null;\n}\n\n\nif ( (msg.topic==\"initTable\") && (msg.hasOwnProperty(\"tableInit\")) ) {\n\tflowDef = \"$parent.\" + msg.tableInit.details\n\tif (flowDef) {\n\t\trefreshEnabled = flow.get(flowDef).refreshableTable;\n\t\tif (flow.get(flowDef).refreshTime) refreshTime = flow.get(flowDef).refreshTime;\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + flow.get(flowDef).tableDatabaseName + \"][Info] refreshEnabled  is \" + refreshEnabled + \" refreshTime is \" + refreshTime + \" seconds\",flowDef,msg]);\n\t} else {\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] flow variable not set in initTable \" + flowDef,msg]);\n\t}\n\tcontext.set(\"refreshEnabled\",refreshEnabled);\n\tif ( (refreshEnabled) && (!refreshTimer) ) {\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][\" + flow.get(flowDef).tableDatabaseName + \"][Info] Refresh is enabled setInterval at \" + refreshTime + \"seconds\",flowDef,msg]);\n\t\trefreshTimer = setInterval( () => node.send({topic:\"RefreshTable\", payload: new Date()}),refreshTime * 1000);\n\t\tcontext.set(\"refreshTimer\",refreshTimer);\n\t}\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "9b5a81c385f9a69e"
            ]
        ]
    },
    {
        "id": "3eb03baf.31c8f4",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "45f5c0b.a1a654"
            ]
        ]
    },
    {
        "id": "45f5c0b.a1a654",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "gDebug=true",
        "func": "global.set(\"gDebug\",true);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "fccb5b8c.4b7758",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "gDebug=false",
        "func": "global.set(\"gDebug\",false);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "118837a3.f3aa38",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "fccb5b8c.4b7758"
            ]
        ]
    },
    {
        "id": "3b734bc4.385ab4",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Load Widgets from file",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".1",
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "68b13fe1.a3c26"
            ]
        ]
    },
    {
        "id": "68b13fe1.a3c26",
        "type": "file in",
        "z": "2ba57bbe.bdfc14",
        "name": "Input widgets",
        "filename": "/devices/Widgets.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "47b12b0.6e23cd4"
            ]
        ]
    },
    {
        "id": "47b12b0.6e23cd4",
        "type": "json",
        "z": "2ba57bbe.bdfc14",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "cffac546.91c208"
            ]
        ]
    },
    {
        "id": "cffac546.91c208",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Create Widget Context",
        "func": "let widgetMapping = [];\n//let widgetMapping = global.get(\"widgetMapping\");\nfor (i=0; i<msg.payload.length;i++) {\n    widgetMapping[i] = msg.payload[i];\n}\nglobal.set(\"widgetMapping\", widgetMapping);\nmsg.payload = widgetMapping\nnode.warn(\"length of widgetMapping=\" +msg.payload.length )\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 800,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3e9729d4.63dfa6",
        "type": "comment",
        "z": "2ba57bbe.bdfc14",
        "name": "espTable",
        "info": "var espTable = global.get(\"espTable\");",
        "x": 400,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e0f1c1b.6fc904",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "546ccdaa.d931d4"
            ]
        ]
    },
    {
        "id": "546ccdaa.d931d4",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Init IOMapping",
        "func": "let inoutMapping = global.get(\"inoutMapping\");\ninoutMapping = null;\nglobal.set(\"inoutMapping\",inoutMapping);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "b3d20da0.2d8fb",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Setup pathways",
        "func": "/*let pathWays = { smartThingsWled: \"Smartthings to Wled\",\n                    smartThingsTasmota: \"Smartthings to Tasmota\",\n\t\t\t\t\tsmartThingsDomo: \"Smartthings to Domo\",\n\t\t\t\t\tesphomeSmartthings: \"esphome to Smartthings\",\n                    esp32Smartthings: \"esp32 to Smartthings\",\n                    esp32Domo: \"esp32 to Domo\",\n                    esphomeDomo: \"esphome to Domo\",\n                    unknown: \"unknown\"}\n*/\nlet pathWays = { smartThingsWled: {name: \"Smartthings to Wled\", input: \"smartthings\", output: \"wled\"},\n\t\t\t\tsmartThingsTasmota: {name: \"Smartthings to Tasmota\", input: \"smartthings\", output: \"Tasmota\"},\n\t\t\t\tsmartThingsDomo: {name: \"Smartthings to Domo\", input: \"smartthings\", output: \"domoticz\"},\n\t\t\t\tesphomeSmartthings: {name: \"esphome to Smartthings\", input: \"esphome\", output: \"smartthings\"},\n\t\t\t\tesphomeDomo: {name: \"esphome to Domo\", input: \"esphome\", output: \"domoticz\"},\n\t\t\t\tesp32Smartthings: {name: \"esp32 to Smartthings\", input: \"esp32\", output: \"smartthings\"},\n\t\t\t\tesp32Domo: {name: \"esp32 to Domo\", input: \"esp32\", output: \"domoticz\"},\n\t\t\t\tfromespSmartthings: {name: \"fromesp to Smartthings\", input: \"fromesp\", output: \"smartthings\"},\n\t\t\t\tfromespDomo: {name: \"fromesp to Domo\", input: \"fromesp\", output: \"domoticz\"},\n\t\t\t\tunknown: {name: \"unknown\"}}\nglobal.set(\"pathWays\", pathWays);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ff9dc72b.390ce8",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "b3d20da0.2d8fb"
            ]
        ]
    },
    {
        "id": "d98560a9.ab9b5",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Setup Platforms",
        "func": "//Setup Platforms \n\n//let Platforms = [\"Tasmota\", \"Wled\", \"Smartthings\", \"ESP32\", \"esphome\", \"Other\"];\nlet Platforms = {esp32: {\n\t\t\t\t\tvalidCommands: [null, null, null, null, null,\"temperature\", null,null]\n\t\t\t\t\t},\n\t\t\t\tfromesp: {\n\t\t\t\t\tvalidCommands: [null, null, null, null, null,\"temperature\", \"humidity\", null]\n\t\t\t\t},\n\t\t\t\tsmartthings: {\n\t\t\t\t\tvalidCommands: [\"color\",\"hue\",\"level\",\"saturation\",\"switch\",\"temperature\",\"humidity\",null],\n\t\t\t\t\tsuffix: \"/set_state\",\n\t\t\t\t\tsuffixType: \"command\"\n\t\t\t\t\t},\n\t\t\t\tdomoticz: {\n\t\t\t\t\tvalidCommands: [null, null, null, null, null, \"temperature\",\"humidity\",null],\n\t\t\t\t\tprefix: \"domoticz/in\",\n\t\t\t\t\tsuffix: null,\n\t\t\t\t\tsuffixType: \"domo\"\n\t\t\t\t\t},\n\t\t\t\tTasmota: {\n\t\t\t\t\tvalidCommands: [\"Color\", \"HsbColor1\", \"Dimmer\", \"HsbColor2\", \"POWER0\", null, null,null],\n\t\t\t\t\t// Power0 0 off, 1 on, 2, toggle   applies to all power outputs\n\t\t\t\t\t// 3 can blink returning to preblink  ???4 turns blink off???\n\t\t\t\t\t// PowerN controls output N\n\t\t\t\t\t//hsbcolor will set hue sat and brightness (level!)\n\t\t\t\t\tprefix: \"Tasmota/\",\n\t\t\t\t\tsuffix: \"/cmnd\",\n\t\t\t\t\tsuffixType: \"command\"\n\t\t\t\t\t},\n\t\t\t\twled: {\n\t\t\t\t\tvalidCommands: [\"col\", \"col\", \"\", \"col\", \"\", null, null,null],\n\t\t\t\t\tprefix: \"wled/\",\n\t\t\t\t\tsuffix: null,\n\t\t\t\t\tsuffixType: \"command\"\n\t\t\t\t\t},\n\t\t\t\tesphome: {\n\t\t\t\t\tvalidCommands: [null, null, null, null, null, \"temperature\", \"humidity\",null],\n\t\t\t\t\ttopicCommands: [\"_uptime_sensor\",\"_wifi_signal\",\"_temperature\",\"_humidity\",\"_battery_level\"],\n\t\t\t\t\tparsedCommand:[null,null,\"temperature\",\"humidity\",null]\n\t\t\t\t\t},\n                other: {\n\t\t\t\t\tvalidCommands: [null, null, null, null, null, null, null,null]\n\t\t\t\t\t}\n};\nglobal.set(\"Platforms\", Platforms);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "52780413.278f5c",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 560,
        "y": 400,
        "wires": [
            [
                "d98560a9.ab9b5"
            ]
        ]
    },
    {
        "id": "ecfda9eb.5c5ac8",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Load Mappings from file",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".1",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "102f93b4.eb5b9c"
            ]
        ]
    },
    {
        "id": "102f93b4.eb5b9c",
        "type": "file in",
        "z": "2ba57bbe.bdfc14",
        "name": "Input Mappings",
        "filename": "/devices/inoutmappings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 480,
        "wires": [
            [
                "f732254c.a51cc8"
            ]
        ]
    },
    {
        "id": "f732254c.a51cc8",
        "type": "json",
        "z": "2ba57bbe.bdfc14",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 577,
        "y": 481.33331298828125,
        "wires": [
            [
                "2241fed6.bb3da2"
            ]
        ]
    },
    {
        "id": "2241fed6.bb3da2",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Create inoutmapping from file",
        "func": "let inoutMapping = global.get(\"inoutMapping\");\ninoutMapping = msg.payload.map( (inp) => {return inp})\nglobal.set(\"inoutMapping\", inoutMapping);\nnode.warn(\"length of inoutMapping=\" + inoutMapping.length )\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b6f0d0924372d78d",
        "type": "comment",
        "z": "2ba57bbe.bdfc14",
        "name": "Review esphome topics",
        "info": "ass",
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "5692894227903d48",
        "type": "ui_template",
        "z": "2ba57bbe.bdfc14",
        "group": "f0c6945f.deae18",
        "name": "Master style override",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\nbody.nr-dashboard-theme {\n background-color: #333333;\n font-family: Calibri;\n}\nbutton, html, input, select, textarea {\n font-family: Calibri;\n}\nbody.nr-dashboard-theme md-content md-card {\n background-color: #33333300;\n color: #d0d0d0;\n}\n\nbody.nr-dashboard-theme md-toolbar {\n background-image: linear-gradient(to right, #404040, #737373);\n box-shadow: 0px 1px 20px #0000008a;\n}\n.nr-dashboard-theme ui-card-panel {\n background-image: linear-gradient(to bottom right, #404040, #737373);\n border: 1px solid #555555;\n box-shadow: 0 0 20px #00000066;\n}\n\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n color: #2eb82e;\n text-shadow: 0 0 2px black;\n}\n\n.nr-dashboard-theme .nr-dashboard-form-button {\n background-image: linear-gradient(to bottom right, #8a8a8a6e, #00000070);\n background-color: #00ad03;\n color: #d0d0d0;\n text-shadow: 0 0 2px #525252;\n border-radius:6px;\n}\n\n.nr-dashboard-theme .nr-dashboard-button .md-button {\n background-image: linear-gradient(to bottom right, #8a8a8a6e, #00000070);\n background-color: #00ad03;\n color: #d0d0d0;\n text-shadow: 0 0 2px #525252;\n border-radius:6px;\n}\n.nr-dashboard-theme .nr-dashboard-button .md-button:hover {\n background-color: #00de00;\n}\n\n.nr-dashboard-theme .nr-dashboard-switch md-switch .md-thumb {\n background-image: linear-gradient(to bottom right, #48b349, #115009);\n}\n.nr-dashboard-button .md-button {\n box-shadow: 0 1px 3px 0 rgba(0,0,0,.26)!important;\n width: 100%!important;\n height: 100%!important;\n margin: 0!important;\n min-width: 0!important;\n min-height: 0!important;\n}\n.nr-dashboard-theme .nr-dashboard-slider .md-thumb:after {\n background-image: linear-gradient(to bottom right, #48b349, #115009);\n border-style: none;\n}\n.nr-dashboard-theme .nr-dashboard-numeric .value {\n background-color: #33333300;\n color:#d0d0d0;\n}\n\n.nr-dashboard-numeric .value {\n font-weight: 700;\n text-align: center;\n border: 0;\n}\n\n\n.nr-dashboard-form {\n display: inline-block;\n width: 100%;\n overflow-y: visible;\n}\n#SETTINGS_TEATED_cards {\n min-height: 260px;\n}\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "global",
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "bf6d4bbc19de9c3f",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Load SmartDevices",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".1",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "5a29073cb11ebf4d"
            ]
        ]
    },
    {
        "id": "5a29073cb11ebf4d",
        "type": "file in",
        "z": "2ba57bbe.bdfc14",
        "name": "SmartDevices File",
        "filename": "/devices/SmartDevices.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 350,
        "y": 320,
        "wires": [
            [
                "f39d5471b3056ee8"
            ]
        ]
    },
    {
        "id": "f39d5471b3056ee8",
        "type": "json",
        "z": "2ba57bbe.bdfc14",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 320,
        "wires": [
            [
                "82843a0fd995270a"
            ]
        ]
    },
    {
        "id": "82843a0fd995270a",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Create SmartDevices Context",
        "func": "let SmartDevices = [];\n//let widgetMapping = global.get(\"widgetMapping\");\nfor (i=0; i<msg.payload.length;i++) {\n    SmartDevices[i] = msg.payload[i];\n}\nglobal.set(\"SmartDevices\", SmartDevices);\nmsg.payload = SmartDevices\nnode.warn(\"length of SmartDevices=\" +msg.payload.length )\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "85850987ea17a22a",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 560,
        "y": 160,
        "wires": [
            [
                "202eaf7801002f46"
            ]
        ]
    },
    {
        "id": "202eaf7801002f46",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Init Degree Symbol",
        "func": "global.set(\"gDegreeSymbol\",'°')\nlet gDegreeSymbol = global.get(\"gDegreeSymbol\")\nnode.warn([\"[\" + node.name + \"][Info] gDegreeSymbol initiated \",gDegreeSymbol])\nreturn null;\n//Alt + 0176. \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a27f910a23c1d2fa",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "Load MACs from file",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": ".1",
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "91423751cb939f88"
            ]
        ]
    },
    {
        "id": "91423751cb939f88",
        "type": "file in",
        "z": "2ba57bbe.bdfc14",
        "name": "MACs file",
        "filename": "/devices/MACs.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 320,
        "y": 560,
        "wires": [
            [
                "3c63095346191caf"
            ]
        ]
    },
    {
        "id": "3c63095346191caf",
        "type": "json",
        "z": "2ba57bbe.bdfc14",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 560,
        "wires": [
            [
                "e9afc97e5946cd7b"
            ]
        ]
    },
    {
        "id": "e9afc97e5946cd7b",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Create MACs Context",
        "func": "let MACs = {};\n//let widgetMapping = global.get(\"widgetMapping\");\nObject.keys(msg.payload).forEach( (mac) => {\n\tMACs[mac] = msg.payload[mac];\n});\nglobal.set(\"MACs\", MACs);\nmsg.payload = MACs\nnode.warn(\"length of MACs=\" + Object.keys(msg.payload).length )\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "04b3a264b767a2c9",
        "type": "inject",
        "z": "2ba57bbe.bdfc14",
        "name": "BT Device Configs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"govee\":{\"SERVICE_UUID\":\"00010203-0405-0607-0809-0a0b0c0d1910\",\"CONTROL_UUID\":\"00010203-0405-0607-0809-0a0b0c0d2b11\",\"NOTIFY_UUID\":null,\"validCommands\":[{\"cmd\":\"setColor\",\"args\":[\"value\"],\"min\":0,\"max\":255,\"state\":\"switchColor\",\"bits\":[[51,5,2],[0,255,174,84]]},{\"cmd\":\"setLevel\",\"args\":[\"value\"],\"min\":0,\"max\":64,\"state\":\"switchLevel\",\"bits\":[[51,4],[]]},{\"cmd\":\"on\",\"args\":[],\"state\":\"switch\",\"bits\":[[51,1,1],[],[50]]},{\"cmd\":\"off\",\"args\":[],\"state\":\"switch\",\"bits\":[[51,1,0],[],[50]]}]},\"candela\":{\"SERVICE_UUID\":\"0000fe87-0000-1000-8000-00805f9b34fb\",\"CONTROL_UUID\":\"aa7d3f34-2d4f-41e0-807f-52fbf8cf7443\",\"NOTIFY_UUID\":\"8f65073d-9f57-4aaa-afea-397d19d5bbeb\",\"lanDeviceType\":\"candela\",\"validCommands\":[{\"cmd\":\"setColor\",\"args\":[\"value\"],\"min\":0,\"max\":255,\"state\":\"switchColor\",\"bits\":[[67,65],[255,101]]},{\"cmd\":\"setLevel\",\"args\":[\"value\"],\"min\":0,\"max\":64,\"state\":\"switchLevel\",\"bits\":[[67,66],[]]},{\"cmd\":\"on\",\"args\":[],\"state\":\"switch\",\"bits\":[[67,64,1],[]]},{\"cmd\":\"off\",\"args\":[],\"state\":\"switch\",\"bits\":[[67,64,2],[]]}]},\"bedside\":{\"SERVICE_UUID\":\"8e2f0cbd-1a66-4b53-ace6-b494e25f87bd\",\"CONTROL_UUID\":\"aa7d3f34-2d4f-41e0-807f-52fbf8cf7443\",\"NOTIFY_UUID\":\"8f65073d-9f57-4aaa-afea-397d19d5bbeb\",\"lanDeviceType\":\"bedside\",\"validCommands\":[{\"cmd\":\"getName\",\"args\":[],\"state\":\"balls\"},{\"cmd\":\"getState\",\"args\":[],\"state\":\"balls\"},{\"cmd\":\"on\",\"args\":[],\"state\":\"switch\",\"bits\":[[67,64,1],[]]},{\"cmd\":\"off\",\"args\":[],\"state\":\"switch\",\"bits\":[[67,64,2],[]]},{\"cmd\":\"setColor\",\"args\":[\"red\",\"green\",\"blue\"],\"state\":\"colorControl\",\"bits\":[[67,65],[255,101]]},{\"cmd\":\"setLevel\",\"args\":[\"value\"],\"min\":0,\"max\":64,\"state\":\"switchLevel\",\"bits\":[[67,66],[]]}]}}",
        "payloadType": "json",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "8ab5054d54bb811e"
            ]
        ]
    },
    {
        "id": "8ab5054d54bb811e",
        "type": "function",
        "z": "2ba57bbe.bdfc14",
        "name": "Create Bluettooth Device Context",
        "func": "let BluetoothDeviceDetails = msg.payload;\nglobal.set(\"BluetoothDeviceDetails\",BluetoothDeviceDetails)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e6e791e884dccf72",
        "type": "inject",
        "z": "c5268cea.8c086",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "aa9ec87dd68d0514"
            ]
        ]
    },
    {
        "id": "aa9ec87dd68d0514",
        "type": "function",
        "z": "c5268cea.8c086",
        "name": "Widget Table Prep",
        "func": "// Widget Table Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"widgetTableDetails\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"widgetMapping\",\n    tableDatabaseName: \"widgetMapping\",\n    tableJsonName: \"/devices/Widgets.json\",\n    tableType: \"array\",\n    tableKeys: [\"devName\"],\n    lastID: null,\n    tableTab: \"widgetMapping\",\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"devName\":\"Device\",\"widgetType\":\"Widget Type\",\"widgetNumber\":\"Widget #\",\"mqtName\":\"MQT Topic\", \"units\": \"°C\"}],true],\"returnPromise\":true}\n\t// use widgetTableDetails.addRowInject  in addrow button\n};\n\nlet globalData = global.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\n\nflow.set(flowTableName,tableDetails);\n\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.warn([\"[\" + node.name + \"] \", \"[Error] \", \"SmartDevices does not exist\"])\n    return null;\n}\nlet selParams = SmartDevices.map((dev) => dev.devName);\nlet widgetParams = [\"Gauge\", \"Graph\", \"Text\", \"Chart\"];\nlet gaugeParams = [\"gage\", \"donut\", \"compass\", \"wave\"];\nlet measureParams = [\"temperature\",\"power\",\"humidity\",\"illuminance\", \"motion\", \"energy\" ];\nlet panelParams = [\"general\", \"pool\", \"upstairs\",\"downstairs\",\"downstairs2\"]\n//\"gage\", \"donut\", \"compass\", \"wave\"\n\n\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"columns\":[{\"title\":\"id\", \"field\": \"id\", \"width\": 60, \"align\": \"center\" },\n\t\t\t{\"title\":\"<i class='fa fa-trash'></i>\", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, \"align\": \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n            {\"title\": \"Device Name\", \"field\": \"devName\", \"width\": 150, \"editor\": \"select\", editorParams: {values:selParams}},\n\t\t\t{\"title\": \"Measure\", \"field\": \"measure\", \"width\": 120, \"editor\": \"select\", editorParams: {values:measureParams}},\n\t\t\t{\"title\": \"Panel\", \"field\": \"panelName\", \"width\":100, \"editor\": \"select\", editorParams: {values:panelParams}, validator: \"required\"},\n            {\"title\": \"Widget Type\", \"field\": \"widgetType\", \"align\": \"center\", \"width\":120, \"editor\": \"select\", editorParams:{values:widgetParams}},\n\t\t\t{\"title\": \"Gauge Type\", \"field\": \"gaugeType\", \"align\": \"center\", \"width\":120, \"editor\": \"select\", editorParams:{values:gaugeParams}},\n            {\"title\": \"Widget #\", \"field\": \"widgetNumber\", \"align\": \"center\" , \"width\":100, \"editor\": \"number\", editorParams:{min:1,max:10}, validator:[\"required\"]},\n            {\"title\": \"Units\", \"field\": \"units\", \"align\": \"center\" , \"width\":80, \"editor\": \"input\"},\n\t\t\t{\"title\":\"Label\", \"field\":\"label\",\"width\":120, \"editor\":\"input\"},\n\t\t\t{\"title\": \"Min\", \"field\": \"min\", \"align\": \"center\" , \"width\":80, \"editor\": \"input\", validator: \"numeric\"},\n\t\t\t{\"title\": \"Max\", \"field\": \"max\", \"align\": \"center\" , \"width\":80, \"editor\": \"input\", validator: \"numeric\"}\n        ],\n        \"cellEdited\": \"function(cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:cell.getRow().getIndex(),row:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n    \"customHeight\":30\n}\n\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\n\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nmsg.options = SmartDevices.map( (dev) => {return dev.devName})\nmsg.devices = SmartDevices\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "2b30588719029a60"
            ]
        ]
    },
    {
        "id": "57d08487d0434a9c",
        "type": "ui_table",
        "z": "c5268cea.8c086",
        "group": "428181fcca22bd35",
        "name": "Widget Table",
        "order": 2,
        "width": "16",
        "height": "15",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 730,
        "y": 140,
        "wires": [
            [
                "2b30588719029a60"
            ]
        ]
    },
    {
        "id": "5cb5327f85b280d7",
        "type": "ui_button",
        "z": "c5268cea.8c086",
        "name": "Row Add",
        "group": "428181fcca22bd35",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Add Row",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"addRow\",\"arguments\":[[{\"devName\":\"Device\",\"widgetType\":\"Widget Type\",\"widgetNumber\":\"Widget #\",\"mqtName\":\"MQT Topic\",\"units\":\"°C\"}],true],\"returnPromise\":true}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 540,
        "y": 220,
        "wires": [
            [
                "2b30588719029a60"
            ]
        ]
    },
    {
        "id": "0a60293363c5856c",
        "type": "ui_ui_control",
        "z": "c5268cea.8c086",
        "name": "",
        "events": "all",
        "x": 540,
        "y": 260,
        "wires": [
            [
                "2b30588719029a60"
            ]
        ]
    },
    {
        "id": "2b30588719029a60",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "c5268cea.8c086",
        "name": "",
        "env": [],
        "x": 710,
        "y": 200,
        "wires": [
            [
                "57d08487d0434a9c"
            ]
        ]
    },
    {
        "id": "bd68749af098c16d",
        "type": "inject",
        "z": "c5268cea.8c086",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "13d259e5431c4800"
            ]
        ]
    },
    {
        "id": "13d259e5431c4800",
        "type": "function",
        "z": "c5268cea.8c086",
        "name": "SmartDevices Table Prep",
        "func": "//SmartDevices Table Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"SmartDevicesTableDetails\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"SmartDevices\",\n    tableDatabaseName: \"SmartDevices\",\n    tableJsonName: \"/devices/SmartDevices.json\",\n    tableType: \"array\",\n    tableKeys: [\"devName\"],\n    lastID: null,\n    tableTab: \"SmartDevices\",\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"platform\":\"platform\",\"validCommands\":[null,null,null,null,null,null,null],\"prefix\":\"prefix\",\"suffix\":\"suffix\",\"suffixType\":\"command\"}],true],\"returnPromise\":true}\n};\n// use SmartDevicesTableDetails.addRowInject  in addrow button\n\nlet globalData = global.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\nflow.set(flowTableName,tableDetails);\nlet platforms = global.get(\"Platforms\");\nlet suffixTypeChoices = [\"domo\",\"command\"]\nconst rooms = [\"Lounge\", \"Garden\", \"Hall\", \"Landing\", \"Bedroom\", \"Garage\", \"Kitchen\"];\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t\t{title:\"<i class='fa fa-trash'></i>\", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, align : \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n\t\t\t\t{\"title\":\"Device Name\",\"field\":\"devName\",\"width\":160, \"editor\":\"input\"},\n\t\t\t\t{\"title\":\"MqTT Topic\",\"field\":\"mqtName\",\"width\":385,\"editor\":\"input\", \"formatter\" : \"function(cell,fps,onr){return '<font color=\\\"green\\\">' + cell.getValue();}\"},\n\t\t\t\t{\"title\":\"Platform\",\"field\":\"platform\",\"width\":100,\"editor\":\"select\",\n\t\t\t\t\t\t\t\t\tformatter : \"function(cell,fps,onr){var cols={'Tasmota':'Blue','Wled':'Coral','Smartthings':'LightGrey','Other':'Orange'};return '<font color=\\\"' + cols[cell.getValue()] + '\\\">' + cell.getValue();}\",\n                                    editorParams: {values: Object.keys(platforms)},\n                                    align:\"center\"},\n\t\t\t\t{\"title\":\"Sensor\",\"field\":\"sensor\",\"width\":75,\"editor\":\"tick\",\n\t\t\t                        formatter:\"tickCross\", \"formatterParams\":{allowEmpty:true},\n\t\t\t                        align:\"center\"},\n\t\t\t\t{\"title\":\"IDX\",\"field\":\"idx\",\"width\":75,\"editor\":\"number\", editorParams:{min:1,max:99,step:1}, align:\"center\"},\n\t\t\t\t{\"title\":\"Room\",\"field\":\"room\",\"width\":100,\"editor\":\"select\",editorParams: {values: rooms}, align:\"center\"}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.warn([\"[\" + node.name + \"] \", \"[Error] \", \"SmartDevices does not exist\"])\n    return null;\n}\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nmsg.options = SmartDevices.map( (dev) => {return dev.devName})\nmsg.devices = SmartDevices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 400,
        "wires": [
            [
                "e9255f932dde104a"
            ]
        ]
    },
    {
        "id": "c873a083391f2b86",
        "type": "ui_table",
        "z": "c5268cea.8c086",
        "group": "fd8a8e61.282aa",
        "name": "SmartDevices Table",
        "order": 2,
        "width": "13",
        "height": "12",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 820,
        "y": 340,
        "wires": [
            [
                "e9255f932dde104a"
            ]
        ]
    },
    {
        "id": "60facbc947c2b929",
        "type": "ui_button",
        "z": "c5268cea.8c086",
        "name": "",
        "group": "fd8a8e61.282aa",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Add Row",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"addRow\",\"arguments\":[[{\"devName\":\"New Device\",\"mqtName\":\"mqtt topic\",\"platform\":\"other\",\"sensor\":false,\"IDX\":0}],true],\"returnPromise\":true}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "e9255f932dde104a"
            ]
        ]
    },
    {
        "id": "7e0c7889ce85d3b2",
        "type": "inject",
        "z": "c5268cea.8c086",
        "name": "Test updateData",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"command\":\"updateData\",\"arguments\":[[{\"id\":3,\"idx\":33}]],\"returnPromise\":true}",
        "payloadType": "json",
        "x": 1260,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7009085ac192bd58",
        "type": "ui_ui_control",
        "z": "c5268cea.8c086",
        "name": "",
        "events": "all",
        "x": 520,
        "y": 460,
        "wires": [
            [
                "e9255f932dde104a"
            ]
        ]
    },
    {
        "id": "8f3aecf26f234308",
        "type": "comment",
        "z": "c5268cea.8c086",
        "name": "Msg investigation",
        "info": "# CLick on cell\ntopic is fieldname\npayload object - row\nrow number screen rownumber?\n\n# edit a cell\npayload is string\nui_contril - callback:cell edited\npayload new val\noldval is oldval\nfield is fieldname\nid is id\nrowfields is array of row fields\n\n# addRow\nPayload is object\nPayload.command is addrow\nPayload.returnPromise is true\nPayload.arguments is array of 1\nPayload.arguments[0] is array\nPayload.arguments[0][0] think it is added row cells\nPayload.arguments[0][1] is true think it is' add at top'\nevent  weirdness\n\n## and from table we get\nPayload not there\ntopic: success\nui_control.callback is addrow\nreturn is object \nreturn.command is addrow\nreturn.arguments is array of 2\nreturn.arguments[0] is object empty(cos we added empty?)\nreturn.arguments[1] is true (add at top?)\nreturn.returnPromise true\n\n# UpdateData\ntopic is \"\" ???\npayload is object\npayload.command updateData\npayload.returnPromise  is true\nPayload.arguments is array\nPayload.arguments[0] is array\nPayload.arguments[0][0] is argument to command {id:3,idx:33}\n\n## and from table we get\nPayload not there\ntopic: success\nui_control.callback is updateData\nreturn is object \nreturn.command is updateData\nreturn.arguments is array\nreturn.arguments[0] is array\nreturn.arguments[0][0] is arguments to command {id:3,idx:33}\nreturn.arguments.returnPromise true\n\n# Refresh\nPayload string \"lost\"\n& \npayload string connect\n&\npayload string change\ntab:4    ????\nname:Tab 10  \nParams object empty\n\n\n\n\n\n\n",
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "f995a8a4ccd1ada2",
        "type": "comment",
        "z": "c5268cea.8c086",
        "name": "Table Recorder logic",
        "info": "Payload is string\n\tcelledited - Not handled\n\tUIControl  - set payload to tabledata - Refresh?\nPayload is object\n\tPayload is array then rows to be loaded - set tabledata to payload\n\tCleardata?? init tabledata\nOtherwise\n\ttopic success return from table - apply to tabledata\n\t\n\t\n",
        "x": 1250,
        "y": 440,
        "wires": []
    },
    {
        "id": "e9255f932dde104a",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "c5268cea.8c086",
        "name": "",
        "env": [],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "c873a083391f2b86"
            ]
        ]
    },
    {
        "id": "6c3c012aff76755a",
        "type": "inject",
        "z": "c5268cea.8c086",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3`",
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "98c0d1a3822625c3"
            ]
        ]
    },
    {
        "id": "98c0d1a3822625c3",
        "type": "function",
        "z": "c5268cea.8c086",
        "name": "InOut Map Table Prep",
        "func": "// InOut Map  Table Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"inoutmappingsTableDetails\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"inoutmappings\",\n    tableDatabaseName: \"inoutMapping\",\n    tableJsonName: \"/devices/inoutmappings.json\",\n    tableType: \"array\",\n    tableKeys: [\"devName\",\"pathWay\"],\n    lastID: null,\n    tableTab: \"inoutmappings\",\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"devName\":\"Device\",\"pathWay\":\"\", \"outTopic\":\"topic\",\"inpTopic\":\"topic\"}],true],\"returnPromise\":true}\n};\nlet globalData = global.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\nflow.set(flowTableName,tableDetails);\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n\tnode.warn( [ \"[\" + node.name + \"] \" + \" [Error] \", \"SmartDevices mapping not set\"]);\n\treturn null;\n}\nlet pathWays = global.get(\"pathWays\");\nif (!pathWays) {\n    node.warn(  [ \"[\" + node.name + \"] \" + \"[Error] \", \"Pathways not set\"]);\n    return null\n}\nlet selDevs = SmartDevices.map( (dev) => dev.devName );\nlet selPathWays = Object.values(pathWays).map( (pway) => pway.name );\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t{title:\"<i class='fa fa-trash'></i>\", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, align : \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n            {\"title\":\"Device Name\",\"field\":\"devName\",\"width\":150, \"editor\":\"select\", validator: \"required\", editorParams:{values:selDevs}},\n            {\"title\":\"Pathway\",\"field\":\"pathWay\",\"width\":150,\"editor\":\"select\", validator: \"required\", editorParams:{values:selPathWays}},\n            {\"title\":\"Input Topic\",\"field\":\"inpTopic\",\"width\":385,\"editor\":\"input\", validator: \"required\"},\n\t\t\t{\"title\":\"Output Topic\",\"field\":\"outTopic\",\"width\":385,\"editor\":\"input\", validator: \"required\"}\n        ],\n        \"cellEdited\": \"function(cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:cell.getRow().getIndex(),row:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n    \"customHeight\":30\n}\n\n\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nmsg.options = SmartDevices.map( (dev) => {return dev.devName})\nmsg.devices = SmartDevices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 580,
        "wires": [
            [
                "745a3eb1d8b04938"
            ]
        ]
    },
    {
        "id": "c5acf810c64444fe",
        "type": "ui_table",
        "z": "c5268cea.8c086",
        "group": "3f6270c7.fbae8",
        "name": "inout table",
        "order": 2,
        "width": "15",
        "height": "12",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 830,
        "y": 520,
        "wires": [
            [
                "745a3eb1d8b04938"
            ]
        ]
    },
    {
        "id": "0fe1f1816f73e696",
        "type": "ui_button",
        "z": "c5268cea.8c086",
        "name": "Row Add",
        "group": "3f6270c7.fbae8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Add Row",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"addRow\",\"arguments\":[[{\"devName\":\"New Device\",\"pathWay\":\"pathway\",\"inpTopic\":\"input Topic\",\"outTopic\":\"output Topic\"}],true],\"returnPromise\":true}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 500,
        "y": 600,
        "wires": [
            [
                "745a3eb1d8b04938"
            ]
        ]
    },
    {
        "id": "23fef3e2cbb51d5b",
        "type": "ui_ui_control",
        "z": "c5268cea.8c086",
        "name": "",
        "events": "all",
        "x": 500,
        "y": 640,
        "wires": [
            [
                "745a3eb1d8b04938"
            ]
        ]
    },
    {
        "id": "cb293ec129adc5ed",
        "type": "function",
        "z": "c5268cea.8c086",
        "name": "Derive Maps from SmartDevuces",
        "func": "let pathWays = global.get(\"pathWays\");\nif (!pathWays) {\n    node.warn( [ \"[\" + node.name + \"] \", \"[Error] \", \"Pathways not set\"]);\n    return null\n}\n\nlet inoutMapping = global.get(\"inoutMapping\");\nif (!inoutMapping) {\n    let SmartDevices = global.get(\"SmartDevices\");\n    if (!SmartDevices) {\n        node.warn( [ \"[\" + node.name + \"] \" + \" [Error] \", \"SmartDevices mapping not set\"]);\n        return null;\n    }\n    let inoutMapping = SmartDevices.map( (ele) => {\n\t\tlet tmp = {devName: \"\", pathWay: \"\", inpTopic: \"\", outTopic: \"\", sensor: false};\n\t\ttmp.devName = ele.devName;\n\t\ttmp.sensor = ele.sensor;\n\t\ttmp.pathWay = pathWays.unknown.name;\n\t\tif ( ele.mqtName.includes(\"esphome\") ) {\n\t\t\ttmp.pathWay = pathWays.esphomeSmartthings.name;\n\t\t} else if ( ele.mqtName.includes(\"esp32\") ) {\n\t\t\ttmp.pathWay = pathWays.esp32Smartthings.name;\n\t\t} else if ( ( ele.platform==\"Tasmota\" ) && (!ele.sensor) ) {\n\t\t    tmp.pathWay = pathWays.smartThingsTasmota.name;\n        } else if ( ( ele.platform==\"WLED\" ) && (!ele.sensor) ) {\n\t\t    tmp.pathWay = pathWays.smartThingsWled.name;\n\t\t} else {\n\t\t\tif (!ele.Platform) tmp.pathWay =  pathWays.unknown.name;\n\t\t}\n\t\tif (tmp.pathWay == pathWays.esp32Smartthings.name ) {\n\t\t\ttmp.outTopic = \"smartthings/\" + ele.devName;\n\t\t\tif (ele.mqtName.includes(\"WEMO-04\")) {\n\t\t\t\ttmp.outTopic = \"smartthings/Swimming Pool\";\n\t\t\t}\n\t\t\ttmp.inpTopic = ele.mqtName;\n\t\t} else if (tmp.pathWay == pathWays.esphomeSmartthings.name ) {\n\t\t\ttmp.outTopic = \"smartthings/\" + ele.devName;\n\t\t\t//} else if  (msg.topic.includes(\"xiaomib7_temperature/state\")) pt1Topic = \"smartthings/Garden Temperature/temperature\"\n\t\t\ttmp.inpTopic = tmp.inpTopic =  ele.mqtName;\n\t\t\tif (ele.mqtName.includes(\"xiaomib7_temperature\")) {\n\t\t\t\ttmp.outTopic = \"smartthings/Garden Temperature/temperature\";\n\t\t\t}\n\t\t} else if (tmp.pathWay == pathWays.smartThingsWled.name ) {\n\t\t\ttmp.inpTopic = \"smartthings/\" + ele.devName;\n\t\t\ttmp.outTopic = \"wled/\" + ele.mqtName\n\t\t} else if (tmp.pathWay == pathWays.smartThingsTasmota.name ) {\n\t\t\ttmp.inpTopic = \"smartthings/\" + ele.devName;\n\t\t\ttmp.outTopic = \"Tasmota/\" + ele.mqtName\n\t\t}\n\t\treturn tmp;\n\t})\n\tSmartDevices.forEach( (ele) => {\n\t\tif (ele.idx) {\n\t\t\tinoutMapping.push({devName: ele.devName, pathWay: pathWays.smartThingsDomo.name, inpTopic: ele.mqtName, outTopic: ele.idx, sensor: true});\n\t\t}\n\t});\n\tglobal.set(\"inoutMapping\",inoutMapping);\n}\n\nmsg.payload = inoutMapping\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "745a3eb1d8b04938",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "c5268cea.8c086",
        "name": "",
        "x": 690,
        "y": 580,
        "wires": [
            [
                "c5acf810c64444fe"
            ]
        ]
    },
    {
        "id": "1564fa2b9e52c12a",
        "type": "ui_button",
        "z": "c5268cea.8c086",
        "name": "",
        "group": "7a38f16b.72f3e",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "65b437a844298e49"
            ]
        ]
    },
    {
        "id": "65b437a844298e49",
        "type": "function",
        "z": "c5268cea.8c086",
        "name": "dump status table",
        "func": "//Dump Status Table\nconst deviceStatus = global.get(\"DevStatus\").devices\nvar oTable = [];\nif (!deviceStatus) {\n\tnode.warn(\"Error - device Status does not exist\");\n\treturn null;\n}\nconst keys = Object.keys(deviceStatus);\nkeys.forEach((key, index) => {\n    oTable.push({topic:key.replace('smartthings/',\"\").replace(\"Heating Zone (Evohome)\",\"Evo Zone\"),value:deviceStatus[key]})\n});\nconst sortedOTable = oTable.sort(function(a, b) {\n  var nameA = a.topic.toUpperCase(); // ignore upper and lowercase\n  var nameB = b.topic.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1; //nameA comes first\n  }\n  if (nameA > nameB) {\n    return 1; // nameB comes first\n  }\n  return 0;  // names must be equal\n});\n//node.warn(oTable);\nmsg.payload = oTable;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 60,
        "wires": [
            [
                "65e8fea263535826"
            ]
        ]
    },
    {
        "id": "65e8fea263535826",
        "type": "ui_template",
        "z": "c5268cea.8c086",
        "group": "7a38f16b.72f3e",
        "name": "list status table",
        "order": 1,
        "width": "6",
        "height": "13",
        "format": "<div layout=\"row\" layout-align=\"start center\" >\n    <table border=1>\n    <tr>\n  <td flex  style=\"color: yellow\" border=2>Topic</td>\n  <td flex  style=\"color: yellow\" border=2>Last State</td>\n  </tr>\n    <tr ng-repeat=\"device in msg.payload\">\n  <td flex style=\"color: white\">{{device.topic}}</td>\n  <td flex style=\"color: white\">{{device.value}}</td>\n  </tr>\n  </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 680,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "e87a7cf33429d1c3",
        "type": "comment",
        "z": "c5268cea.8c086",
        "name": "Key present in Object processing",
        "info": "",
        "x": 1320,
        "y": 340,
        "wires": []
    },
    {
        "id": "a9fc88d5998d390c",
        "type": "mqtt in",
        "z": "bd322587.f323b8",
        "name": "",
        "topic": "from_smartthings/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "d2cc341d.cff668",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "251d9920a49af749"
            ]
        ]
    },
    {
        "id": "f65c71eb994d2165",
        "type": "mqtt in",
        "z": "bd322587.f323b8",
        "name": "",
        "topic": "esp32/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "251d9920a49af749"
            ]
        ]
    },
    {
        "id": "b13393ba9ab82389",
        "type": "mqtt in",
        "z": "bd322587.f323b8",
        "name": "esphome...",
        "topic": "esphome/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "251d9920a49af749"
            ]
        ]
    },
    {
        "id": "84117b5db8cf173a",
        "type": "comment",
        "z": "bd322587.f323b8",
        "name": "Sort out pway keys vs name",
        "info": "Sort out pway keys vs name\nMebbe change table to store key and save faff in apply maps",
        "x": 260,
        "y": 40,
        "wires": []
    },
    {
        "id": "f89e0aafdc163bdd",
        "type": "inject",
        "z": "bd322587.f323b8",
        "name": "Clear Sensor Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "db0dc30a6a0863d4"
            ]
        ]
    },
    {
        "id": "db0dc30a6a0863d4",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Clear Sensors",
        "func": "//Clear Sensors\nlet  counter = 0;\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Error] \", \"SmartDevices not set\"]);\n}\nlet DevStatus = global.get(\"DevStatus\")\nif (!DevStatus) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"DevStatus not set - Nothing to do\"]);\n}\nObject.keys(DevStatus.devices).forEach( (devSt) => {\n\tconst found = SmartDevices.find( (dev) => {\n\t\treturn (dev.mqtName.includes(devSt));\n\t});\n\tif ( found && (found.sensor) ) {\n\t    counter++;\n\t\tnode.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"Device from DevStatus is a sensor, will be cleared \",devSt,SmartDevices,DevStatus.devices[devSt]]);\n\t\tDevStatus.devices[devSt].stale = true;\n\t}\n});\nnode.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + counter + \" devices cleared\"]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4dacfa8e7cd945fa",
        "type": "mqtt out",
        "z": "bd322587.f323b8",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "827c9488.27bf78",
        "x": 1190,
        "y": 380,
        "wires": []
    },
    {
        "id": "165a2942b1743085",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Handle off Xmas group",
        "func": "var pt1Topic = \"wled/\"\nvar pload = \"\"\nif (msg.payload==\"on\"){\n    node.warn(\"Turning Xmas Lights On\");\n    pload =\"on\"\n} else if (msg.payload==\"off\"){\n    node.warn(\"Turning Xmas Lights Off\");\n    pload = \"off\"\n} else {\n    node.warn(\"Unknown Command\");\n}\nvar msgArray = [{topic:pt1Topic + \"HallDoor\",payload:pload},\n                {topic:pt1Topic + \"HallTable\",payload:pload},\n                {topic:pt1Topic + \"DiningRoom\",payload:pload},\n                {topic:pt1Topic + \"Porch\",payload:pload},\n                {topic:pt1Topic + \"LivingRoom\",payload:pload},\n                {topic:pt1Topic + \"LivingRoomSofa\",payload:pload}\n                ]\nreturn [msgArray];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "8efc9e63e897805d",
        "type": "inject",
        "z": "bd322587.f323b8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1000,
        "wires": [
            [
                "165a2942b1743085"
            ]
        ]
    },
    {
        "id": "abdcd7ed43cb1856",
        "type": "link out",
        "z": "bd322587.f323b8",
        "name": "Sensor outputs",
        "links": [
            "23bd3d24.796492",
            "990784fd.3d9468",
            "a08248d2.278db8"
        ],
        "x": 1195,
        "y": 300,
        "wires": []
    },
    {
        "id": "1c5c7246e61168cb",
        "type": "file",
        "z": "bd322587.f323b8",
        "name": "Temperature csv etc",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 840,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "b5ab15f8bb1ad873",
        "type": "csv",
        "z": "bd322587.f323b8",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "topic,value,timestamp",
        "skip": "0",
        "strings": true,
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "1c5c7246e61168cb"
            ]
        ]
    },
    {
        "id": "e58e2513e0fdd730",
        "type": "comment",
        "z": "bd322587.f323b8",
        "name": "Check debugCSV changing filename",
        "info": "",
        "x": 420,
        "y": 580,
        "wires": []
    },
    {
        "id": "164bd974595663f0",
        "type": "link out",
        "z": "bd322587.f323b8",
        "name": "",
        "mode": "link",
        "links": [
            "23bd3d24.796492",
            "7258f1185c807dc6",
            "8fee1ed55824f884"
        ],
        "x": 475,
        "y": 360,
        "wires": []
    },
    {
        "id": "33da2c0da776d609",
        "type": "http request",
        "z": "bd322587.f323b8",
        "d": true,
        "name": "Smartthings REST API Delete",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 870,
        "y": 620,
        "wires": [
            [
                "5f5ae7808bef3356"
            ]
        ]
    },
    {
        "id": "5f5ae7808bef3356",
        "type": "debug",
        "z": "bd322587.f323b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 620,
        "wires": []
    },
    {
        "id": "a7e6aceaf7442978",
        "type": "http request",
        "z": "bd322587.f323b8",
        "name": "Smartthings REST API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "x": 360,
        "y": 660,
        "wires": [
            [
                "9c6f32fbf334c41e"
            ]
        ]
    },
    {
        "id": "9c6f32fbf334c41e",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Delete Devices",
        "func": "\nconst drivers ={};\nlet devicesToBeDeleted = []\nlet items = JSON.parse(msg.payload).items;\nitems.forEach( (dev) =>{\n    if ((dev.lan) && (dev.lan.executingLocally==true) && dev.label != \"Hello World Device\") {\n\t\tdrivers[dev.lan.driverId] = true;\n        devicesToBeDeleted.push({name:dev.name, label:dev.label, deviceId:dev.deviceId, driverId:dev.lan.driverId})\n\t}\n})\nif (Object.keys(drivers).length >1) {\n\tnode.error([\"To many Drivers \" + Object.keys(drivers).length, drivers]);\n}\n\nnode.warn([\"Devices to be Deleted \",Object.keys(drivers), devicesToBeDeleted, drivers]);\nmsg.payload = devicesToBeDeleted\n//https://api.smartthings.com/v1/devices/{deviceId}\nlet delMsgs = []\ndevicesToBeDeleted.forEach( (dev) => {\n    delMsgs.push({topic:\"deleteDevice:\" + dev.label, url:\"https://api.smartthings.com/v1/devices/\" + dev.deviceId})\n})\nreturn [delMsgs,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 660,
        "wires": [
            [
                "33da2c0da776d609"
            ],
            []
        ]
    },
    {
        "id": "af1836d18a3604fb",
        "type": "inject",
        "z": "bd322587.f323b8",
        "name": "Delete Devs",
        "props": [
            {
                "p": "url",
                "v": "https://api.smartthings.com/v1/devices",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "devices",
        "payloadType": "str",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "a7e6aceaf7442978"
            ]
        ]
    },
    {
        "id": "f3d6e7b2dcc00aa8",
        "type": "subflow:bfa2bdee7c11e1ae",
        "z": "bd322587.f323b8",
        "name": "",
        "env": [],
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "6526a5189f8e1ca5",
        "type": "comment",
        "z": "bd322587.f323b8",
        "name": "Debug stuff",
        "info": "Sednd 1st Output to debug for Upd Dev Status, Prepoc and Apply Maps\n\nAlso send third output from apply Maps",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "312cb752410f6ab4",
        "type": "subflow:bfa2bdee7c11e1ae",
        "z": "bd322587.f323b8",
        "name": "",
        "x": 1130,
        "y": 100,
        "wires": []
    },
    {
        "id": "87f9b6b1d7a11010",
        "type": "websocket in",
        "z": "bd322587.f323b8",
        "name": "",
        "server": "",
        "client": "551e147027ce95a7",
        "x": 290,
        "y": 900,
        "wires": [
            [
                "e6e4f2370078eb25"
            ]
        ]
    },
    {
        "id": "e6e4f2370078eb25",
        "type": "json",
        "z": "bd322587.f323b8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 900,
        "wires": [
            [
                "29e763d0fa5d7671"
            ]
        ]
    },
    {
        "id": "a57e14a4e59f308d",
        "type": "http request",
        "z": "bd322587.f323b8",
        "name": "Sky Lounge status",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.82:9006/as/system/information",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 760,
        "wires": [
            [
                "1bc56955c07d9eb2"
            ]
        ]
    },
    {
        "id": "9b297eee2f355915",
        "type": "inject",
        "z": "bd322587.f323b8",
        "name": "Init Sky and Denon State",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "headers",
                "v": "Connection: Upgrade\\r\\nUpgrade: websocket",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 760,
        "wires": [
            [
                "a57e14a4e59f308d",
                "f3572208678fb588"
            ]
        ]
    },
    {
        "id": "f3572208678fb588",
        "type": "http request",
        "z": "bd322587.f323b8",
        "name": "Denon Status",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.1.110:8080/goform/formMainZone_MainZoneXmlStatusLite.xml",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 480,
        "y": 820,
        "wires": [
            [
                "81fa15734a984b78"
            ]
        ]
    },
    {
        "id": "81fa15734a984b78",
        "type": "xml",
        "z": "bd322587.f323b8",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 690,
        "y": 820,
        "wires": [
            [
                "ec5ac06356ab5341"
            ]
        ]
    },
    {
        "id": "38e64fcdcd75d9ee",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Init Sky State",
        "func": "if (msg.payload.activeStandby) {\n    statusMsg = {fill:\"yellow\",shape:\"ring\",text: \"activeStandby\"};\n    flow.set(\"skyLastState\",\"activeStandby\")\n} else {\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"active\"};\n    flow.set(\"skyLastState\",\"active\")\n}\nmsg.topic = \"Sky_State\"\nnode.status(statusMsg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "1bc56955c07d9eb2",
        "type": "json",
        "z": "bd322587.f323b8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 760,
        "wires": [
            [
                "38e64fcdcd75d9ee"
            ]
        ]
    },
    {
        "id": "ec5ac06356ab5341",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Init Denon State ",
        "func": "if (msg.payload.item.Power[0].value[0] == \"ON\") {\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"ON\"};\n    flow.set(\"denonLastState\",\"ON\")\n} else {\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"OFF\"};\n    flow.set(\"denonLastState\",\"OFF\")\n}\nnode.status(statusMsg);\nmsg.topic = \"Denon_State\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "251d9920a49af749",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Pre Proc",
        "func": "//Pre Proc\nlet gDebug = global.get(\"gDebug\")\nlet platforms = global.get(\"Platforms\");\n//Platform always the start\nlet topics = msg.topic.split(\"/\");\nlet platform = platforms[topics[0]];\nlet device = topics[1];\nlet payload = {cmd: topics.slice(2).join(\"/\"), payload: msg.payload};\nlet shortTopic = topics.slice(0,2).join(\"/\");\n\nlet debugText = \"\";\nlet debugMessage = {topic: \"debug\", debugFileName: \"/devices/commonDebug.csv\",\n\t\t\t\t\tpayload:[\"PreProc\", msg.topic, payload.cmd]};\nlet statusMsg = \"\";\nif ( (msg.source==\"node-red\") ||  (msg.topic.includes(\"set_state\")) ) {\n    if (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"Ignoring a node-red generated message\",msg]);\n    return [null,null];\n}\n\nif (topics[0] == \"esphome\") {\n\tif ( platform && platform.topicCommands && (topics.length > 3) ) {\n\t\tlet found;\n\t\ttry {\n\t\t\tfound = platform.topicCommands.find( (tc) => topics[3].includes(tc));\n\t\t} catch (err) {\n\t\t\tdebugText = (debugText == \"\") ? \"espHome Catch \" + err  : \";\" + \"espHome Catch \" + err;\n\t\t\tnode.error([ \"[\" + node.name + \"][error] \" + err, topics, msg]);\n\t\t\tfound = false\n\t\t}\n\t\tif (found) {\n\t\t\tshortTopic = \"esphome/\" + topics[3].slice(0, topics[3].indexOf(found));\n\t\t\tpayload.cmd = platform.parsedCommand[platform.topicCommands.indexOf(found)];\n\t\t\tif (!payload.cmd) {\n\t\t\t\tdebugText = (debugText == \"\")\n\t\t\t\t\t\t\t? \"Esphome ignoring \" + topics.join(\"/\") + \" cmd not in pForm.parsed\"\n\t\t\t\t\t\t\t: debugText + \";\" + \"Esphome ignoring \" + topics.join(\"/\") + \" cmd not in pForm.parsed\";\n\t\t\t\t\t\n\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\t\t\tdebugMessage.payload.push(debugText);\n\t\t\t\treturn [debugMessage, null]\n\t\t\t}\n\t\t\tdebugText = (debugText == \"\") ? \"Processing esphome \" + payload.cmd : debugText + \";\" + \"Processing esphome \" + payload.cmd\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\t\tdebugMessage.payload.push(debugText);\n\t\t\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"esphome mapped to \" + shortTopic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn [debugMessage, {topic: shortTopic, oldTopic: msg.topic, oldPayload: msg.payload, debugFileName: \"/devices/preproc.csv\", payload: payload}]\n\t\t} else {\n\t\t\tdebugText = (debugText == \"\")\n\t\t\t\t\t\t? \"Esphome ignoring Command not in pForm.topicCom \" + topics.join(\"/\")\n\t\t\t\t\t\t: \";\" + \"Esphome ignoring Command not in pForm.topicCom \" + topics.join(\"/\");\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\t\tdebugMessage.payload.push(debugText);\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Command not in pForm \" + msg.topic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn [debugMessage,null]\n\t\t}\n\t} else {\n\t\tdebugText = (debugText == \"\")\n\t\t\t\t\t? \"Esphome ignoring Platform/topics error \" + topics.join(\"/\")\n\t\t\t\t\t: \";\" + \"Esphome ignoring Platform/topics error \" + topics.join(\"/\");\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\tdebugMessage.payload.push(debugText);\n\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Pform/topics error \" + msg.topic};\n\t\tnode.status(statusMsg)\n\t\treturn [debugMessage,null]\n\t}\n} else if (topics[0] == \"fromesp\") {\n\t//payload = {cmd: topics.slice(3).join(\"/\"), payload: msg.payload};\n\t//shortTopic = topics.slice(0,3).join(\"/\");\n\tif (topics.length>2) {\n\t\tpayload = {cmd: topics.slice(3).join(\"/\"), payload: msg.payload};\n\t\tshortTopic = \"fromesp/\" + topics[2];\n\t}\n\tdebugText = (debugText == \"\") ?\n\t\t\t\t\t\t\t\"Processing \" + msg.topic + \" \" + msg.payload + \" to \" + shortTopic + \" \" + payload.cmd + \":\" + payload.payload :\n\t\t\t\t\t\t\tdebugText + \";\" + \"Processing \" + msg.topic + \" \" + msg.payload + \" to \" + shortTopic + \" \" + payload.cmd + \":\" + payload.payload;\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText, msg]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"fromesp mapped \" + msg.topic + \" to \" + shortTopic};\n\tnode.status(statusMsg)\n\treturn [debugMessage, {topic:shortTopic, oldTopic: msg.topic, oldPayload: msg.payload, debugFileName: \"/devices/preproc.csv\", payload: payload}]\n} else if (topics[0] == \"toesp\") {\n\tdebugText = (debugText == \"\")\n\t\t\t\t? \"Esphome ignoring toesp \" + topics.join(\"/\")\n\t\t\t\t: \";\" + \"Esphome ignoring toesp \" + topics.join(\"/\");\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"toesp ignored \" + msg.topic};\n\tnode.status(statusMsg)\n\treturn [debugMessage,null]\n}\ndebugText = (debugText == \"\") ? \"Processing \" + topics[0] + \" \" + payload.cmd : debugText + \";\" + \"Processing \" + topics[0] + \" \" + payload.cmd\nif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\ndebugMessage.payload.push(debugText);\nreturn [debugMessage, {topic:shortTopic, oldTopic: msg.topic, oldPayload: msg.payload, debugFileName: \"/devices/preproc.csv\", payload: payload}]\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 240,
        "wires": [
            [],
            [
                "070ed5c2bb3651fb",
                "164bd974595663f0"
            ]
        ]
    },
    {
        "id": "070ed5c2bb3651fb",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Upd DevStatus",
        "func": "//Upd DevStatus\nlet gDebug = global.get(\"gDebug\")\nlet nowDate = new Date();\nlet devStatus = global.get(\"DevStatus\");\nlet debugText = \"\";\nlet statusMsg = \"\";\nlet debugMessage = {topic: \"debug\", debugFileName: \"/devices/commonDebug.csv\",\n\t\t\t\t\tpayload:[\"UpdateStatus\", msg.topic, msg.payload.cmd]};\nif (!devStatus) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"Initialising DevStatus\"]);\n\tdevStatus = {\"created\": nowDate, \"messSeq\": 0, devices: {}};\n}\nconst SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.error( [ \"[\" + node.name + \"] \" + \" [Error] \", \"Smartdevices does not exist\"]);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: \"Smartdevices does not exist\"};\n\tnode.status(statusMsg)\n\treturn [null,null]\n}\n\nif (msg.source==\"node-red\") {\n    if (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"Ignoring a node-red generated message\",msg]);\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Ignoring a node-red generated message\"};\n\tnode.status(statusMsg)\n    return [null,null]\n}\ndevStatus.messSeq++;\nlet statusChanged = true;\nconst smDevice = SmartDevices.find( sm => sm.mqtName == msg.topic );\nconst isSensor = (smDevice && (smDevice.sensor));\nif (devStatus.devices[msg.topic]) {\n\tif (devStatus.devices[msg.topic][msg.payload.cmd]) {\n\t\tif (isSensor && (devStatus.devices[msg.topic][msg.payload.cmd].time)) {\n\t\t\tlet sinceUpdate = nowDate - devStatus.devices[msg.topic][msg.payload.cmd].time;\n\t\t\tif (sinceUpdate > 30*60*1000)  {\n\t\t\t\tif (gDebug) node.warn(\"setting device to stale \" + msg.topic + \" ms=\" + sinceUpdate + \" cmd=\" + msg.payload.cmd +\n\t\t\t\t\t\" lastupdate:\" + devStatus.devices[msg.topic][msg.payload.cmd].time.toDateString() + \" \" + devStatus.devices[msg.topic][msg.payload.cmd].time.toLocaleTimeString());\n\t\t\t\tdevStatus.devices[msg.topic].stale = true;\n\t\t\t}\n\t\t}\n\t\tif ((devStatus.devices[msg.topic][msg.payload.cmd].payload == msg.payload.payload)  && (!devStatus.devices[msg.topic].stale) ){\n\t\t    statusChanged = false;\n\t\t} else {\n\t\t\tdevStatus.devices[msg.topic][msg.payload.cmd] = {payload:msg.payload.payload, seq: devStatus.messSeq,  time: nowDate};\n\t\t}\n\t} else {\n\t\tdevStatus.devices[msg.topic][msg.payload.cmd] = {payload:msg.payload.payload, seq: devStatus.messSeq,  time: nowDate};\n\t}\n\tdevStatus.devices[msg.topic].stale = false;\n} else {\n\tdevStatus.devices[msg.topic] = {stale: false};\n\tdevStatus.devices[msg.topic][msg.payload.cmd] = {payload:msg.payload.payload, seq: devStatus.messSeq,  time: nowDate};\n}\nif (statusChanged) {\n\tdebugText = (debugText == \"\") ? \"Status Changed\" : \";\" + \"Status Changed\";\n} else {\n\tdebugText = (debugText == \"\") ? \"Status NOT Changed\" : \";\" + \"Status NOT Changed\";\n}\nglobal.set(\"DevStatus\",devStatus);\nif (statusChanged) {\n\tdebugText = (debugText == \"\") ? \"Status Changed\" : \";\" + \"Status Changed\";\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"Status Changed for \" + msg.topic};\n\tnode.status(statusMsg)\n    return [debugMessage,msg];\n}\n//statusMsg = {fill:\"green\",shape:\"dot\",text: \"Status Changed for \" + msg.topic};\ndebugText = (debugText == \"\") ? \"Status NOT Changed\" : \";\" + \"Status NOT Changed\";\ndebugMessage.payload.push(debugText);\nstatusMsg = {fill:\"yellow\",shape:\"dot\",text: \"Status Not Changed for \" + msg.topic};\nnode.status(statusMsg)\nreturn [debugMessage,null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 320,
        "wires": [
            [],
            [
                "2ad4e451a2d68e1d"
            ]
        ]
    },
    {
        "id": "2ad4e451a2d68e1d",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Apply Maps",
        "func": "//Apply Maps\nlet gDebug = global.get(\"gDebug\")\nlet inoutMapping = global.get(\"inoutMapping\");\nlet platforms = global.get(\"Platforms\");\nconst DevStatus = global.get(\"DevStatus\");\nlet debugText = \"\";\nlet debugMessage = null;\nlet statusMsg = null;\ndebugMessage = {topic: \"debug\", debugFileName: \"/devices/commonDebug.csv\",\n\t\t\t\t\tpayload:[\"ApplyMaps\", msg.topic, msg.payload.cmd, msg.payload.payload]}\nif (!DevStatus) {\n\tdebugText = \"DevStatus not set\";\n    node.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: debugText};\n\tnode.status(statusMsg)\n    return [debugMessage, null]\n}\n\n\nif (!platforms) {\n\tdebugText = \"Platforms not set\";\n    node.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: debugText};\n\tnode.status(statusMsg)\n    return [debugMessage, null]\n}\nlet pathWays = global.get(\"pathWays\");\nif (!pathWays) {\n\tdebugText = \"Pathways not set\";\n    node.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: debugText};\n\tnode.status(statusMsg)\n\treturn [debugMessage, null]\n}\nif (!inoutMapping) {\n\tdebugText = \"inout mapping not set\";\n\tnode.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: debugText};\n\tnode.status(statusMsg)\n\treturn [debugMessage, null]\n}\nlet counter = context.get(\"counter\");\nif (counter === undefined) {\n\tdebugText = \"Counter not set, initialised\"\n    node.warn( [ \"[\" + node.name + \"] \" + \"[Info] \" + debugText]);\n    counter = 0;\n}\nlet msgs = [];\ncounter++;\ncontext.set(\"counter\", counter);\nif (gDebug) node.warn([ \"[\" + node.name + \"][DEBUG] Received \" + msg.topic, inoutMapping, msg]);\nlet outputTopicCmds = {};\nlet inoutFound = false;\ninoutMapping.forEach((inout) => {\n\tif ( (inout.inpTopic) && (msg.topic.includes(inout.inpTopic)) ) {\n\t\tinoutFound = true;\n\t\tlet pway = null;\n\t\t//convert name to key\n\t\tfor (let pwyk in pathWays) {\n\t\t\tif (pathWays[pwyk].name == inout.pathWay) pway=pwyk;\n\t\t}\n\t\tif (!pathWays[pway]) {\n\t\t\tdebugText = \"inout map pathway invalid \" + \"dev=\" + inout.devName + \" pathway=\" +  inout.pathWay + \" pway=\" + pway;\n\t\t\tnode.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"pway not found \" + msg.topic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn null;\n\t\t}\n\t\tif (!platforms[pathWays[pway].input]) {\n\t\t\tdebugText = \"Platform on inout map invalid \" + \"dev=\" + inout.devName + \" pathway=\" + pway + \" inp platform=\" + pathWays[pway].input;\n\t\t\tnode.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Inp Pform not found \" + msg.topic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn null;\n\t\t}\n\t\tif (!platforms[pathWays[pway].output]) {\n\t\t\tdebugText = \"Platform on inout map invalid \" + \"dev=\" + inout.devName + \" pathway=\" + pway + \" out platform=\" + pathWays[pway].output;\n\t\t\tnode.error( [ \"[\" + node.name + \"] \" + \" [Error] \" + debugText]);\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Out Pform not found \" + msg.topic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn null;\n\t\t}\n\t\tinpPlatform = pathWays[pway].input\n\t\toutPlatform = pathWays[pway].output\n\t\tif (gDebug) node.warn([ \"[\" + node.name + \"][DEBUG] process pathway \" + pway + \" for \" + msg.topic, inout, msg]);\n\t\tlet derivedTopic = inout.outTopic;\n\t\tlet outPayload = msg.payload.payload;\n\t\tlet outCommand = msg.payload.cmd;\n\t\tlet derivedPayload = null;\n\t\tif (outPlatform == \"domoticz\") derivedTopic = platforms[outPlatform].prefix;\n\t\tif (platforms[inpPlatform].validCommands.includes(msg.payload.cmd)) {\n\t\t\toutCommand = platforms[outPlatform].validCommands[ platforms[inpPlatform].validCommands.indexOf(msg.payload.cmd) ];\n\t\t\tif (outCommand != null) {\n\t\t\t\tif (outPlatform==\"wled\") {\n\t\t\t\t\tif (outCommand == \"level\") outPayload = (msg.payload.payload/100 ) * 255\n\t\t\t\t}\n\t\t\t\tif (outPlatform == \"domoticz\"){\n\t\t\t\t\tif ( ( outCommand == \"temperature\" ) || ( outCommand == \"humidity\" ) ) {\n\t\t\t\t\t\tconst devStatus = DevStatus.devices[inout.inpTopic];\n\t\t\t\t\t\toutPayload = \"\";\n\t\t\t\t\t\tif ( (devStatus) && (devStatus.humidity) ) outPayload = \";\" + devStatus.humidity.payload + \";0\";\n\t\t\t\t\t\tif ( (devStatus) && (devStatus.temperature) ) outPayload = devStatus.temperature.payload + outPayload\n\t\t\t\t\t\toutPayload = {idx: parseInt(inout.outTopic), svalue: outPayload};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (platforms[outPlatform].suffixType == \"command\") {\n\t\t\t\t\tif ((platforms[outPlatform].suffix) || (platforms[outPlatform].suffix===\"\")) derivedTopic = derivedTopic  + platforms[outPlatform].suffix + \"/\" + outCommand;\n\t\t\t\t}\n\t\t\t\tdebugText = (debugText == \"\") ? \"Mapped \" + inout.inpTopic + \":\" + msg.payload.cmd + \" via \" + pway + \" to \" + derivedTopic + \":\" + outCommand\n\t\t\t\t\t\t\t\t\t\t\t : debugText + \";\" + \"Mapped \" + inout.inpTopic + \":\" + msg.payload.cmd + \" via \" + pway + \" \" + derivedTopic + \":\" + outCommand;\n\t\t\t\tmsgs.push( {topic:derivedTopic, source: \"node-red\", debugFileName: \"/devices/applyMapsMsgs.csv\", \n\t\t\t\t\t\tpathWay: pway, payload:outPayload} );\n\t\t\t} else {\n\t\t\t\tdebugText = (debugText == \"\") ? \"Input Command \" + msg.payload.cmd + \" not valid for output platform \" + outPlatform\n\t\t\t\t\t\t\t\t\t\t\t: debugText + \"Input Command \" + msg.payload.cmd + \" not valid for output platform \" + outPlatform;\t\t\n\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText]);\n\t\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Invalid Out Cmd\"};\n\t\t\t\tnode.status(statusMsg)\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tdebugText = (debugText == \"\") ? \"Input Command \" + msg.payload.cmd + \" not valid for input platform \" + inpPlatform\n\t\t\t\t\t\t\t\t\t\t: debugText + \"Input Command \" + msg.payload.cmd + \" not valid for input platform \" + inpPlatform;\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText]);\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Invalid Inp Cmd\"};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn null;\n\t\t}\n    }\n})\nif (!inoutFound) {\n\tdebugText = (debugText == \"\") ? \"No inoutMapping Found\" : debugText + \";\" + \"No inoutMapping Found\";\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"No Mapping Found \" + msg.topic};\n\tnode.status(statusMsg)\n} else {\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"Forwarding \" + msgs.length + \" msgs for \" + msg.topic};\n\tnode.status(statusMsg)\n\t\n}\ndebugMessage.payload.push(debugText);\nreturn [debugMessage, msgs];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 320,
        "wires": [
            [],
            [
                "abdcd7ed43cb1856",
                "4dacfa8e7cd945fa"
            ]
        ]
    },
    {
        "id": "782468d3982b25e6",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Check DevStatus",
        "func": "//Clear Sensors\nlet  counter = 0;\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Error] \", \"SmartDevices not set\"]);\n}\nlet DevStatus = global.get(\"DevStatus\")\nif (!DevStatus) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"DevStatus not set - Nothing to do\"]);\n}\nObject.keys(DevStatus.devices).forEach( (devSt) => {\n\tconst smDevice = SmartDevices.find( sm => sm.mqtName == devSt );\n\tif (!smDevice) node.warn(\"DevStatus Topic check\\t Device not found \" + devSt);\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "60f4af68c564af34",
        "type": "inject",
        "z": "bd322587.f323b8",
        "name": "Check DevStatus",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 650,
        "y": 520,
        "wires": [
            [
                "782468d3982b25e6"
            ]
        ]
    },
    {
        "id": "212ee84c1039161a",
        "type": "mqtt in",
        "z": "bd322587.f323b8",
        "name": "fromesp",
        "topic": "fromesp/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 360,
        "wires": [
            [
                "251d9920a49af749"
            ]
        ]
    },
    {
        "id": "491b6e9c81f6bbc6",
        "type": "http request",
        "z": "bd322587.f323b8",
        "d": true,
        "name": "Turn Denon On",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://creagers-whs:8081/api/PWON",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1120,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "29e763d0fa5d7671",
        "type": "function",
        "z": "bd322587.f323b8",
        "name": "Turn Denon on if sky is on",
        "func": "let gDebug = global.get(\"gDebug\")\nlet lastState = flow.get(\"skyLastState\")\nlet txt = \"Sky was:\" + lastState + \" now:\" + msg.payload.systemstate.state;\nif (gDebug) node.warn(\"this state is \" + msg.payload.systemstate.state  + \" lastState=\" + lastState);\nif (lastState != undefined) {\n    if ( (msg.payload.systemstate.state == \"active\")  && (lastState != \"active\") ) {\n\t\ttxt = txt + \" Switching Denon on\"\n\t\tstatusMsg = {fill:\"green\",shape:\"dot\",text: txt};\n    \tflow.set(\"skyLastState\",msg.payload.systemstate.state)\n\t\tnode.status(statusMsg);\n        return {topic:null, payload:\"PWON\"}\n    } else {\n        flow.set(\"skyLastState\",msg.payload.systemstate.state)\n\t\ttxt = txt + \" Nothing to do\"\n\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: txt};\n\t\tif (msg.payload.systemstate.state == \"active\") statusMsg = {fill:\"green\",shape:\"dot\",text: txt};\n\t}\n} else {\n    flow.set(\"skyLastState\",msg.payload.systemstate.state)\n\ttxt = txt + \"sky state not set ERROR\";\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: txt};\n}\nnode.status(statusMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 900,
        "wires": [
            [
                "491b6e9c81f6bbc6"
            ]
        ]
    },
    {
        "id": "910c949bf4121b3c",
        "type": "http request",
        "z": "bd322587.f323b8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "senderr": false,
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "bc27fe18dc7493cd"
            ]
        ]
    },
    {
        "id": "99b2930a7c1161fb",
        "type": "inject",
        "z": "bd322587.f323b8",
        "name": "Govee get devices",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "url",
                "v": "https://developer-api.govee.com/v1/devices",
                "vt": "str"
            },
            {
                "p": "headers",
                "v": "{\"Govee-API-Key\":\"9807bdfd-ba0b-4d24-a354-61f302989425\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "910c949bf4121b3c"
            ]
        ]
    },
    {
        "id": "80a8a8069566b16d",
        "type": "debug",
        "z": "bd322587.f323b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1080,
        "wires": []
    },
    {
        "id": "bc27fe18dc7493cd",
        "type": "json",
        "z": "bd322587.f323b8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 564.0000076293945,
        "y": 1079.0000667572021,
        "wires": [
            [
                "80a8a8069566b16d"
            ]
        ]
    },
    {
        "id": "a7fdcc9f586606d8",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Save On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Save_On",
        "payloadType": "date",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "7b698927cf2e1719"
            ]
        ]
    },
    {
        "id": "898f7b5b6250f8a4",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Save Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Save_Off",
        "payloadType": "date",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "7b698927cf2e1719"
            ]
        ]
    },
    {
        "id": "e085767858c8a7c1",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Full Def",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Definitions",
        "payload": "{\"saveToFile\":\"/devices/MessagesSave.json\",\"rotateOn\":1000,\"variableName\":\"MessageSaves\",\"scope\":\"flow\"}",
        "payloadType": "json",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "7b698927cf2e1719"
            ]
        ]
    },
    {
        "id": "7b698927cf2e1719",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "Generic Saver",
        "func": "//Generic Saver \nlet gDebug = global.get(\"gDebug\");\nfunction getData(name, scope = \"global\") {\n\treturn ((scope == \"global\") ? global.get(name) : flow.get(name));\n}\nfunction setData(name, value, scope = \"global\") {\n\tif (scope == \"global\") {\n\t\tglobal.set(name, value);\n\t} else {\n\t\tflow.set(name, value);\n\t}\n}\nconst fs = global.get(\"fs\");\nconst path = global.get(\"path\");\nlet statusMsg = null;\nlet Message_Saves_Def = flow.get(\"Message_Saves_Def\");\nif (msg.topic == \"Message_Saves_Definitions\") {\n\tif (!Message_Saves_Def) Message_Saves_Def = {};\n\tnode.warn([\"[\" + node.name + \"] Configuring Definitions\", msg.payload])\n\tObject.keys(msg.payload).forEach((key) => {\n\t\tif (Message_Saves_Def[key] != msg.payload[key]) node.warn(\"[\" + node.name + \"]  Setting \" + key + \" from \" + Message_Saves_Def[key] + \" to \" + msg.payload[key]);\n\t\tMessage_Saves_Def[key] = msg.payload[key];\n\t});\n\tflow.set(\"Message_Saves_Def\", Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Save_On\") {\n\tnode.warn([\"[\" + node.name + \"] Turning Saves On to \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\tMessage_Saves_Def.doSave = true;\n\tflow.set(\"Message_Saves_Def\", Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Save_Off\") {\n\tnode.warn([\"[\" + node.name + \"] Turning Saves Off for \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\n\tMessage_Saves_Def.doSave = false;\n\tflow.set(\"Message_Saves_Def\", Message_Saves_Def);\n\treturn [null, null];\n}\n\nif (!Message_Saves_Def) {\n\tnode.error(\"[\" + node.name + \"] Message_Saves_Def not set up\");\n\treturn [msg, null];\n}\nlet data = getData(Message_Saves_Def.variableName, Message_Saves_Def.scope);\nif (!data) data = [];\nif (Message_Saves_Def.doSave) {\n\tlet msg2 = null;\n\tlet fileName = null;\n\tlet rotateOn = 0;\n\tif (Message_Saves_Def.saveToFile) fileName = Message_Saves_Def.saveToFile;\n\tif (Message_Saves_Def.rotateOn) rotateOn = Message_Saves_Def.rotateOn;\n\tmsg.saveTime = new Date();\n\tdata.push(msg);\n\tsetData(Message_Saves_Def.variableName, data, Message_Saves_Def.scope);\n\tstatusMsg = {\n\t\tfill: \"green\", shape: \"ring\", text: \"Saving msgs to \" + Message_Saves_Def.scope +\n\t\t\t\".\" + Message_Saves_Def.variableName + \" \" + data.length + \" currently saved\"\n\t};\n\tif ((rotateOn != 0) && (data.length >= rotateOn)) {\n\t\tlet oldMessages = getData(\"old_\" + Message_Saves_Def.variableName, Message_Saves_Def.scope);\n\t\tif ((oldMessages) && (oldMessages.length > 0)) {\n\t\t\tlet cnt = 1;\n\t\t\tlet varName = \"old_\" + Message_Saves_Def.variableName + \"_\" + cnt;\n\t\t\twhile (getData(varName, Message_Saves_Def.scope)) {\n\t\t\t\tcnt++;\n\t\t\t\tvarName = \"old_\" + Message_Saves_Def.variableName + \"_\" + cnt;\n\t\t\t}\n\t\t\tnode.warn(\"[\" + node.name + \"] Copying old_\" + Message_Saves_Def.variableName + \" to \" + varName);\n\t\t\tsetData(varName, oldMessages, Message_Saves_Def.scope);\n\t\t}\n\t\tnode.warn(\"[\" + node.name + \"] Saving \" + Message_Saves_Def.variableName + \" to \" + \"old_\" + Message_Saves_Def.variableName);\n\t\tsetData(\"old_\" + Message_Saves_Def.variableName, data, Message_Saves_Def.scope);\n\t\tsetData(Message_Saves_Def.variableName, [], Message_Saves_Def.scope);\n\t\tnode.warn(\"[\" + node.name + \"] Cleared \" + Message_Saves_Def.variableName);\n\t\tif (fileName) {\n\t\t\tlet baseName = path.join(path.dirname(fileName), path.basename(fileName, path.extname(fileName)))\n\t\t\tnode.warn([\"[\" + node.name + \"] \" + \"[Info] \" + \"Filename is \" + fileName]);\n\t\t\tlet cnt = 0;\n\t\t\tlet rotator = \"_\" + (++cnt) + path.extname(fileName);\n\t\t\twhile (fs.existsSync(baseName + rotator)) {\n\t\t\t\trotator = \"_\" + (++cnt) + path.extname(fileName);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (fs.existsSync(fileName)) {\n\t\t\t\t\tnode.warn([\"[\" + node.name + \"] \" + \"[Info] \",\n\t\t\t\t\t\"Output File old file renamed from  \" + fileName + \"to \" + baseName + rotator]);\n\t\t\t\t\tfs.renameSync(fileName, baseName + rotator);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tnode.warn([err, \"[\" + node.name + \"] \" + \"[Info] \", \"Output File does not exist \" + fileName]);\n\t\t\t}\n\t\t\tmsg2 = { topic: \"\", filename: fileName, payload: oldMessages };\n\t\t}\n\t}\n\tnode.status(statusMsg);\n\treturn [msg, msg2]\n} else {\n\tstatusMsg = {\n\t\tfill: \"red\", shape: \"dot\", text: \"Saving Off to \" + Message_Saves_Def.scope +\n\t\t\t\".\" + Message_Saves_Def.variableName + \" \" + data.length + \" currently saved\"\n\t};\n}\nnode.status(statusMsg);\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [],
            [
                "cd272233bcf684d9"
            ]
        ]
    },
    {
        "id": "cd272233bcf684d9",
        "type": "json",
        "z": "398c27d8cfa27d04",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "2e34963f97d2ea24"
            ]
        ]
    },
    {
        "id": "2e34963f97d2ea24",
        "type": "file",
        "z": "398c27d8cfa27d04",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 760,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "eb68e5653ae66064",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "Analysis of Saves",
        "func": "//Analysis of Savesaa\n//let baseName = \"savedGlowMessages\"\nlet baseName = \"MessageSaves\"\nmsg.payload = [];\nmsg.options = [];\nlet cnt = 0\nlet varName = baseName + \"\";\nlet save = flow.get(varName);\nsave = flow.get(varName);\nfunction timeDiff(hh, mm) {\n\tlet nowDate = new Date();\n\tnowDate.setHours(0, 0, 0);\n\tlet toDate = new Date(nowDate);\n\ttoDate.setHours(hh, mm);\n\t// @ts-ignore\n\treturn (new Date(toDate - nowDate));\n}\nwhile (save) {\n\tif (save[0].saveTime) {\n\t\tmsg.payload.push({\n\t\t\tname: varName, startDate: save[0].saveTime.toDateString(), startTime: save[0].saveTime.toTimeString(),\n\t\t\tendDate: save[save.length - 1].saveTime.toDateString(), endTime: save[save.length - 1].saveTime.toTimeString(), length: save.length\n\t\t});\n\t\tmsg.options.push({\n\t\t\t[varName]: {\n\t\t\t\tstartDate: save[0].saveTime.toDateString(),\n\t\t\t\tstartTime: timeDiff(save[0].saveTime.getHours(), save[0].saveTime.getMinutes()),\n\t\t\t\tendDate: save[save.length - 1].saveTime.toDateString(),\n\t\t\t\tendTime: timeDiff(save[save.length - 1].saveTime.getHours(), save[save.length - 1].saveTime.getMinutes()),\n\t\t\t}\n\t\t});\n\t} else {\n\t\tmsg.payload.push({ name: varName, length: save.length });\n\t\tmsg.options.push({ [varName]: { name: varName } });\n\t}\n\tif (varName == baseName) {\n\t\tvarName = \"old_\" + baseName;\n\t} else {\n\t\tcnt++;\n\t\tvarName = \"old_\" + baseName + \"_\" + cnt;\n\t}\n\tsave = flow.get(varName);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "74ae30bf265356f1",
                "f93a478eb5a462f1",
                "9040527391bd9f57"
            ]
        ]
    },
    {
        "id": "4f308d89c54819bc",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "eb68e5653ae66064"
            ]
        ]
    },
    {
        "id": "74ae30bf265356f1",
        "type": "debug",
        "z": "398c27d8cfa27d04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "f93a478eb5a462f1",
        "type": "ui_table",
        "z": "398c27d8cfa27d04",
        "group": "81dda4cbde86f8e9",
        "name": "",
        "order": 1,
        "width": "20",
        "height": "20",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 690,
        "y": 340,
        "wires": [
            [
                "613f997ce7141570"
            ]
        ]
    },
    {
        "id": "804c81709213fc49",
        "type": "ui_date_picker",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "From::",
        "group": "d707558aa23b3dc5",
        "order": 3,
        "width": "4",
        "height": "2",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 730,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "84436372e8810945",
        "type": "ui_numeric",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "# of msgs",
        "tooltip": "",
        "group": "d707558aa23b3dc5",
        "order": 8,
        "width": "4",
        "height": "1",
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "999",
        "step": 1,
        "x": 1020,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "9040527391bd9f57",
        "type": "ui_dropdown",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "File to Replay",
        "tooltip": "",
        "place": "Select option",
        "group": "5509a9f605a80857",
        "order": 1,
        "width": "12",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "SelectFile",
        "topicType": "str",
        "x": 600,
        "y": 380,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "1e547c657a9024ee",
        "type": "ui_text_input",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "d707558aa23b3dc5",
        "order": 4,
        "width": "4",
        "height": "2",
        "passthru": true,
        "mode": "time",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 880,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3284943287b32af1",
        "type": "ui_date_picker",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "  To:",
        "group": "d707558aa23b3dc5",
        "order": 6,
        "width": "4",
        "height": "2",
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "x": 730,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2aa17eace1d18098",
        "type": "ui_text_input",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "d707558aa23b3dc5",
        "order": 7,
        "width": "4",
        "height": "2",
        "passthru": true,
        "mode": "time",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 880,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "613f997ce7141570",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "",
        "func": "let startDate = new Date(msg.payload.startDate + \" \" + msg.payload.startTime);\nlet endDate = new Date(msg.payload.endDate + \" \" + msg.payload.endTime);\nlet startHours = startDate.getHours();\nlet startMins = startDate.getMinutes();\nlet endHours = endDate.getHours();\nlet endMins = endDate.getMinutes();\n//node.warn(\"startDate = \" + startDate + \" type =\" + typeof(startDate));\n//node.warn(\"endDate = \" + endDate + \" type =\" + typeof(endDate));\n\nlet outDate = new Date(startDate);\noutDate.setHours(0);\noutDate.setMinutes(0);\nlet startTime = new Date(startDate - outDate);\n\noutDate = new Date(endDate);\noutDate.setHours(0);\noutDate.setMinutes(0);\nlet endTime = new Date(endDate - outDate);\nmsg.payload = endTime;\n\nlet newMsg = {topic:\"init\", payload: {startDate:startDate, endDate:endDate, startTime: startTime,\n\t\t\t\t\t\tendTime: endTime}};\n\nreturn [msg,newMsg]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "2aa17eace1d18098"
            ],
            [
                "8dc650af3606a507"
            ]
        ]
    },
    {
        "id": "8dc650af3606a507",
        "type": "ui_form",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "",
        "group": "d707558aa23b3dc5",
        "order": 6,
        "width": "8",
        "height": "4",
        "options": [
            {
                "label": "From:",
                "value": "startDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "at",
                "value": "startTime",
                "type": "time",
                "required": true,
                "rows": null
            },
            {
                "label": "  To:",
                "value": "endDate",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "at",
                "value": "endTime",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "startDate": "",
            "startTime": "",
            "endDate": "",
            "endTime": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "x": 1030,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f589a491b952ec86",
        "type": "ui_text_input",
        "z": "398c27d8cfa27d04",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "d707558aa23b3dc5",
        "order": 4,
        "width": "4",
        "height": "2",
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "topicType": "msg",
        "x": 1030,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "d9e6af61bfac93de",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "send 10 messages",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "replay",
        "payload": "{\"time\":\"2021-10-25T11:23:52.000Z\",\"meter\":161.338,\"mins\":62}",
        "payloadType": "json",
        "x": 230,
        "y": 720,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "80891b4f7c3def77",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reset",
        "payload": "{\"time\":\"2021-10-25T11:23:52.000Z\",\"meter\":161.338,\"mins\":62}",
        "payloadType": "json",
        "x": 170,
        "y": 840,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "2420088a6175c760",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Send one",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sendone",
        "payload": "{\"time\":\"2021-10-25T11:23:52.000Z\",\"meter\":161.338,\"mins\":62}",
        "payloadType": "json",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "18cb03c95bfc9bf5",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Send to 54",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "lastInd",
                "v": "49",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sendnumber",
        "payload": "{\"time\":\"2021-10-25T11:23:52.000Z\",\"meter\":161.338,\"mins\":62}",
        "payloadType": "json",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "7ff6bf241febe32b",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "send remainder",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sendall",
        "payload": "{\"time\":\"2021-10-25T11:23:52.000Z\",\"meter\":161.338,\"mins\":62}",
        "payloadType": "json",
        "x": 210,
        "y": 780,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "b4f67bc94e4d7c2b",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "Replay Messages",
        "func": "//Replay Messages\nif (msg.topic == \"SelectFile\") {\n\tnode.warn([\"[\" + node.name + \"][Info]\\t \" + \" setting FileToReplay to \" + msg.payload.name, msg]);\n\t\n\tflow.set(\"FileToReplay\",msg.payload.name);\n\tcontext.set(\"lastIndex\",0);\n\treturn null;\n}\nif (msg.topic == \"SelectMins\") {\n\tnode.warn([\"[\" + node.name + \"][Info]\\t \" + \" setting Mins to \" + parseInt(msg.payload), msg]);\n\tflow.set(\"MinsToReplay\",parseInt(msg.payload));\n\treturn null;\n}\n\t\nconst FileToReplay = flow.get(\"FileToReplay\");\nconst MinsToReplay = flow.get(\"MinsToReplay\");\nif (!FileToReplay) {\n\tnode.error([\"[\" + node.name + \"][Error]\\t \" + \"FileToReplay not set\"]);\n\treturn null;\n}\nconst savedMessages  = flow.get(FileToReplay);\nif (!savedMessages) {\n\tnode.error([\"[\" + node.name + \"][Error]\\t \" + \"Old messages variable \" + FileToReplay + \" not set\"]);\n\treturn null;\n}\n\nlet lastIndex = context.get(\"lastIndex\")\nlet numToSend = context.get(\"numToSend\");\nlet statusMsg = {};\nlet ind = lastIndex\nlet lastInd = lastIndex+numToSend\nif (msg.topic==\"reset\") {\n    lastIndex =0\n\tcontext.set(\"lastIndex\",0);\n    flow.set(\"TestReadings\",null);\n\tstatusMsg = {fill:\"green\",shape:\"ring\",text: FileToReplay + \" avail:\" +  savedMessages.length +\n\t\t\t\t\t\t\t\t\" last:\" + lastIndex + \" toSend:\" + numToSend}\n\tnode.status(statusMsg);\n\treturn null;\n} else if (msg.topic==\"sendone\") {\n\tnumToSend = 1;\n} else if (msg.topic==\"sendset\") {\n\tif (!MinsToReplay) {\n\t\tnode.error([\"[\" + node.name + \"][Error]\\t \" + \"MinsToReplay not set\"]);\n\t\treturn null;\n\t}\n\twhile ( (ind<savedMessages.length) && (savedMessages[ind].payload.gmtime - savedMessages[lastIndex].payload.gmtime) < (MinsToReplay * 60 * 1000) ) {\n\t\tind++;\n\t}\n\tnumToSend = Math.max(ind - lastIndex,0);\n} else if (msg.topic==\"sendnumber\") {\n\tnumToSend = Math.max(msg.lastInd - lastIndex,0);\n} else if (msg.topic==\"sendall\") {\n\tnumToSend = savedMessages.length - lastIndex\n}\nstatusMsg = {fill:\"green\",shape:\"ring\",text: FileToReplay + \" avail:\" +  savedMessages.length +\n\t\t\t\t\t\t\t\t\" last:\" + lastIndex + \" toSend:\" + numToSend}\nnode.status(statusMsg);\nlet msgs =[];\nnode.warn(\"Replaying messages from \" + lastIndex + \" to \" + (lastIndex+numToSend))\nind = lastIndex\nlastInd = lastIndex+numToSend\nif (msg.topic==\"sendone\") lastInd = lastIndex + 1;\nfor (ind=lastIndex; ind < lastInd; ind++) {\n\tmsgs.push(savedMessages[ind]);\n}\ncontext.set(\"lastIndex\",ind);\nreturn [msgs];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"lastIndex\",0)\ncontext.set(\"numToSend\",10)",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 720,
        "wires": [
            [
                "2385783bf040cf0c",
                "82409a340484f79a"
            ]
        ]
    },
    {
        "id": "2385783bf040cf0c",
        "type": "link out",
        "z": "398c27d8cfa27d04",
        "name": "",
        "mode": "link",
        "links": [
            "fdf4ab83e29c86f2"
        ],
        "x": 855,
        "y": 720,
        "wires": []
    },
    {
        "id": "5c882439afa06f58",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "Init Readings",
        "func": "\nconst ReadingsVariable = \"TestReadings\";\nlet GlowReadings = flow.get(ReadingsVariable) \n//const ReadingsVariable = \"GlowReadings\";\nif (GlowReadings) GlowReadings = null;\nflow.set(ReadingsVariable,GlowReadings);\nnode.warn([\"[\" + node.name + \"][Info]\\t \" + \" Readings inited \" + ReadingsVariable]);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "6fc4cc6df8920a75",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Clear TestReadings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 450,
        "y": 920,
        "wires": [
            [
                "5c882439afa06f58"
            ]
        ]
    },
    {
        "id": "2e422044f1751575",
        "type": "ui_text_input",
        "z": "398c27d8cfa27d04",
        "name": "Select Time",
        "label": "Mins",
        "tooltip": "",
        "group": "5509a9f605a80857",
        "order": 2,
        "width": "4",
        "height": "2",
        "passthru": true,
        "mode": "number",
        "delay": "0",
        "topic": "SelectMins",
        "topicType": "str",
        "x": 570,
        "y": 600,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "35c6c00c8e44c7c7",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "Send set Mins",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sendset",
        "payload": "{\"time\":\"2021-10-25T11:23:52.000Z\",\"meter\":161.338,\"mins\":62}",
        "payloadType": "json",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "b4f67bc94e4d7c2b"
            ]
        ]
    },
    {
        "id": "ccfce0a111616476",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "Replay Files",
        "func": "//Replay Files\nfunction timeDiff(hh,mm) {\n\tlet nowDate = new Date();\n\tnowDate.setHours(0,0,0);\n\tlet toDate = new Date(nowDate);\n\ttoDate.setHours(hh,mm);\n\treturn (new Date(toDate - nowDate) );\n}\nlet FilesToReplay = flow.get(\"FilesToReplay\");\nif (!FilesToReplay) FilesToReplay = {index:-1 ,files: []};\nconst baseName = \"savedGlowMessages\";\nif (FilesToReplay.index == 0) {\n\tstatusMsg = {fill:\"blue\",shape:\"ring\",text: \"Next File:\" + FilesToReplay.files[FilesToReplay.index].name}\n} else if (FilesToReplay.index == -1) {\t\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: \"Files not loaded!\"}\n} else if (FilesToReplay.index < FilesToReplay.files.length) {\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"Last File:\" + FilesToReplay.files[(FilesToReplay.index - 1)].name + \" Next File:\" + FilesToReplay.files[FilesToReplay.index].name}\n} else {\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: \"Last File:\" + FilesToReplay.files[FilesToReplay.index - 1].name}\n}\nnode.status(statusMsg);\nif (msg.topic == \"skipTo\") {\n\tlet gotoFile = parseInt(msg.payload);\n\tnode.warn(\"About to skip to \" + gotoFile + \" max is\" + FilesToReplay.files.length);\n\tlet oldInd = FilesToReplay.index - 1;\n\tif ( (gotoFile>0) && (gotoFile<FilesToReplay.files.length) ) {\n\t\tFilesToReplay.index = gotoFile;\n\t\tnode.warn(\"skipTo  executed to index \" + gotoFile + \" next file will be \" + FilesToReplay.files[FilesToReplay.index].name);\n\t\tflow.set(\"FilesToReplay\",FilesToReplay);\n\t\tif (oldInd < 0) {\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"dot\",text:\" Next File:\" + FilesToReplay.files[FilesToReplay.index].name}\n\t\t} else {\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"dot\",text: \"Last File:\" + FilesToReplay.files[oldInd].name +\n\t\t\t\t\t\" Next File:\" + FilesToReplay.files[FilesToReplay.index].name}\n\t\t}\n\t\tnode.status(statusMsg);\n\t\treturn null;\n\t}\n}\nif (msg.topic == \"LoadFiles\") {\n\tlet cnt = 1;\n\tlet ind = -1;\n\tFilesToReplay.files = [];\n\tlet varName = \"old_\" + baseName  + \"_\" + cnt;\n\tlet save = flow.get(varName);\n\twhile (save) {\n\t\tFilesToReplay.files.push({name:varName, startDate: save[0].payload.gmtime.toDateString(),\n\t\t\tstartTime: save[0].payload.gmtime.toTimeString(),\n\t\t\tendDate: save[save.length-1].payload.gmtime.toDateString(),\n\t\t\tendTime: save[save.length-1].payload.gmtime.toTimeString(), length:save.length});\n\t\tind++;\n\t\tcnt++;\n\t\tvarName = \"old_\" + baseName  + \"_\" + cnt\n\t\tsave = flow.get(varName);\n\t}\n\tvarName = \"old_\" + baseName  + \"_\" + cnt;\n\tsave = flow.get(varName);\n\tif (save) {\n\t\tFilesToReplay.files.push({name:varName, startDate: save[0].payload.gmtime.toDateString(),\n\t\t\tstartTime: save[0].payload.gmtime.toTimeString(),\n\t\t\tendDate: save[save.length-1].payload.gmtime.toDateString(),\n\t\t\tendTime: save[save.length-1].payload.gmtime.toTimeString(), length:save.length});\n\n\t}\n\tvarName = baseName + \"\";\n\tsave = flow.get(varName);\n\tif (save) {\n\t\tFilesToReplay.files.push({name:varName, startDate: save[0].payload.gmtime.toDateString(),\n\t\t\tstartTime: save[0].payload.gmtime.toTimeString(),\n\t\t\tendDate: save[save.length-1].payload.gmtime.toDateString(),\n\t\t\tendTime: save[save.length-1].payload.gmtime.toTimeString(), length:save.length});\n\t}\n\tFilesToReplay.index = 0;\n\tflow.set(\"FilesToReplay\",FilesToReplay);\n\tstatusMsg = {fill:\"blue\",shape:\"ring\",text: \"Next File:\" + FilesToReplay.files[FilesToReplay.index].name}\n\tnode.status(statusMsg);\n\treturn null;\n}\n\nif ( ( (msg.topic == \"nextFile\") || (msg.topic == \"skipFile\") )&& (FilesToReplay.index < FilesToReplay.files.length) ) {\n\tconst fileToProcess = flow.get(FilesToReplay.files[FilesToReplay.index].name);\n\tif (!fileToProcess) {\n\t\tnode.error(\"WTF\");\n\t\treturn null;\n\t}\n\t//const msgs = fileToProcess.map( (mess) => { return {topic:\"Replay_\" + FilesToReplay.files[FilesToReplay.index].name, payload: mess} } );\n\tFilesToReplay.index = FilesToReplay.index + 1;\n\tflow.set(\"FilesToReplay\",FilesToReplay);\n\tif (FilesToReplay.index < FilesToReplay.files.length) {\n\t\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"Last File:\" + FilesToReplay.files[(FilesToReplay.index - 1)].name + \" Next File:\" + FilesToReplay.files[FilesToReplay.index].name}\n\t} else {\n\t\tstatusMsg = {fill:\"red\",shape:\"ring\",text: \"Last File:\" + FilesToReplay.files[FilesToReplay.index - 1].name}\n\t}\n\tnode.status(statusMsg);\n\tif (msg.topic == \"skipFile\") {\n\t\tnode.warn(\"File \" + FilesToReplay.files[(FilesToReplay.index - 1)].name + \" skipped - Next File:\" + FilesToReplay.files[FilesToReplay.index].name)\n\t\treturn null;\n\t}\n\treturn [fileToProcess];\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "3acb35a3679b3985"
            ]
        ]
    },
    {
        "id": "c4f4438c3f2251e6",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "LoadFiles",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "LoadFiles",
        "payloadType": "date",
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "ccfce0a111616476"
            ]
        ]
    },
    {
        "id": "07da288dd50f4bfc",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "nextFile",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "nextFile",
        "payloadType": "date",
        "x": 500,
        "y": 1120,
        "wires": [
            [
                "ccfce0a111616476"
            ]
        ]
    },
    {
        "id": "3acb35a3679b3985",
        "type": "debug",
        "z": "398c27d8cfa27d04",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ca4adf9bee07c443",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 1000,
        "wires": [
            [
                "ccfce0a111616476"
            ]
        ]
    },
    {
        "id": "9bfcb454c2a31f83",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "skipFile",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "skipFile",
        "payloadType": "date",
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "ccfce0a111616476"
            ]
        ]
    },
    {
        "id": "c9ffb51c08a52788",
        "type": "inject",
        "z": "398c27d8cfa27d04",
        "name": "skipTo 46",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "skipTo",
        "payload": "46",
        "payloadType": "num",
        "x": 310,
        "y": 1100,
        "wires": [
            [
                "ccfce0a111616476"
            ]
        ]
    },
    {
        "id": "fe6245113dbd7b5b",
        "type": "link in",
        "z": "398c27d8cfa27d04",
        "name": "in to msg saves",
        "links": [
            "e9fe4c3b15776ece"
        ],
        "x": 185,
        "y": 220,
        "wires": [
            [
                "7b698927cf2e1719"
            ]
        ]
    },
    {
        "id": "8fee1ed55824f884",
        "type": "link in",
        "z": "398c27d8cfa27d04",
        "name": "Save Messages",
        "links": [
            "164bd974595663f0"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "82409a340484f79a",
        "type": "debug",
        "z": "398c27d8cfa27d04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 680,
        "wires": []
    },
    {
        "id": "b65a859d32072d0a",
        "type": "function",
        "z": "398c27d8cfa27d04",
        "name": "Test Derive",
        "func": "//Test Derive\nlet gDebug = global.get(\"gDebug\");\n//gDebug = true;\nconst ReadingsVariable = \"TestReadings\";\n//const ReadingsVariable = \"GlowReadings\";\nlet GlowReadings = flow.get(ReadingsVariable);\nconst gasConversion = (global.get(\"calorificValue\") * 1.02264 ) / 3.6;\n\nif (!GlowReadings) {\n\tGlowReadings = {\n\t\t\t\tminutes: { max:70, entries: [{time:rndTime(msg.payload.gmtime,60000),cnt: 0}] },\n\t\t\t\thours: { max:30, entries: [{time:rndTime(msg.payload.gmtime,60000*60),cnt: 0, gasMeter: 0, elecMeter:0 }] },\n\t\t\t\tdays: { max:8,  entries: [{time:rndTime(msg.payload.gmtime,60000 * 60 * 24),cnt: 0, gasMeter: 0, elecMeter:0 }] }\n\t\t\t\t\t}\n}\nfunction rndTime(time, ms) {\n\treturn new Date(Math.floor(time/ms) * ms);\n}\nfunction addEntry(newObj, type = \"minutes\") {\n\tlet ms = 60000;\n\tif (type == \"minutes\") ms = 60000;\n\tif (type == \"hours\") ms = 60000 * 60;\n\tif (type == \"days\") ms = 60000 * 60 * 24;\n\tnewObj.time = rndTime(newObj.gmtime,ms);\n\tif (gDebug) node.warn([type + \" On entry to addEntry \",GlowReadings[type],newObj])\n\tlet unitsSinceStart = Math.floor( (newObj.time - GlowReadings[type].entries[0].time)/ms );\n\tif ( unitsSinceStart < 0 ) {\n\t\tnode.error([\"[\" + node.name + \"][Error]\\t \" + \" unitsSinceStart negative \" + unitsSinceStart + \" No further processsing\", GlowReadings[type].entries[0],newObj]);\n\t\treturn null;\n\t}\n\tif (gDebug) node.warn([type + \" Starting to add entry units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\twhile ((unitsSinceStart) && unitsSinceStart > GlowReadings[type].max) {\n\t\tGlowReadings[type].entries.shift();\n\t\tif (!GlowReadings[type].entries[0]) {\n\t\t\tnode.warn([type + \" big gap in messages. Setting entry 0 to this object\", newObj, GlowReadings[type].entries[0],msg]);\n\t\t\tGlowReadings[type].entries[0] = newObj;\n\t\t}\n\t\tif (GlowReadings[type].entries[0].time) {\n\t\t\tunitsSinceStart = (GlowReadings[type].entries[0].time) ?\n\t\t\t\t\t\t\tMath.floor((newObj.time - GlowReadings[type].entries[0].time)/ms) :\n\t\t\t\t\t\t\tGlowReadings[type].max + 1;\n\t\t} else {\n\t\t\tnode.error([type + \" time is not set on entry 0 units=\"+unitsSinceStart ,GlowReadings[type].entries[0],GlowReadings[type],newObj])\n\t\t\tunitsSinceStart = (GlowReadings[type].entries[0].time) ?\n\t\t\t\t\t\t\tMath.floor((newObj.time - GlowReadings[type].entries[0].time)/ms) :\n\t\t\t\t\t\t\t0;\n\t\t}\n\t}\n\tif (gDebug) node.warn([type + \" Adding entry units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\tif ( GlowReadings[type].entries[unitsSinceStart] ) {\n\t\tlet cnt = GlowReadings[type].entries[unitsSinceStart].cnt;\n\t\tif (cnt==0) {\n\t\t\tGlowReadings[type].entries[unitsSinceStart].gasMeter = newObj.gasMeter;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].elecMeter = newObj.elecMeter;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].gmtime = newObj.gmtime;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].time = newObj.time;\n\t\t} else {\n\t\t\tGlowReadings[type].entries[unitsSinceStart].gasMeter = Math.round( (((GlowReadings[type].entries[unitsSinceStart].gasMeter * cnt) + newObj.gasMeter) / (cnt + 1)) * 10000 )/10000;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].elecMeter = Math.round( (((GlowReadings[type].entries[unitsSinceStart].elecMeter * cnt) + newObj.elecMeter) / (cnt + 1)) * 10000 )/10000;\n\t\t}\n\t\tGlowReadings[type].entries[unitsSinceStart].cnt = GlowReadings[type].entries[unitsSinceStart].cnt + 1;\t\n\t} else {\n\t\tGlowReadings[type].entries[unitsSinceStart] = newObj;\n\t}\n\tif (unitsSinceStart > 0) {\n\t\tcnt = unitsSinceStart-1;\n\t\tif (!GlowReadings[type].entries[cnt]) node.warn([type + \" prev entry blank roll back units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\t\twhile (!GlowReadings[type].entries[cnt] && cnt>=0) {\n\t\t\tcnt--;\n\t\t}\n\t\tif (gDebug) if (cnt!= unitsSinceStart-1) node.warn([type + \" Rolling forward after cnt=\" + cnt, GlowReadings[type].entries[cnt],GlowReadings[type],newObj])\n\t\tfor (let ind = cnt+1; ind < unitsSinceStart;ind++){\n\t\t\tif (!GlowReadings[type].entries[ind]) GlowReadings[type].entries[ind] = {};\n\t\t\tGlowReadings[type].entries[ind].gasMeter = GlowReadings[type].entries[cnt].gasMeter;\n\t\t\tGlowReadings[type].entries[ind].elecMeter = GlowReadings[type].entries[cnt].elecMeter;\n\t\t\tGlowReadings[type].entries[ind].cnt = 0;\n\t\t\tlet wkDate = new Date(GlowReadings[type].entries[cnt].time);\n\t\t\twkDate.setTime(wkDate.getTime() + ((ind-cnt) * ms));\n\t\t\tGlowReadings[type].entries[ind].time = wkDate;\n\t\t\tGlowReadings[type].entries[ind].gmtime = wkDate\n\t\t\t//GlowReadings[type].entries[ind].time = new Date().setTime(wkDate.getTime() + ((ind-cnt) * 60 * 1000))\n\t\t\t//GlowReadings[type].entries[ind].gmtime = wkDate.setTime(wkDate.getTime() + ((ind-cnt) * 60 * 1000))\n\t\t\t//GlowReadings[type].entries[ind].gmtime = new Date().setTime(wkDate.getTime() + ((ind-cnt) * 60 * 1000))\n\t\t}\n\t\tif (gDebug) node.warn([type + \" About to set new obj units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\t\tif ( ( GlowReadings[type].entries[unitsSinceStart].gasMeter - GlowReadings[type].entries[unitsSinceStart-1].gasMeter < 0 ) || \n\t\t\t( GlowReadings[type].entries[unitsSinceStart].elecMeter - GlowReadings[type].entries[unitsSinceStart-1].elecMeter < 0 )) {\n\t\t\tnode.error([\"difference is less than 0 this ind=\" + unitsSinceStart,GlowReadings[type].entries[unitsSinceStart],GlowReadings[type].entries[unitsSinceStart-1]]);\n\t\t}\n\t}\n\tif (gDebug) node.warn([type + \" Added entry units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\treturn unitsSinceStart;\n}\nlet  newEntry = {gmtime:msg.payload.gmtime , gasMeter: msg.payload.gas.meter, elecMeter: msg.payload.elec.meter, cnt: 1}\nif (gDebug) node.warn([\"minutes\" + \" Calling addEntry \",GlowReadings[\"minutes\"],newEntry])\nlet ind = addEntry(newEntry,\"minutes\");\nif (ind == null) {\n\treturn null, null\n}\nif (msg.payload.gmtime.getMinutes() == 0) addEntry(newEntry,\"hours\");\nif ( (msg.payload.gmtime.getMinutes() == 0) && (msg.payload.gmtime.getHours() == 0) ) addEntry(newEntry,\"days\");\nlet glowCsvMsg = null;\nlet glow30Msg = null;\nlet endEntry = null;\nlet startEntry = null;\nif ( ( (msg.payload.gmtime.getMinutes() == 1) || (msg.payload.gmtime.getMinutes() == 31) )  && (ind>30) ){\n\tendEntry = GlowReadings.minutes.entries[ind-1];\n\tstartEntry = GlowReadings.minutes.entries[ind-31];\n\tif (gDebug) node.warn([\" 30 min msg \" + ind + \" time=\" + msg.payload.gmtime.toLocaleTimeString(),endEntry,startEntry]);\n\tif (startEntry) {\n\t\tif (!GlowReadings.minutes.entries[ind-1].done) {\n\t\t\tGlowReadings.minutes.entries[ind-1].done = true;\n\t\t\tglowCsvMsg = {topic:\"GasHistory\",\n\t\t\t\t\t\tfilename: \"/devices/gas30s.csv\",\n\t\t\t\t\t\tpayload:{type: \"update\", \n\t\t\t\t\t\t\tlastGasMeter: startEntry.gasMeter,\n\t\t\t\t\t\t\tlastElecMeter: startEntry.elecMeter,\n\t\t\t\t\t\t\tlastDate: startEntry.gmtime.toLocaleDateString(),\n\t\t\t\t\t\t\tlastTime: startEntry.gmtime.toLocaleTimeString(),\n\t\t\t\t\t\t\tgasMeter: endEntry.gasMeter,\n\t\t\t\t\t\t\telecMeter: endEntry.elecMeter,\n\t\t\t\t\t\t\tdate: endEntry.gmtime.toLocaleDateString(),\n\t\t\t\t\t\t\ttime: endEntry.gmtime.toLocaleTimeString()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t}\n\t}\n}\n//flow.set(\"GlowReadings\",GlowReadings)\nflow.set(ReadingsVariable,GlowReadings)\nendEntry = GlowReadings.minutes.entries[ind];\nstartEntry = (ind>30) ? GlowReadings.minutes.entries[ind-30] : GlowReadings.minutes.entries[0];\nif ( (endEntry.gasMeter - startEntry.gasMeter <0 ) || (endEntry.elecMeter - startEntry.elecMeter <0 )) {\n\tnode.error([\" glow30Msg difference is less than 0 this ind=\" + ind,endEntry,startEntry]);\n}\nglow30Msg = {topic:\"GasInLast30\",\n\t\t\tpayload:{type: \"update\", \n\t\t\t\tlastGasMeter: Math.round( startEntry.gasMeter * gasConversion * 100 )/100,\n\t\t\t\tlastElecMeter: Math.round( startEntry.elecMeter * 100 )/100,\n\t\t\t\tlastDate: startEntry.gmtime.toLocaleDateString(),\n\t\t\t\tlastTime: startEntry.gmtime.toLocaleTimeString(),\n\t\t\t\tgasMeter: Math.round( endEntry.gasMeter  * gasConversion * 100 )/100,\n\t\t\t\telecMeter: Math.round( endEntry.elecMeter * 100 )/100,\n\t\t\t\tdate: endEntry.gmtime.toLocaleDateString(),\n\t\t\t\ttime: endEntry.gmtime.toLocaleTimeString(),\n\t\t\t\tgasDiff: Math.round( (endEntry.gasMeter - startEntry.gasMeter) * gasConversion * 1000 )/1000,\n\t\t\t\telecDiff: Math.round( (endEntry.elecMeter - startEntry.elecMeter) * 1000 )/1000,\n\t\t\t\tminsDiff: Math.round( (endEntry.gmtime - startEntry.gmtime)/60000),\n\t\t\t\tleng: GlowReadings.minutes.entries.length\n\t\t\t}\n\t\t}\nreturn [glow30Msg, glowCsvMsg];\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "b36a9495fcaaf6f5",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Init_esp_services",
        "func": "//Init_esp_services\nlet espServices = global.get(\"espServices\");\nif (espServices) {\n\tnode.warn( [ \"[\" + node.name + \"][info] espServices exists\", espServices]);\n\treturn null\n}\n\n\nespServices = {\t\"BTRelay\": true,\n\t\t\t\t\"MovmentSensor\": true,\n\t\t\t\t\"TempSensor\": true,\n\t\t\t\t\"ESPHome\":\ttrue\n\t\t\t\t}\nglobal.set(\"espServices\",espServices);\nnode.warn( [ \"[\" + node.name + \"][info] espServices created \", espServices]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8ad1a2baf2d0cdaf",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "init esp services",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 740,
        "y": 40,
        "wires": [
            [
                "b36a9495fcaaf6f5"
            ]
        ]
    },
    {
        "id": "5e1cb8414fcdd691",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "init esp devices",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "7bfec33f9c1cca06"
            ]
        ]
    },
    {
        "id": "7bfec33f9c1cca06",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Init Esp Devices",
        "func": "//Init Esp Devices\nlet espDevices = global.get(\"espDevices\");\nif (espDevices) {\n\tnode.warn( [ \"[\" + node.name + \"][info] espDevices exists\", espDevices]);\n}\nglobal.set(\"espDevices\",{})\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8421d5587664bc49",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "espDevicesTable Prep",
        "func": "//espDevicesTable  Table Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"espDevicesTableDetails\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"espDevices\",\n    tableDatabaseName: \"espDevices\",\n    tableJsonName: \"/devices/espDevices.json\",\n    tableType: \"object\",\n    tableKeys: [\"deviceName\"],\n    lastID: null,\n    tableTab: \"ESP Management\",\n    refreshableTable: true,\n\trefreshTime: 20,\n\t//recent check is less than the time speced   should be ascending order.   stale check is opposite.   stalecheck takes precedence (ie overwrites function)\n\trecentCheck: [{\"time\": 2*60, \"color\":'#baffc9'}, {\"time\": 5*60, \"color\":'#ffffba'}],\n\tstaleCheck: [{\"time\": 12*60*60, \"color\":'#E74C3C'}, {\"time\": 1*60*60, \"color\":'#F39C12'}],\n    tableName: flowTableName,\n\t\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\n\ntableDetails.rowFormatter = null;\n\nif (tableDetails.recentCheck) {\n\tlet temp = \"\";\n\ttableDetails.recentCheck.forEach( (chk) => {\n\t\ttemp = ( (temp==\"\") ? \"if\" : temp + \" else if\" ) + \" ((nDate-lDate)<\" + (chk.time * 1000) + \") {dCol='\" + chk.color + \"'}\"\t\t\n\t});\n\tif (temp != \"\") tableDetails.rowFormatter = \"function(row){var nDate=new Date();var lDate=new Date(row.getData().lastUpdated);var dCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';\" + temp + \";row.getElement().style.backgroundColor=dCol}\"\n}\n\nif (tableDetails.staleCheck) {\n\tlet temp = \"\";\n\ttableDetails.staleCheck.forEach( (chk) => {\n\t\ttemp = ( (temp==\"\") ? \"if\" : temp + \" else if\" ) + \" ((nDate-lDate)>\" + (chk.time * 1000) + \") {dCol='\" + chk.color + \"'}\"\t\t\n\t});\n\tif (temp != \"\") tableDetails.rowFormatter = \"function(row){var nDate=new Date();var lDate=new Date(row.getData().lastUpdated);var dCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';\" + temp + \";row.getElement().style.backgroundColor=dCol}\"\n}\n\nlet globalData = global.get(tableDetails.tableDatabaseName);\nlet esp = global.get(\"espDevices\");\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\nflow.set(flowTableName,tableDetails);\nlet espServices = global.get(\"espServices\");\nnode.warn(Object.keys(espServices))\nmsg.ui_control =  {\n    \"tabulator\":{\n\t\t\"rowFormatter\": tableDetails.rowFormatter,\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":35, },\n\t\t\t\t{title:\"<i class='fa fa-trash'></i>\", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, align : \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n\t\t\t\t{\"title\":\"Device Name\",\"field\":\"deviceName\",\"width\":115, \"editor\":\"input\"},\n\t\t\t\t{\"title\":\"Boots\",\"field\":\"reboots\",\"width\":70, \"align\":\"center\"},\n\t\t\t\t{\"title\":\"IP\",\"field\":\"IP\",\"width\":100, align:\"center\"},\n\t\t\t\t{\"title\":\"Version\",\"field\":\"appVersion\",\"width\":80, align:\"center\"},\n\t\t\t\t{\"title\":\"Library\",\"field\":\"libraryVersion\",\"width\":75, align:\"center\"},\n\t\t\t\t{\"title\":\"SSID\",\"field\":\"SSID\",\"width\":105, align:\"center\"},\n\t\t\t\t{\"title\":\"Last Update\",\"field\":\"lastUpdated\", align:\"center\",\"width\":120, formatter:\"datetime\",\n\t\t\t\t\t\t\t\tformatterParams:{outputFormat:\"DD/MM hh:mm:ss\"}},\n\t\t\t\t{\"title\":\"Location\",\"field\":\"location\",\"width\":110,\"editor\":\"input\",\n\t\t\t\t    ///formatter:\"function(cell,fps,onr){var cols={'BTRelay':'Blue','MovmentSensor':'Coral','TempSensor':'LightGrey','Other':'Orange'};console.log(cell.getValue());\treturn '<font color=\\\"' + cols[cell.getValue()] + '\\\">' + cell.getValue();}\",\n                    //editorParams: {values: Object.keys(espServices)},\n                    align:\"center\"},\n\t\t\t\t{\"title\":\"Delay\",\"field\":\"delayTime\",\"width\":75,\"editor\":\"number\", editorParams:{min:1000,step:1000}, align:\"center\"}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\nlet espDevices = global.get(\"espDevices\");\nif (!espDevices) {\n    node.warn([\"[\" + node.name + \"] \", \"[Error] \", \"espDevices does not exist\"])\n    return null;\n}\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nmsg.options = Object.keys(espDevices).map( (dev) => {return dev.devName})\nmsg.devices = espDevices\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "a363c17dcf52100b"
            ]
        ]
    },
    {
        "id": "61f7ee9336fea502",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Handle ESP updates",
        "func": "\nif ( (msg.hasOwnProperty(\"payload\")) && \n\t( msg.hasOwnProperty(\"ui_control\") ) &&\n\t( msg.ui_control.hasOwnProperty(\"callback\") ) &&\n\t(msg.ui_control.callback == \"cellEdited\")\n\t) {\n\t\tif (!msg.hasOwnProperty(\"field\")) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][Error] \",\"field not found in msg\", msg ]);\n\t\t\treturn null\n\t\t}\n\t\tif (!msg.hasOwnProperty(\"rowFields\")) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][Error] \",\"rowfield not found in msg\", msg]);\n\t\t\treturn null;\n\t\t}\n\t\tlet deviceName = msg.rowFields.find( (row) => {\n\t\t\tif (row.field==\"deviceName\") return row.val;\n\t\t}).val;\n\t\tif (!deviceName) {\n\t\t\tnode.error( [ \"[\" + node.name + \"][Error] \",\"deviceName not found in msg.rowFields\", msg,msg.rowFields]);\n\t\t\treturn null;\n\t\t}\n\t    let newMsg = {topic:deviceName + \"/update\", payload:{[msg.field]: msg.payload}};\n\t    node.warn( [ \"[\" + node.name + \"][Info] About to update \" + deviceName + \" field=\" + msg.field + \" oldvalue=\" + msg.oldValue + \" newvalue=\" + msg.payload, newMsg,msg]);\n\t\t\n\t\treturn newMsg;\n} else {\n\treturn null;\n}\nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 320,
        "wires": [
            [
                "d52545127a07bba9"
            ]
        ]
    },
    {
        "id": "d97ec81b051638af",
        "type": "json",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "b484687063ebafc2"
            ]
        ]
    },
    {
        "id": "b484687063ebafc2",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "esp_mqt_handler",
        "func": "//esp_mqt_handler\nlet gDebug = global.get(\"gDebug\")\n//gDebug = true;\nlet nowDate = new Date();\nlet espDevices = global.get(\"espDevices\");\nif (!espDevices) {\n    node.warn( [ \"[\" + node.name + \"][Info] Initialising espDevices\"]);\n\tespDevices = {};\n\tglobal.set(\"espDevices\",espDevices);\n}\nlet espServices = global.get(\"espServices\");\nif (!espServices) {\n    node.error( [ \"[\" + node.name + \"][Error] espServices definitions not set cannot continue\"]);\n}\nlet MACs = global.get(\"MACs\");\nif (!MACs) {\n    node.error( [ \"[\" + node.name + \"][Error] MACs  not set cannot continue\"]);\n}\n\nlet topics = msg.topic.split(\"/\");\nlet deviceName = topics[1];\nlet macMessages = [];\nlet tableMsg = {topic: \"UpdateTable\", payload: {value:{}}};\nif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Msg received \" + deviceName, msg]);\nif (topics[0] == \"fromesp\") {\n\tif (!espDevices[deviceName]) {\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Device does not exist - Creating\" + deviceName, msg]);\n\t\tespDevices[deviceName] = {};\n\t\tespDevices[deviceName].deviceName = deviceName;\n\t\tespDevices[deviceName].devices = {};\n\t\tespDevices[deviceName].reboots = 0;\n\t\tespDevices[deviceName].rebootTime = new Date();\n\t\tespDevices[deviceName].createdTime = new Date();\n\t\tespDevices[deviceName].lastUpdated = new Date();\n\t\tespDevices[deviceName].location = \"Unknown\";\n\t\ttableMsg.payload.cmd = \"addRow\";\t\t\t\t\t\t  \n\t\tglobal.set(\"espDevices\",espDevices);\n\t} else {\n\t\ttableMsg.payload.cmd = \"updateRow\";\n\t}\n\tespDevices[deviceName].lastUpdated = new Date();\n\tif ( (topics[2] == \"hereiam\") || (topics[2] == \"iamhere\") ) {\n\t\tObject.keys(msg.payload).forEach( (k) => {\n\t\t\tif (k!=\"deviceName\") {\n\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Updating field  \" + k + \" from \" + espDevices[deviceName][k] + \" to \" + msg.payload[k], espDevices[deviceName], msg]);\n\t\t\t\tespDevices[deviceName][k] = msg.payload[k];\n\t\t\t}\n\t\t});\n\t\tif (espDevices[deviceName].reboots != espDevices[deviceName].reboots) espDevices[deviceName].reboots = 0;\n\t\tif (topics[2] == \"hereiam\") {\n\t\t    espDevices[deviceName].reboots++;\n\t\t    espDevices[deviceName].rebootTime = new Date();\n\t\t}\n\t\tObject.keys(espDevices[deviceName]).forEach( (k) => {tableMsg.payload.value[k] = espDevices[deviceName][k]});\n\t\tglobal.set(\"espDevices\",espDevices);\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] Sending welcome\"]);\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] hereiam so requesting more info \" + deviceName, msg]);\n\t\tlet newMsgs = []\n\t\tnewMsgs.push({topic: \"toesp/\" + deviceName + \"/welcome\",payload:{\"delayTime\":17000,\"service\":\"BTRelay\"}})\n\t\tnewMsgs.push({topic: \"toesp/\" + deviceName + \"/getConfig/device\",payload:{\"req\":\"getConfig\", type:\"device\"}})\n\t\tnewMsgs.push({topic: \"toesp/\" + deviceName + \"/getConfig/app\",payload:{\"req\":\"getConfig\", type:\"app\"}})\n\t\tnewMsgs.push({topic: \"toesp/\" + deviceName + \"/BTScan\",payload:{\"commands\":\"scan\", scanTime:msg.scanTime}})\n\t\treturn [tableMsg, newMsgs, macMessages];\n\t} else if (topics[2] == \"getConfig\"){\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Received Config from \" + deviceName, espDevices[deviceName], msg]);\n\t\tObject.keys(msg.payload).forEach( (k) => {\n\t\t\tif (k!=\"deviceName\") {\n\t\t\t\t//if (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Updating field  \" + k + \" from \" + espDevices[deviceName][k] + \" to \" + msg.payload[k], espDevices[deviceName], msg]);\n\t\t\t\tespDevices[deviceName][k] = msg.payload[k];\n\t\t\t}\n\t\t});\n\t\tObject.keys(espDevices[deviceName]).forEach( (k) => {tableMsg.payload.value[k] = espDevices[deviceName][k]});\n\t\tglobal.set(\"espDevices\",espDevices);\n\t\tif (espDevices[deviceName].mac) {\n\t\t\tmacMessages.push({topic: espDevices[deviceName].mac + \"_\" + deviceName,\n\t\t\t\t\t\tpayload:{deviceName:deviceName, type:\"ESP\",\n\t\t\t\t\t\tsource: \"espHandlerESP\",\n\t\t\t\t\t\tip: espDevices[deviceName].IP,\n\t\t\t\t\t\tMAC:espDevices[deviceName].mac}});\n\t\t\tif (gDebug) node.warn([\"Creating Mac Message\",macMessages])\n\t\t\treturn [tableMsg, null, macMessages];\n\t\t}\n\t} else if (topics[2] == \"BTScan\"){\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Received BTScan from \" + deviceName, espDevices[deviceName], msg]);\n\t\tmsg.payload.devices.forEach( (dev) => {\n\t\t\tif (!espDevices[deviceName].devices[dev.address]) espDevices[deviceName].devices[dev.address] = {};\n\t\t\tif (!MACs[dev.address]){\n\t\t\t\tif (gDebug) node.warn([\"Creating Mac Message\",macMessages])\n\t\t\t\tmacMessages.push({topic: dev.address + \"_\" + dev.name,\n\t\t\t\t\t\tsource: \"espHandlerBLE\",\n\t\t\t\t\t\tpayload:{deviceName:dev.name, type:\"BLE\", ip: \"\", MAC: dev.address}});\n\t\t\t\t\t\t//ip: espDevices[deviceName].IP,\n\t\t\t}\n\t\t\tObject.keys(dev).forEach( (k) => {espDevices[deviceName].devices[dev.address][k] = dev[k];});\n\t\t});\n\t\tObject.keys(espDevices[deviceName]).forEach( (k) => {tableMsg.payload.value[k] = espDevices[deviceName][k]});\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][Info] Added Devices to \" + deviceName,espDevices[deviceName].devices]);\n\t\tglobal.set(\"espDevices\", espDevices);\n\t\treturn [tableMsg, null, macMessages];\n\t} else {\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"][fromesp] \" + \" [Info] Unrecognised topic \" + msg.topic + \" nothing more to do\",msg,topics]);\n\t}\n} else if (topics[0] == \"fromserver\") {\n    let newMsg = {};\n\tif (topics[2] == \"hereiam\") {\n\t\tnewMsg = {topic: \"toserver/\" + deviceName + \"/welcome\",payload:{\"service\":\"Server\"}}\n\t} else if (topics[2] == \"getDevices\") {\n\t\tnewMsg.payload = []\n\t\tObject.keys(espDevices).forEach( (dev) => {\n\t\t\tif (dev!= \"smartserver\") {\n\t\t\t\tObject.keys(dev.devices).forEach( (devu) => {\n\t\t\t\t\tnewMsg.payload.push({deviceName:dev, devices: dev.devices[devu]});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tnewMsg.topic = \"toserver\" + \"/\" + topics[1] + \"/getDevices\";\n\t\treturn [null, newMsg, macMessages];\n\t} else {\n\t\tnode.warn( [ \"[\" + node.name + \"][fromserver] \" + \" [Info] Unrecognised topic \" + msg.topic + \" nothing more to do\",msg,topics]);\n\t}\n} else {\n\tnode.warn( [ \"[\" + node.name + \"] \" + \" [Info] unknown source (not fromesp or fromserver) \",msg,topics]);\n}\nreturn null",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "a363c17dcf52100b"
            ],
            [
                "d52545127a07bba9"
            ],
            [
                "5ef11a850de64405"
            ]
        ]
    },
    {
        "id": "a363c17dcf52100b",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "env": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "a6c19d4ef8ba397f",
                "7f8cdb33c11b8a5a"
            ]
        ]
    },
    {
        "id": "a6c19d4ef8ba397f",
        "type": "ui_table",
        "z": "910cb7f1e9a01c80",
        "group": "2c0327def1d1c166",
        "name": "ESP Table",
        "order": 1,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 910,
        "y": 320,
        "wires": [
            [
                "a363c17dcf52100b",
                "61f7ee9336fea502"
            ]
        ]
    },
    {
        "id": "c31eec8e9c5dcb4e",
        "type": "mqtt in",
        "z": "910cb7f1e9a01c80",
        "name": "fromesp",
        "topic": "fromesp/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "d97ec81b051638af"
            ]
        ]
    },
    {
        "id": "10529f4f68be899d",
        "type": "mqtt in",
        "z": "910cb7f1e9a01c80",
        "name": "fromserver",
        "topic": "fromserver/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 180,
        "wires": [
            [
                "d97ec81b051638af"
            ]
        ]
    },
    {
        "id": "b04611cbd9185e03",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "MAC Table Prep",
        "func": "// MACs Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"MACAddressesTable\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"MACs\",\n    tableDatabaseName: \"MACs\",\n    tableJsonName: \"/devices/MACs.json\",\n    tableType: \"object\",\n    tableKeys: [\"MAC\"],\n    lastID: null,\n    tableTab: \"MACs\",\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"MAC\":\"<mac address>\",\"type\":\"<type>\", \"deviceName\":\"<device name>\", \"IP\":\"<ip>\"}],true],\"returnPromise\":true}\n};\nlet globalData = global.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\t//return {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n\treturn {\"id\": tableDetails.lastID++, ...globalData[ele]}\n    }); \n}\nflow.set(flowTableName,tableDetails);\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t//{title:\" \", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, align: \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n            {\"title\":\"MAC\",\"field\":\"MAC\",\"width\":130, \"editor\":\"input\", validator: \"required\"},\n            {\"title\":\"Type\",\"field\":\"type\",\"width\":70, align:\"center\", \"editor\":\"select\", editorParams:{values:[\"IP\",\"BLE\",\"ESP\"]}, validator: \"required\"},\n\t\t\t{\"title\":\"Device Name\",\"field\":\"deviceName\",\"width\":200, \"editor\":\"input\"},\n\t\t\t{\"title\":\"Hostname\",\"field\":\"hostname\",\"width\":200},\n\t\t\t{\"title\":\"IP\",\"field\":\"ip\",\"width\":120}\n        ],\n        \"cellEdited\": \"function(cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:cell.getRow().getIndex(),row:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n    \"customHeight\":30\n}\n\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nreturn [msg,{topic:\"control\", payload:\"open\"}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nif (!global.get(\"MACs\")) {\n\tglobal.set(\"MACs\", {})\n}\n",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 680,
        "wires": [
            [
                "868d9e629fca81ce"
            ],
            [
                "37d1a007aed6f786"
            ]
        ]
    },
    {
        "id": "868d9e629fca81ce",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "env": [],
        "x": 920,
        "y": 540,
        "wires": [
            [
                "1fbe0655b12860a5"
            ]
        ]
    },
    {
        "id": "1fbe0655b12860a5",
        "type": "ui_table",
        "z": "910cb7f1e9a01c80",
        "group": "bbcc15c7065be440",
        "name": "MACs Admin",
        "order": 2,
        "width": "10",
        "height": "15",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 910,
        "y": 460,
        "wires": [
            [
                "868d9e629fca81ce"
            ]
        ]
    },
    {
        "id": "55e8971ecb753c91",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Add Mac",
        "func": "//Add Mac\nlet gDebug = global.get(\"gDebug\");\n//gDebug = true;\nif (!msg.payload.hasOwnProperty(\"MAC\")) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] msg payload does not contain an object MAC\", msg]);\n    return {topic:\"Error\", payload: \"[Error] msg payload does not contain an object MAC\"};\n}\nlet MACs = global.get(\"MACs\");\nif (!MACs) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] MACs do not exist\", msg]);\n    return {topic:\"Error\", payload: \"[Error] MACs do not exist\"};\n}\nlet action = null;\nlet tableMsg = {topic: \"UpdateTable\", source: msg.source, payload: {value:{}}};\nif (!MACs[msg.payload.MAC]) {\n    node.warn([\"[\" + node.name + \"] \", \"[Info] Creating MAC \" + msg.payload.MAC, msg]);\n    MACs[msg.payload.MAC] = {};\n\ttableMsg.payload.cmd = \"addRow\";\t\n    action = \"INSERT\";\n} else {\n    action = \"AMEND\";\n\ttableMsg.payload.cmd = \"updateRow\";\n}\n//node.warn(\"DEBUG \" + msg.payload.MAC + \" \" + msg.payload.type + \" \" + tableMsg.payload.cmd)\nObject.keys(msg.payload).forEach( (prp) =>{\n\tif ( (msg.payload[prp]) && ( (!MACs[msg.payload.MAC][prp]) || (prp != \"type\") || (msg.payload[prp] != \"IP\") ) ) MACs[msg.payload.MAC][prp] = msg.payload[prp];\n})\nif (gDebug) node.warn([\"[\" + node.name + \"] \", \"[Info] MAC \" + action + \"ed \" + JSON.stringify(MACs[msg.payload.MAC]), MACs, msg]);\nObject.keys(MACs[msg.payload.MAC]).forEach( (k) => {tableMsg.payload.value[k] = MACs[msg.payload.MAC][k]});\nglobal.set(\"MACs\", MACs)\n//return {topic: action + \"_\" + msg.payload.MAC, payload:MACs};\nreturn [tableMsg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "868d9e629fca81ce"
            ]
        ]
    },
    {
        "id": "b737c33811d31df3",
        "type": "link in",
        "z": "910cb7f1e9a01c80",
        "name": "Add MAC",
        "links": [
            "5ef11a850de64405",
            "f34bfffc2b5fc5e6"
        ],
        "x": 275,
        "y": 400,
        "wires": [
            [
                "37d1a007aed6f786"
            ]
        ]
    },
    {
        "id": "5ef11a850de64405",
        "type": "link out",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "mode": "link",
        "links": [
            "b737c33811d31df3"
        ],
        "x": 575,
        "y": 240,
        "wires": []
    },
    {
        "id": "9f4d8880551f05e0",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "anyonethere",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "toesp/allesp/anyonethere",
        "payloadType": "date",
        "x": 1480,
        "y": 60,
        "wires": [
            [
                "d52545127a07bba9"
            ]
        ]
    },
    {
        "id": "6487423d2d330d69",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Clear reboot Counter",
        "func": "//Init Esp Devices\nlet espDevices = global.get(\"espDevices\");\nif (espDevices) {\n\tnode.warn( [ \"[\" + node.name + \"][info] espDevices exists\", espDevices]);\n}\nlet msgs = [];\nlet newReboots = 0;\nif (msg.reboots) newReboots = msg.reboots;\nObject.values(espDevices).forEach((dev) => {\n    if (dev) {\n    node.warn(dev.mac + \" settting reboots to \" + newReboots + \" from \" + dev.reboots);\n    dev.reboots = newReboots;\n    msgs.push({topic:\"UpdateTable\",payload: {cmd:\"updateRow\", value:dev}})\n    }\n})\n//\nglobal.set(\"espDevices\",espDevices)\n\nreturn [msgs];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "a363c17dcf52100b"
            ]
        ]
    },
    {
        "id": "8e37c248b0fd9710",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "Clear reboots",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reboots",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "6487423d2d330d69"
            ]
        ]
    },
    {
        "id": "7f8cdb33c11b8a5a",
        "type": "ui_text",
        "z": "910cb7f1e9a01c80",
        "group": "2c0327def1d1c166",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Refreshed",
        "format": "{{msg.refreshDate}}",
        "layout": "row-center",
        "x": 1130,
        "y": 400,
        "wires": []
    },
    {
        "id": "c84e1288fdab6117",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "scan please",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "toesp/allesp/BTScan",
        "payload": "{\"commands\":\"scan\",\"scanTime\":10}",
        "payloadType": "json",
        "x": 1490,
        "y": 100,
        "wires": [
            [
                "d52545127a07bba9"
            ]
        ]
    },
    {
        "id": "4ca3632d7e0890a4",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "esp bluetooth devs",
        "func": "// esp bluetooth devs\nlet gDebug = global.get(\"gDebug\")\nlet espDevices = global.get(\"espDevices\");\nif (!espDevices) {\n    node.warn( [ \"[\" + node.name + \"][Info] Initialising espDevices\"]);\n\treturn;\n}\nlet espServices = global.get(\"espServices\");\nif (!espServices) {\n    node.error( [ \"[\" + node.name + \"][Error] espServices definitions not set cannot continue\"]);\n\treturn\n}\nlet MACs = global.get(\"MACs\");\nif (!MACs) {\n    node.error( [ \"[\" + node.name + \"][Error] MACs  not set cannot continue\"]);\n\treturn\n}\nlet btdevices = [];\nfunction deriveSubType(name) {\n    if (name) {\n    \tif (name.includes(\"XMCT\")) {\n    \t\treturn \"bedside\";\n    \t} else if (name.includes(\"yeelight\")) {\n    \t\treturn \"candela\";\n    \t} else if (name.includes(\"ATC\")) {\n    \t\treturn \"atc\";\n    \t} else if (name.includes(\"ihoment\")) {\n    \t\treturn \"govee\";\n    \t} else {\n    \t\treturn \"unknown\";\n    \t}\n    }\n    return \"blank name\"\n}\nObject.values(espDevices).forEach( (esp) => {\n\tObject.values(esp.devices).forEach( (btdev) => {\n\t\tif (!btdevices.find((btd) => btdev.address== btd.mac)) {\n\t\t\t//node.warn(\"DEBUG - mac=\" + btdev.address + \" name=\" + btdev.name);\n\t\t\tconst macDev = Object.values(MACs).find( mac => mac.MAC == btdev.address);\n\t\t\tif (!macDev) {\n\t\t\t\t//node.warn ([\"MAC does not exist \" + btdev.address + \" name=\" + btdev.name + \" subtype=\" + deriveSubType(btdev.name) , MACs]);\n\t\t\t\tconst subType = deriveSubType(btdev.name);\n\t\t\t\tbtdevices.push({mac:btdev.address, name:\"MAC not in MACs\", subtype: deriveSubType(btdev.name)});\n\t\t\t} else {\n\t\t\t\t//node.warn ([\"MAC exists \" + btdev.address + \" name=\" + btdev.name + \" subtype=\" + deriveSubType(btdev.name) , MACs]);\n\t\t\t\tbtdevices.push({mac:btdev.address, name:macDev.deviceName, subtype: deriveSubType(btdev.name)});\n\t\t\t}\n\t\t}\n\t});\n});\nnode.warn(btdevices);\nflow.set(\"btdevices\",btdevices);\nconst flowTableName = \"btdevicetabledetails\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"btdevices\",\n    tableDatabaseName: \"btdevices\",\n    tableJsonName: \"/devices/btdevices.json\",\n    tableType: \"object\",\n    tableKeys: [\"mac\"],\n    lastID: null,\n    tableTab: \"ESP Management\",\n    refreshableTable: false,\n\trefreshTime: 20,\n\t//recent check is less than the time speced   should be ascending order.   stale check is opposite.   stalecheck takes precedence (ie overwrites function)\n\t//recentCheck: [{\"time\": 2*60, \"color\":'#baffc9'}, {\"time\": 5*60, \"color\":'#ffffba'}],\n\t//staleCheck: [{\"time\": 12*60*60, \"color\":'#E74C3C'}, {\"time\": 1*60*60, \"color\":'#F39C12'}],\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\ntableDetails.rowFormatter = null;\ntableDetails.cellClicker = \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'buttonClicked','button':cell.getColumn().getDefinition().title},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});}\"\ntableDetails.icon1Formatter = \"function(cell){return \\\"<i class='fa fa-thermometer-empty'></i>\\\"}\"\ntableDetails.icon1Formatter = \"function(cell){return \\\"<i class='fa fa-lightbulb-o'></i>\\\"}\"\n//tableDetails.icon2Formatter = \"function(cell){return \\\"<i class='fa fa-power-off'></i>\\\"}\"\ntableDetails.icon2Formatter = \"function(cell){return \\\"<i class='material-icons md-48'>check_circle_outline</i>\\\"}\"\n//<font color=\"black\"><i class=\"material-icons md-48\">check_circle_outline</i></font> \ntableDetails.icon2Formatter =  \"function(cell){var type=cell.getData().subtype;console.log('type='+type);if ((type!='atc')&&(type!='unknown')) return \\\"<i class='fa fa-power-off'></i>\\\";return \\\"<i class='fa fa-ban'></i>\\\";}\"\n\nlet globalData = flow.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\nflow.set(flowTableName,tableDetails);\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t\t//{title:\"<i class='fa fa-trash'></i>\", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, align : \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n\t\t\t\t{\"title\":\"Name\",\"field\":\"name\",\"width\":120 },\n\t\t\t\t{\"title\":\"MAC\",\"field\":\"mac\",\"width\":125 },\n\t\t\t\t{\"title\":\"Sub-type\",\"field\":\"subtype\",\"width\":100, align:\"center\"},\n\t\t\t\t{\"title\":\"PwrOn\", formatter: tableDetails.icon2Formatter, width:75, \"align\": \"center\", cellClick: tableDetails.cellClicker},\n                {\"title\":\"PwrOff\", formatter: tableDetails.icon2Formatter, width:75, \"align\": \"center\", cellClick: tableDetails.cellClicker}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 740,
        "wires": [
            [
                "4b0fea29286a8bba"
            ]
        ]
    },
    {
        "id": "857926430c85bcfc",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "Start immediate",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "4ca3632d7e0890a4",
                "5e27b9fb02579ba9",
                "8421d5587664bc49"
            ]
        ]
    },
    {
        "id": "4b0fea29286a8bba",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "x": 900,
        "y": 740,
        "wires": [
            [
                "8765fbd25705c53b",
                "fe4855e30e637cfa"
            ]
        ]
    },
    {
        "id": "8765fbd25705c53b",
        "type": "ui_table",
        "z": "910cb7f1e9a01c80",
        "group": "ae7db8c4abafff28",
        "name": "BLE Device Admin",
        "order": 1,
        "width": "7",
        "height": "4",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 920,
        "y": 680,
        "wires": [
            [
                "4b0fea29286a8bba"
            ]
        ]
    },
    {
        "id": "1d96b34fac763874",
        "type": "ui_ui_control",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 480,
        "wires": [
            [
                "4b0fea29286a8bba",
                "bbad7d5b463dbef5",
                "868d9e629fca81ce",
                "a363c17dcf52100b"
            ]
        ]
    },
    {
        "id": "5e27b9fb02579ba9",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "esp bluetooth RSSI devs",
        "func": "// esp bluetooth RSSI devs\nlet gDebug = global.get(\"gDebug\")\nlet espDevices = global.get(\"espDevices\");\nif (!espDevices) {\n\tnode.warn([\"[\" + node.name + \"][Info] Initialising espDevices\"]);\n\treturn;\n}\nlet espServices = global.get(\"espServices\");\nif (!espServices) {\n\tnode.error([\"[\" + node.name + \"][Error] espServices definitions not set cannot continue\"]);\n\treturn\n}\nlet MACs = global.get(\"MACs\");\nif (!MACs) {\n\tnode.error([\"[\" + node.name + \"][Error] MACs  not set cannot continue\"]);\n\treturn\n}\nlet btrssidevices = [];\nfunction deriveSubType(name) {\n\tif (name) {\n\t\tif (name.includes(\"XMCT\")) {\n\t\t\treturn \"bedside\";\n\t\t} else if (name.includes(\"yeelight\")) {\n\t\t\treturn \"candela\";\n\t\t} else if (name.includes(\"ATC\")) {\n\t\t\treturn \"atc\";\n\t\t} else if (name.includes(\"ihoment\")) {\n\t\t\treturn \"govee\";\n\t\t} else {\n\t\t\treturn \"unknown\";\n\t\t}\n\t}\n\treturn \"*blank*\"\n}\nObject.values(espDevices).forEach((esp) => {\n\tObject.values(esp.devices).forEach((btdev) => {\n\t\tconst macDev = Object.values(MACs).find(mac => mac.MAC == btdev.address);\n\t\tif (!macDev) {\n\t\t\tconst subType = deriveSubType(btdev.name);\n\t\t\tbtrssidevices.push({ esp: esp.deviceName, rssi: btdev.RSSI, mac: btdev.address, name: \"MAC not in MACs\", subtype: deriveSubType(btdev.name) });\n\t\t} else {\n\t\t\tbtrssidevices.push({ esp: esp.deviceName, rssi: btdev.RSSI, mac: btdev.address, name: macDev.deviceName, subtype: deriveSubType(btdev.name) });\n\t\t}\n\t});\n});\nbtrssidevices.sort((e1, e2) => {\n\tif (e2.mac == e1.mac) {\n\t\tif (e2.rssi >= e1.rssi) return 1;\n\t\treturn -1\n\t}\n\tif (e2.mac > e1.mac) return 1;\n\treturn -1;\n});\n/*\nbtrssidevices.sort( (e1,e2)  => {\n\tif (e2.mac == e1.mac) {\n\t\tif (e2.rssi >= e1.rssi) {\n\t\t\tretval = 1;\n\t\t} else {\n\t\t\tretval = -1\n\t\t}\n\t} else if (e2.mac > e1.mac {\n\t\tretval = 1\n\t} else {\n\t\tretval = -1\n\t}\n\treturn retval;\n});\n*/\nnode.warn(btrssidevices);\nflow.set(\"btrssidevices\", btrssidevices);\nconst flowTableName = \"btrssidevicetabledetails\";\nlet tableDetails = {\n\ttableData: [],\n\ttableDatabase: \"btrssidevices\",\n\ttableDatabaseName: \"btrssidevices\",\n\ttableJsonName: \"/devices/btrssidevices.json\",\n\ttableType: \"object\",\n\ttableKeys: [\"mac\"],\n\tlastID: null,\n\ttableTab: \"ESP Management\",\n\trefreshableTable: false,\n\trefreshTime: 20,\n\t//recent check is less than the time speced   should be ascending order.   stale check is opposite.   stalecheck takes precedence (ie overwrites function)\n\t//recentCheck: [{\"time\": 2*60, \"color\":'#baffc9'}, {\"time\": 5*60, \"color\":'#ffffba'}],\n\t//staleCheck: [{\"time\": 12*60*60, \"color\":'#E74C3C'}, {\"time\": 1*60*60, \"color\":'#F39C12'}],\n\ttableName: flowTableName,\n\taddRowInject: { \"command\": \"addRow\", \"arguments\": [[{ \"Service\": \"Service\", \"mqttPrefix\": \"mqttPrefix\", \"delayTime\": 12 }], true], \"returnPromise\": true }\n};\ntableDetails.rowFormatter = null;\ntableDetails.cellClicker = \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'buttonClicked','button':cell.getColumn().getDefinition().title},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});}\"\ntableDetails.icon1Formatter = \"function(cell){return \\\"<i class='fa fa-thermometer-empty'></i>\\\"}\"\ntableDetails.icon1Formatter = \"function(cell){return \\\"<i class='fa fa-lightbulb-o'></i>\\\"}\"\n//tableDetails.icon2Formatter = \"function(cell){return \\\"<i class='fa fa-power-off'></i>\\\"}\"\ntableDetails.icon2Formatter = \"function(cell){return \\\"<i class='material-icons md-48'>check_circle_outline</i>\\\"}\"\n//<font color=\"black\"><i class=\"material-icons md-48\">check_circle_outline</i></font> \ntableDetails.icon2Formatter = \"function(cell){var type=cell.getData().subtype;console.log('type='+type);if ((type!='atc')&&(type!='unknown')) return \\\"<i class='fa fa-power-off'></i>\\\";return \\\"<i class='fa fa-ban'></i>\\\";}\"\n\nlet globalData = flow.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\", tableDetails])\n\treturn null;\n}\nif ((tableDetails.tableType == \"object\") && (tableDetails.tableKeys.length != 1)) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \", tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n\tmsg.payload = globalData.map((ele) => {\n\t\treturn { id: tableDetails.lastID++, ...ele }\n\t});\n} else {\n\tmsg.payload = Object.keys(globalData).map((ele) => {\n\t\treturn { \"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele] }\n\t});\n}\n//btrssidevices.push({esp: esp.deviceName, rssi:btdev.RSSI, mac:btdev.address, name:macDev.deviceName, subtype: deriveSubType(btdev.name)});\nflow.set(flowTableName, tableDetails);\nmsg.ui_control = {\n\t\"tabulator\": {\n\t\t\"columns\": [{ \"title\": \"id\", \"field\": \"id\", \"width\": 30, },\n\t\t//{title:\"<i class='fa fa-trash'></i>\", formatter:\"function(cell){return \\\"<i class='fa fa-trash'></i>\\\"}\", width:40, align : \"center\", cellClick: \"function(e,cell){var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});cell.getRow().delete().then(()=>{this.send({ui_control:{callback:'rowDeleted'},payload:rws,rowID:cell.getRow().getData().id,rowIndex:cell.getRow().getIndex(),row:rws});console.log('Row Deleted');}).catch(()=>console.log('caught error'));}\"},\n\t\t{ \"title\": \"Name\", \"field\": \"name\", \"width\": 120 },\n\t\t{ \"title\": \"MAC\", \"field\": \"mac\", \"width\": 120 },\n\t\t{ \"title\": \"ESP\", \"field\": \"esp\", \"width\": 120 },\n\t\t{ \"title\": \"RSSI\", \"field\": \"rssi\", \"width\": 60, align: \"center\" },\n\t\t{ \"title\": \"Sub-type\", \"field\": \"subtype\", \"width\": 90, align: \"center\" },\n\t\t{ \"title\": \"PwrOn\", formatter: tableDetails.icon2Formatter, width: 80, \"align\": \"center\", cellClick: tableDetails.cellClicker },\n\t\t{ \"title\": \"PwrOff\", formatter: tableDetails.icon2Formatter, width: 80, \"align\": \"center\", cellClick: tableDetails.cellClicker }\n\t\t],\n\t\t\"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n\t\t\"layout\": \"fitColumns\",\n\t\t\"movableColumns\": false,\n\t\t\"groupBy\": \"\"\n\t},\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = { ready: true, details: flowTableName };\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 860,
        "wires": [
            [
                "bbad7d5b463dbef5"
            ]
        ]
    },
    {
        "id": "bbad7d5b463dbef5",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "x": 900,
        "y": 860,
        "wires": [
            [
                "83bd14eac0828c4f",
                "fe4855e30e637cfa"
            ]
        ]
    },
    {
        "id": "83bd14eac0828c4f",
        "type": "ui_table",
        "z": "910cb7f1e9a01c80",
        "group": "ae7db8c4abafff28",
        "name": "BLE RSSI Table",
        "order": 1,
        "width": "8",
        "height": "10",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 900,
        "y": 800,
        "wires": [
            [
                "bbad7d5b463dbef5"
            ]
        ]
    },
    {
        "id": "d52545127a07bba9",
        "type": "mqtt out",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "827c9488.27bf78",
        "x": 1730,
        "y": 200,
        "wires": []
    },
    {
        "id": "3e2e2df2c0fbb2d4",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "setup locations",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reboots",
                "v": "0",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 760,
        "y": 100,
        "wires": [
            [
                "1fd77b7a5e4858a6"
            ]
        ]
    },
    {
        "id": "1fd77b7a5e4858a6",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Set Locations",
        "func": "//Init Esp Devices\nlet espDevices = global.get(\"espDevices\");\nif (espDevices) {\n\tnode.warn( [ \"[\" + node.name + \"][info] espDevices exists\", espDevices]);\n}\nlet msgs = [];\nlet newReboots = 0;\nif (msg.reboots) newReboots = msg.reboots;\nObject.values(espDevices).forEach((dev) => {\n    if (dev) {\n    if (dev.deviceName == \"esp32_697C\") {\n\t\tdev.location = \"Bedroom\";\n\t} else if (dev.deviceName == \"esp32_5A9C\") {\n\t\tdev.location = \"Lounge\";\n\t} else if (dev.deviceName == \"esp32_50A0\") {\n\t\tdev.location = \"Office7\";\n\t} else if (dev.deviceName == \"esp32_6D2C\") {\n\t\tdev.location = \"Office3\";\n\t} else {\n\t\tdev.location = \"Unknown\";\n\t}\n    node.warn(dev.mac + \" settting location to \" + dev.location);\n    msgs.push({topic:\"UpdateTable\",payload: {cmd:\"updateRow\", value:dev}})\n    }\n})\n//\nglobal.set(\"espDevices\",espDevices)\n\nreturn [msgs];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "37d1a007aed6f786",
        "type": "gate",
        "z": "910cb7f1e9a01c80",
        "name": "Mac Gate",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 540,
        "y": 540,
        "wires": [
            [
                "55e8971ecb753c91"
            ]
        ]
    },
    {
        "id": "82a7f30f3e87c327",
        "type": "debug",
        "z": "910cb7f1e9a01c80",
        "name": "MAC ADD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 780,
        "wires": []
    },
    {
        "id": "8c2d51a76551a364",
        "type": "comment",
        "z": "910cb7f1e9a01c80",
        "name": "Sort out MACS",
        "info": "Should all be same case\nsave jsons\nfunction to see what problems\nchange esp mqt handler for bluetooth and esps\nchange add Macs\nsearch and change MACs lookups\n",
        "x": 230,
        "y": 740,
        "wires": []
    },
    {
        "id": "63776f98857a39c9",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 40,
        "wires": [
            [
                "a519735863ec22e5"
            ]
        ]
    },
    {
        "id": "a519735863ec22e5",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "Check macs for duplicates",
        "func": "let MACs = global.get(\"MACs\")\nlet lcase = 0;\nlet ucase = 0;\nlet both = 0;\nlet dups = {}\nObject.keys(MACs).forEach( (mac) => {\n\tlcaseMac = mac.toLowerCase();\n\tucaseMac = mac.toUpperCase();\n\tif (mac == lcaseMac) {\n\t\tlcase++;\n\t\tif (mac != ucaseMac) {\n\t\t\tif (MACs[ucaseMac]){\n\t\t\t\tboth++;\n\t\t\t\tdups[ucaseMac] = MACs[mac];\n\t\t\t}\n\t\t}\n\t}\n\tif ( (mac == ucaseMac)  && (mac != lcaseMac) ) {\n\t\tucase++;\n\t\t//if (MACs[lcaseMac]) both++;\n\t}\n});\nnode.warn( [lcase + \" lowercase macs, \" + ucase + \" uppercase macs, \"  + both + \" dups\" , dups]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c3e540e1f0fc4e21",
        "type": "inject",
        "z": "910cb7f1e9a01c80",
        "name": "Start after 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "b04611cbd9185e03"
            ]
        ]
    },
    {
        "id": "fe4855e30e637cfa",
        "type": "function",
        "z": "910cb7f1e9a01c80",
        "name": "BT Device handler",
        "func": "//BT Device handler\nlet gDebug = global.get(\"gDebug\")\n//gDebug = true;\nfunction deriveSubType(name) {\n    if (name) {\n        if (name.includes(\"XMCT\")) {\n            return \"bedside\";\n        } else if (name.includes(\"yeelight\")) {\n            return \"candela\";\n        } else if (name.includes(\"ATC\")) {\n            return \"atc\";\n        } else if (name.includes(\"ihoment\")) {\n            return \"govee\";\n        } else {\n            return \"unknown\";\n        }\n    }\n    return \"*blank*\"\n}\nlet BluetoothDeviceDetails = global.get(\"BluetoothDeviceDetails\");\nif (!BluetoothDeviceDetails) {\n    node.error([\"[\" + node.name + \"][Error] BluetoothDeviceDetails not set cannot continue\"]);\n    return null;\n}\nlet MACs = global.get(\"MACs\");\nif (!MACs) {\n    node.error([\"[\" + node.name + \"][Error] MACs not set cannot continue\"]);\n    return null;\n}\n\nlet espDevices = global.get(\"espDevices\");\nif (!espDevices) {\n    node.error([\"[\" + node.name + \"][Error] espDevices not set cannot continue\"]);\n    return null;\n}\nlet macObject = null;\nlet devNameInput = msg.payload.deviceName;\nlet macInput = msg.payload.MAC;\nlet cmdInput = msg.payload.cmd;\nif ((msg.hasOwnProperty(\"ui_control\")) && (msg.ui_control.hasOwnProperty(\"callback\")) &&\n    (msg.ui_control.callback == \"buttonClicked\")) {\n    if ((!msg.row.find(rw => rw.field == \"mac\")) || (!msg.ui_control.button)) {\n        node.error([\"[\" + node.name + \"][Error] Msg does have button or row\", msg]);\n        return null;\n    }\n    macInput = msg.row.find(rw => (rw.field == \"mac\")).val;\n    cmdInput = msg.ui_control.button.toLowerCase();\n    if (cmdInput == \"pwron\") cmdInput = \"on\";\n    if (cmdInput == \"pwroff\") cmdInput = \"off\";\n} else {\n    if ((!msg.payload.deviceName) && (!msg.payload.MAC)) {\n        if (gDebug) node.warn([\"[\" + node.name + \"][Error] Payload does not specify a device or a MAC\", msg]);\n        return null;\n    }\n}\nif (macInput) {\n    macObject = MACs[macInput];\n    node.warn([\"DEBUG1 \", macInput, macObject, msg]);\n} else {\n    macObject = Object.values(MACs).find(dev => dev.deviceName == devNameInput);\n    node.warn([\"DEBUG2 \", macInput, macObject, msg]);\n}\nif (!macObject) {\n    node.error([\"[\" + node.name + \"][Error] BT Device not found - deviceName=\" +\n        devNameInput + \" macInput=\" + macInput, msg]);\n    return null;\n}\nif (macObject.type != \"BLE\") {\n    node.error([\"[\" + node.name + \"][Error] BT Device not a BLE  type=\" + macObject.type, msg, macObject]);\n    return null;\n}\nif (gDebug) node.warn(macObject);\nlet BLEHosts = [];\nObject.values(espDevices).forEach((esp) => {\n    Object.values(esp.devices).forEach((dev) => {\n        if (dev.address == macObject.MAC.toLowerCase()) {\n            BLEHosts.push({ esp: esp.deviceName, RSSI: dev.RSSI, subType: deriveSubType(dev.name) });\n        }\n    });\n});\nif (BLEHosts.length == 0) {\n    node.error([\"[\" + node.name + \"][Error] No Hosts found\", msg, macObject, espDevices]);\n    return null;\n}\nBLEHosts.sort((a, b) => { return (a.RSSI > b.RSSI) ? -1 : 1 });\nBLEHosts.forEach(host => node.warn(host.esp + \" \" + host.RSSI + \" \" + host.subType));\nconst BTDeets = BluetoothDeviceDetails[BLEHosts[0].subType];\nif (!BTDeets) {\n    if (gDebug) node.warn([\"[\" + node.name + \"][Error] BT Device subtype does not exist in BT Details \" + BLEHosts[0].subType, msg, macObject, BluetoothDeviceDetails]);\n    return null;\n}\n\nconst validCommand = BTDeets.validCommands.find(v => v.cmd == cmdInput);\nif (!validCommand) {\n    node.error([\"[\" + node.name + \"][Error] \" + cmdInput + \" is not a valid commmand \", BTDeets, msg]);\n    return null;\n}\nlet blueToothMessage = {};\nblueToothMessage.topic = \"toesp/\" + BLEHosts[0].esp + \"/execute\";\nblueToothMessage.payload = {};\nblueToothMessage.payload.cmd = cmdInput;\nblueToothMessage.payload.mac = macObject.MAC;\nblueToothMessage.payload.suuid = BTDeets.SERVICE_UUID;\nblueToothMessage.payload.cuuid = BTDeets.CONTROL_UUID;\nblueToothMessage.payload.nuuid = BTDeets.NOTIFY_UUID;\nblueToothMessage.payload.commands = validCommand.bits[0];\nblueToothMessage.payload.commands2 = validCommand.bits[1];\n\nreturn blueToothMessage;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 780,
        "wires": [
            [
                "1decf208fbb73f9f",
                "d52545127a07bba9"
            ]
        ]
    },
    {
        "id": "1decf208fbb73f9f",
        "type": "debug",
        "z": "910cb7f1e9a01c80",
        "name": "Bluetooth msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 840,
        "wires": []
    },
    {
        "id": "6ac8683af2d2502f",
        "type": "edgeos",
        "z": "c8dffe5.004eb",
        "name": "",
        "command": "leases",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "f75173e4893ddcd2",
                "a11271350b706ff7"
            ]
        ]
    },
    {
        "id": "99b5d02c4ac0b86b",
        "type": "debug",
        "z": "c8dffe5.004eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "2e7e5820f66ea117",
        "type": "csv",
        "z": "c8dffe5.004eb",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "topic,mac,ip,hostname",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 780,
        "y": 140,
        "wires": [
            [
                "1289b03372513b24"
            ]
        ]
    },
    {
        "id": "1289b03372513b24",
        "type": "file",
        "z": "c8dffe5.004eb",
        "name": "",
        "filename": "/devices/edge.csv",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 980,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f75173e4893ddcd2",
        "type": "function",
        "z": "c8dffe5.004eb",
        "name": "Manage Network Devices",
        "func": "//Manage Network Devices\nNetworkDevices = flow.get(\"NetworkDevices\");\nif (!NetworkDevices) {\n\tnode.warn([ \"[\" + node.name + \"] NetworkDevices does not exist - initialising\"]);\n\tNetworkDevices = {};\n}\n\nif (msg.topic == \"NetworkDevices_Dump\") {\n\tnode.warn([ \"[\" + node.name + \"] Dumping Devices\"]);\n\treturn [null, {topic: \"NetworkDevices_Dump\", payload: NetworkDevices}];\n}\nconst nowDate = new Date();\nif ( (msg.topic==\"listDevices\") && (Array.isArray(msg.payload)) ) {\n\tlistMsg = {topic: \"listDevices\", payload: msg.payload}\n\tObject.keys(NetworkDevices).forEach( (key) => {NetworkDevices[key].dropped = nowDate;});\n\tmsg.payload.forEach( (dev) => {\n\t\tif (NetworkDevices[dev.mac]) {\n\t\t\tObject.keys(dev).forEach( (key) => {\n\t\t\t\tNetworkDevices[dev.mac][key] = dev[key];\n\t\t\t});\n\t\t\tif ( (!NetworkDevices[dev.mac].date) || ( ( nowDate - NetworkDevices[dev.mac].date) > (12 * 60 * 60 * 1000) ) ) {\n\t\t\t\tNetworkDevices[dev.mac].date = nowDate;\n\t\t\t}\n\t\t\tNetworkDevices[dev.mac].dropped = null;\n\t\t} else {\n\t\t\tNetworkDevices[dev.mac] = dev;\n\t\t\tNetworkDevices[dev.mac].date = nowDate;\n\t\t\tNetworkDevices[dev.mac].dropped = null;\n\t\t}\n\t});\n\treturn [msg,msg]\n}\nif (NetworkDevices[msg.payload.mac]) {\n\tObject.keys(msg.payload).forEach( (key) => {\n\t\t\tNetworkDevices[msg.payload.mac][key] = msg.payload[key];\n\t\t\t});\n\tif ( (!NetworkDevices[msg.payload.mac].date) || ( ( nowDate - NetworkDevices[msg.payload.mac].date) > (12 * 60 * 60 * 1000) ) ) {\n\t\tNetworkDevices[msg.payload.mac].date = nowDate;\n\t}\n\tNetworkDevices[msg.payload.mac].dropped = null;\n} else {\n\tNetworkDevices[msg.payload.mac] = msg.payload;\n\tNetworkDevices[msg.payload.mac].date = nowDate;\n\tNetworkDevices[msg.payload.mac].dropped = null;\n}\nflow.set(\"NetworkDevices\",NetworkDevices);\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 180,
        "wires": [
            [
                "2e7e5820f66ea117",
                "8ec17ae523040c31"
            ],
            [
                "99b5d02c4ac0b86b"
            ]
        ]
    },
    {
        "id": "f1863adb2540fab0",
        "type": "inject",
        "z": "c8dffe5.004eb",
        "name": "listDevices",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "listDevices",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "6ac8683af2d2502f"
            ]
        ]
    },
    {
        "id": "8000d1e45a730b3a",
        "type": "inject",
        "z": "c8dffe5.004eb",
        "name": "Dump NetworkDevices",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "NetworkDevices_Dump",
        "payloadType": "date",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "f75173e4893ddcd2"
            ]
        ]
    },
    {
        "id": "2921e2cee840f858",
        "type": "inject",
        "z": "c8dffe5.004eb",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 340,
        "y": 440,
        "wires": [
            [
                "5d3ec0bde2fc0b02"
            ]
        ]
    },
    {
        "id": "5d3ec0bde2fc0b02",
        "type": "function",
        "z": "c8dffe5.004eb",
        "name": "Network Dev Table Prep",
        "func": "//Network Dev Table Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"NetworkDevicesTable\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"NetworkDevices\",\n    tableDatabaseName: \"NetworkDevices\",\n    tableJsonName: \"/devices/NetworkDevices.json\",\n    tableType: \"object\",\n    tableKeys: [\"mac\"],\n    lastID: null,\n    tableTab: \"Network Devices\",\n    refreshableTable: true,\n\trefreshTime: 20,\n\tstaleDetails: [{\"time\": 2*60, \"color\":'#baffc9'}, {\"time\": 5*60, \"color\":'#ffffba'}],\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\ntableDetails.rowFormatter = null;\nif (tableDetails.staleDetails) {\n\tlet staleCheck = \"\";\n\ttableDetails.staleDetails.forEach( (chk) => {\n\t\tstaleCheck = ( (staleCheck==\"\") ? \"if\" : staleCheck + \" else if\" ) + \" ((nDate-lDate)<\" + (chk.time * 1000) + \") {dCol='\" + chk.color + \"'}\"\t\t\n\t});\n\tif (staleCheck != \"\") tableDetails.rowFormatter = \"function(row){var nDate=new Date();var lDate=new Date(row.getData().lastUpdated);var dCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';\" + staleCheck + \";row.getElement().style.backgroundColor=dCol}\"\n}\n\nlet globalData = flow.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n    msg.payload = globalData.map( (ele) => {\n\t    return {id: tableDetails.lastID++,...ele}\n    });\n} else {\n\tmsg.payload = Object.keys(globalData).map( (ele) => {\n\t\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, \"lastUpdated\": globalData[ele].date, ...globalData[ele]}\n\t}); \n\tmsg.payload.sort( (a,b) => {\n\t\tif (a.date==b.date) return 0;\n\t\t//if ( ( (a.date) && (b.date) && a.date>b.date ) || (!b.date) ) return 1;\n\t\t//if ( ( (a.date) && (b.date) && b.date>a.date ) || (!a.date) ) return -1;\n\t\tif ( ( (a.date) && (b.date) && a.date>b.date ) || (!a.date) ) return -1;\n\t\tif ( ( (a.date) && (b.date) && b.date>a.date ) || (!b.date) ) return 1;\n\t\treturn 0;\n\t} );\n\n}\n\n\nflow.set(flowTableName,tableDetails);\n//node.warn([\"rowFormatter\",tableDetails.rowFormatter])\nheaderClickFunc = \"function(e,col){var tbs=col.getTable().getSorters();var srts = tbs.map( tb => {return {field:tb.field, dir:tb.dir}});console.log(srts);this.send({topic:'headerClicked',ui_control:{callback:'headerClicked',column:col.getField(), getSorters: srts },payload:col.getDefinition()})}\"\nmsg.ui_control =  {\n    \"tabulator\":{\n\t\t\"rowFormatter\": tableDetails.rowFormatter,\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, align: \"center\", headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"MAC\",\"field\":\"mac\",\"width\":120, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Type\",\"field\":\"type\",\"width\":80, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"IP\",\"field\":\"ip\",\"width\":120, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Hostname\",\"field\":\"hostname\",\"width\":160, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Dropped\",\"field\":\"dropped\",formatter:\"datetime\", formatterParams:{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputFormat:\"hh:mm\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvalidPlaceholder:\"\"},\"width\":160, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Last Seen\",\"field\":\"date\",formatter:\"datetime\", formatterParams:{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputFormat:\"DD/MM hh:mm:ss\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvalidPlaceholder:\"\"},\"width\":160, headerClick: headerClickFunc}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "f212bcc16ea68391"
            ]
        ]
    },
    {
        "id": "2bffa21fa273f607",
        "type": "ui_ui_control",
        "z": "c8dffe5.004eb",
        "name": "",
        "events": "all",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "f212bcc16ea68391"
            ]
        ]
    },
    {
        "id": "f212bcc16ea68391",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "c8dffe5.004eb",
        "name": "",
        "env": [],
        "x": 790,
        "y": 440,
        "wires": [
            [
                "8ea21a30621c5161",
                "fe87759102388299",
                "e41960a56a8ab3ca"
            ]
        ]
    },
    {
        "id": "8ea21a30621c5161",
        "type": "debug",
        "z": "c8dffe5.004eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "722372eb23286711",
        "type": "inject",
        "z": "c8dffe5.004eb",
        "name": "RefreshTable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "refreshDate",
                "v": "$fromMillis(msg.payload,'[M01]/[D01]/[Y0001] [h#1]:[m01]:[s01][P]')\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "RefreshTable",
        "payloadType": "date",
        "x": 290,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8ec17ae523040c31",
        "type": "batcher",
        "z": "c8dffe5.004eb",
        "name": "",
        "maxTopics": "3",
        "maxMessagesPerTopic": "100",
        "maxDelay": "5",
        "x": 820,
        "y": 320,
        "wires": [
            [
                "cd35a7c70ade434b",
                "5d3ec0bde2fc0b02"
            ]
        ]
    },
    {
        "id": "cd35a7c70ade434b",
        "type": "debug",
        "z": "c8dffe5.004eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "fe87759102388299",
        "type": "ui_text",
        "z": "c8dffe5.004eb",
        "group": "d96adc49a2b78b1f",
        "order": 1,
        "width": "16",
        "height": "1",
        "name": "",
        "label": "Refreshed",
        "format": "{{msg.refreshDate}}",
        "layout": "row-center",
        "x": 1030,
        "y": 480,
        "wires": []
    },
    {
        "id": "e41960a56a8ab3ca",
        "type": "ui_table",
        "z": "c8dffe5.004eb",
        "group": "d96adc49a2b78b1f",
        "name": "Network Device Table",
        "order": 2,
        "width": "16",
        "height": "20",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 980,
        "y": 380,
        "wires": [
            [
                "f212bcc16ea68391"
            ]
        ]
    },
    {
        "id": "bc6ed1e4ea4b2f7f",
        "type": "change",
        "z": "c8dffe5.004eb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload.deviceName",
                "pt": "msg",
                "to": "payload.hostname",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.type",
                "pt": "msg",
                "to": "IP",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.MAC",
                "pt": "msg",
                "to": "payload.mac",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "source",
                "pt": "msg",
                "to": "networkDevices",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "f34bfffc2b5fc5e6"
            ]
        ]
    },
    {
        "id": "a11271350b706ff7",
        "type": "switch",
        "z": "c8dffe5.004eb",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "edgeOS ",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "bc6ed1e4ea4b2f7f"
            ]
        ]
    },
    {
        "id": "f34bfffc2b5fc5e6",
        "type": "link out",
        "z": "c8dffe5.004eb",
        "name": "",
        "mode": "link",
        "links": [
            "b737c33811d31df3"
        ],
        "x": 495,
        "y": 360,
        "wires": []
    },
    {
        "id": "a06a3b74ee3d6090",
        "type": "json",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "717c26358442ccfd"
            ]
        ]
    },
    {
        "id": "717c26358442ccfd",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Extract Glow MQTT Data",
        "func": "//Extract Glow MQTT Data\n\nconst payload = msg.payload;\nlet wkDate = new Date(parseFloat(payload.gmtime*1000));\nlet newpayload = {};\nlet elec = {};\nlet gas = {}\nelec.consumption = parseInt(payload[\"elecMtr\"][\"0702\"][\"04\"][\"00\"], 16)\nelec.daily_consumption = parseInt(payload[\"elecMtr\"][\"0702\"][\"04\"][\"01\"], 16)\nelec.weekly_consumption = parseInt(payload[\"elecMtr\"][\"0702\"][\"04\"][\"30\"], 16)\nelec.monthly_consumption = parseInt(payload[\"elecMtr\"][\"0702\"][\"04\"][\"40\"], 16)\nelec.multiplier = parseInt(payload[\"elecMtr\"][\"0702\"][\"03\"][\"01\"], 16)\nelec.divisor = parseInt(payload[\"elecMtr\"][\"0702\"][\"03\"][\"02\"], 16)\nelec.meter = parseInt(payload[\"elecMtr\"][\"0702\"][\"00\"][\"00\"], 16)\ngas.daily_consumption = parseInt(payload[\"gasMtr\"][\"0702\"][\"0C\"][\"01\"], 16)\ngas.weekly_consumption = parseInt(payload[\"gasMtr\"][\"0702\"][\"0C\"][\"30\"], 16)\ngas.monthly_consumption = parseInt(payload[\"gasMtr\"][\"0702\"][\"0C\"][\"40\"], 16)\ngas.multiplier = parseInt(payload[\"gasMtr\"][\"0702\"][\"03\"][\"01\"], 16)\ngas.divisor = parseInt(payload[\"gasMtr\"][\"0702\"][\"03\"][\"02\"], 16)\ngas.meter = parseInt(payload[\"gasMtr\"][\"0702\"][\"00\"][\"00\"], 16)\n\nelec.daily_consumption = elec.daily_consumption * elec.multiplier / elec.divisor\nelec.weekly_consumption = elec.weekly_consumption * elec.multiplier / elec.divisor\nelec.monthly_consumption = elec.monthly_consumption * elec.multiplier / elec.divisor\nelec.meter = elec.meter * elec.multiplier / elec.divisor\ngas.daily_consumption = gas.daily_consumption * gas.multiplier / gas.divisor\ngas.weekly_consumption = gas.weekly_consumption * gas.multiplier / gas.divisor\ngas.monthly_consumption = gas.monthly_consumption * gas.multiplier / gas.divisor\ngas.meter = gas.meter * gas.multiplier / gas.divisor\nmsg.payload = {};\nmsg.payload.elec = elec;\nmsg.payload.gas = gas;\nmsg.payload.gmtime=wkDate;\nmsg.payload.timeText = wkDate.toLocaleTimeString();\nmsg.payload.dateText = wkDate.toLocaleDateString();\nif (!flow.get(\"GlowCurrentReadings\")) flow.set(\"GlowGasReading\",{gasMeter:gas.meter,elecMeter:elec.meter, time:Date.now(), gmTime:wkDate});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started. \nflow.set(\"GlowGasReading\",null);",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "85beddb7bc75826d"
            ]
        ]
    },
    {
        "id": "85beddb7bc75826d",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Generic Saver",
        "func": "//Generic Saver \nlet gDebug = global.get(\"gDebug\");\nfunction getData(name, scope=\"global\") {\n\treturn ( (scope == \"global\") ? global.get(name) : flow.get(name) );\n}\nfunction setData(name,value, scope=\"global\") {\n\tif (scope==\"global\") {\n\t\tglobal.set(name,value);\n\t} else {\n\t\tflow.set(name,value);\n\t}\n}\nconst fs = global.get(\"fs\");\nconst path = global.get(\"path\");\nlet statusMsg = null;\nlet Message_Saves_Def = flow.get(\"Message_Saves_Def\");\nif (msg.topic == \"Message_Saves_Definitions\") {\n    if (!Message_Saves_Def) Message_Saves_Def = {};\n\tnode.warn([ \"[\" + node.name + \"] Configuring Definitions\", msg.payload])\n\tObject.keys(msg.payload).forEach( (key) => {\n\t\tif (Message_Saves_Def[key] != msg.payload[key]) node.warn( \"[\" + node.name + \"]  Setting \" + key + \" from \" + Message_Saves_Def[key] + \" to \" + msg.payload[key]);\n\t\tMessage_Saves_Def[key] = msg.payload[key];\n\t});\n\tflow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Save_On\") {\n\tnode.warn([ \"[\" + node.name + \"] Turning Saves On to \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\t\t\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t\t\t\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\tMessage_Saves_Def.doSave = true;\n    flow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Save_Off\") {\n\tnode.warn([ \"[\" + node.name + \"] Turning Saves Off for \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\t\t\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t\t\t\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\n\tMessage_Saves_Def.doSave = false;\n    flow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Rotate_Now\") {\n\tnode.warn([ \"[\" + node.name + \"] Rotating next message \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\t\t\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t\t\t\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\n\tMessage_Saves_Def.doRotate = true;\n    flow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\n\nif (!Message_Saves_Def) {\n\tnode.error( \"[\" + node.name + \"] Message_Saves_Def not set up\");\n\treturn [msg, null];\n}\nlet data = getData(Message_Saves_Def.variableName,Message_Saves_Def.scope);\nif (!data) data = [];\nif (Message_Saves_Def.doSave) {\n\tlet msg2 = null;\n\tlet fileName = null;\n\tlet rotateOn = 0;\n\tif (Message_Saves_Def.saveToFile) fileName = Message_Saves_Def.saveToFile;\n\tif (Message_Saves_Def.rotateOn) rotateOn = Message_Saves_Def.rotateOn;\n\n\tdata.push(msg);\n\tsetData(Message_Saves_Def.variableName, data, Message_Saves_Def.scope);\n\tstatusMsg = {fill:\"green\",shape:\"ring\",text: \"Saving msgs to \" + Message_Saves_Def.scope + \n\t\t\t\t\t\t\".\" + Message_Saves_Def.variableName + \" \" + data.length + \" currently saved\"};\n\tif ( (rotateOn!=0) && ( (data.length >= rotateOn) || Message_Saves_Def.doRotate ) ) {\n\t\tlet oldMessages = getData(\"old_\" + Message_Saves_Def.variableName, Message_Saves_Def.scope);\n\t\tif ( (oldMessages) && (oldMessages.length>0) ) {\n\t\t\tlet cnt = 1;\n\t\t\tlet varName = \"old_\" + Message_Saves_Def.variableName + \"_\" + cnt;\n\t\t\twhile  (getData(varName, Message_Saves_Def.scope)) {\n\t\t\t\tcnt++;\n\t\t\t\tvarName = \"old_\" + Message_Saves_Def.variableName + \"_\" + cnt;\n\t\t\t}\n\t\t\tnode.warn( \"[\" + node.name + \"] Copying old_\" + Message_Saves_Def.variableName + \" to \" + varName);\n\t\t\tsetData(varName, oldMessages, Message_Saves_Def.scope);\n\t\t}\n\t\tnode.warn( \"[\" + node.name + \"] Saving \" + Message_Saves_Def.variableName + \" to \" + \"old_\" + Message_Saves_Def.variableName);\n\t\tsetData(\"old_\" + Message_Saves_Def.variableName, data, Message_Saves_Def.scope);\n\t\tsetData(Message_Saves_Def.variableName, [], Message_Saves_Def.scope);\n\t\tnode.warn( \"[\" + node.name + \"] Cleared \" + Message_Saves_Def.variableName);\n\t\tif (fileName) {\n\t\t\tlet baseName = path.join(path.dirname(fileName),path.basename(fileName,path.extname(fileName)))\n\t\t\tnode.warn( [ \"[\" + node.name + \"] \" + \"[Info] \" + \"Filename is \" + fileName]);\n\t\t\tcnt = 0;\n\t\t\tlet rotator = \"_\" + (++cnt) + path.extname(fileName);\n\t\t\twhile (fs.existsSync(baseName + rotator)) {\n\t\t\t\trotator = \"_\" + (++cnt) + path.extname(fileName);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (fs.existsSync(fileName)) {\n\t\t\t\t\tnode.warn( [ \"[\" + node.name + \"] \" + \"[Info] \", \n\t\t\t\t\t\t\t\"Output File old file renamed from  \" + fileName + \"to \" + baseName + rotator ]);\n\t\t\t\t\tfs.renameSync(fileName,baseName + rotator);\n\t\t\t\t}\n\t\t\t} catch(err) {\n\t\t\t\tnode.warn( [err, \"[\" + node.name + \"] \" + \"[Info] \", \"Output File does not exist \" + fileName ]);\n\t\t\t}\n\t\t\tmsg2 = {topic:\"\", filename:fileName ,payload:oldMessages};\n\t\t}\n\t}\n\tnode.status(statusMsg);\n\tif (Message_Saves_Def.doRotate) {\n\t\tMessage_Saves_Def.doRotate = false;\n\t\tflow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\t}\n\treturn [msg, msg2]\n} else {\n\tstatusMsg = {fill:\"red\",shape:\"dot\",text: \"Saving Off to \" + Message_Saves_Def.scope + \n\t\t\t\t\t\t\".\" + Message_Saves_Def.variableName + \" \" + data.length + \" currently saved\"};\n}\nnode.status(statusMsg);\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 300,
        "wires": [
            [
                "ae624f5c1c96cd8b"
            ],
            [
                "afb9aa8d61217773"
            ]
        ]
    },
    {
        "id": "ae624f5c1c96cd8b",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Derive 30 Min Gas",
        "func": "//Derive 30 Min Glow\nlet gDebug = global.get(\"gDebug\");\n//gDebug = true;\n//const ReadingsVariable = \"TestReadings\";\nconst ReadingsVariable = \"GlowReadings\";\nlet GlowReadings = flow.get(ReadingsVariable);\nconst gasConversion = (global.get(\"calorificValue\") * 1.02264 ) / 3.6;\n\nif (!GlowReadings) {\n\tGlowReadings = {\n\t\t\t\tminutes: { max:70, entries: [{time:rndTime(msg.payload.gmtime,60000),cnt: 0}] },\n\t\t\t\thours: { max:30, entries: [{time:rndTime(msg.payload.gmtime,60000*60),cnt: 0, gasMeter: 0, elecMeter:0 }] },\n\t\t\t\tdays: { max:8,  entries: [{time:rndTime(msg.payload.gmtime,60000 * 60 * 24),cnt: 0, gasMeter: 0, elecMeter:0 }] }\n\t\t\t\t\t}\n}\nfunction rndTime(time, ms) {\n\treturn new Date(Math.floor(time/ms) * ms);\n}\nfunction addEntry(newObj, type = \"minutes\") {\n\tlet ms = 60000;\n\tif (type == \"minutes\") ms = 60000;\n\tif (type == \"hours\") ms = 60000 * 60;\n\tif (type == \"days\") ms = 60000 * 60 * 24;\n\tnewObj.time = rndTime(newObj.gmtime,ms);\n\tif (gDebug) node.warn([type + \" On entry to addEntry \",GlowReadings[type],newObj])\n\tlet unitsSinceStart = Math.floor( (newObj.time - GlowReadings[type].entries[0].time)/ms );\n\tif ( unitsSinceStart < 0 ) {\n\t\tnode.error([\"[\" + node.name + \"][Error]\\t \" + \" unitsSinceStart negative \" + unitsSinceStart + \" No further processsing\", GlowReadings[type].entries[0],newObj]);\n\t\treturn null;\n\t}\n\tif (gDebug) node.warn([type + \" Starting to add entry units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\twhile ((unitsSinceStart) && unitsSinceStart > GlowReadings[type].max) {\n\t\tGlowReadings[type].entries.shift();\n\t\tif (!GlowReadings[type].entries[0]) {\n\t\t\tnode.warn([type + \" big gap in messages. Setting entry 0 to this object\", newObj, GlowReadings[type].entries[0],msg]);\n\t\t\tGlowReadings[type].entries[0] = newObj;\n\t\t}\n\t\tif (GlowReadings[type].entries[0].time) {\n\t\t\tunitsSinceStart = (GlowReadings[type].entries[0].time) ?\n\t\t\t\t\t\t\tMath.floor((newObj.time - GlowReadings[type].entries[0].time)/ms) :\n\t\t\t\t\t\t\tGlowReadings[type].max + 1;\n\t\t} else {\n\t\t\tnode.error([type + \" time is not set on entry 0 units=\"+unitsSinceStart ,GlowReadings[type].entries[0],GlowReadings[type],newObj])\n\t\t\tunitsSinceStart = (GlowReadings[type].entries[0].time) ?\n\t\t\t\t\t\t\tMath.floor((newObj.time - GlowReadings[type].entries[0].time)/ms) :\n\t\t\t\t\t\t\t0;\n\t\t}\n\t}\n\tif (gDebug) node.warn([type + \" Adding entry units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\tif ( GlowReadings[type].entries[unitsSinceStart] ) {\n\t\tlet cnt = GlowReadings[type].entries[unitsSinceStart].cnt;\n\t\tif (cnt==0) {\n\t\t\tGlowReadings[type].entries[unitsSinceStart].gasMeter = newObj.gasMeter;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].elecMeter = newObj.elecMeter;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].gmtime = newObj.gmtime;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].time = newObj.time;\n\t\t} else {\n\t\t\tGlowReadings[type].entries[unitsSinceStart].gasMeter = Math.round( (((GlowReadings[type].entries[unitsSinceStart].gasMeter * cnt) + newObj.gasMeter) / (cnt + 1)) * 10000 )/10000;\n\t\t\tGlowReadings[type].entries[unitsSinceStart].elecMeter = Math.round( (((GlowReadings[type].entries[unitsSinceStart].elecMeter * cnt) + newObj.elecMeter) / (cnt + 1)) * 10000 )/10000;\n\t\t}\n\t\tGlowReadings[type].entries[unitsSinceStart].cnt = GlowReadings[type].entries[unitsSinceStart].cnt + 1;\t\n\t} else {\n\t\tGlowReadings[type].entries[unitsSinceStart] = newObj;\n\t}\n\tif (unitsSinceStart > 0) {\n\t\tcnt = unitsSinceStart-1;\n\t\tif (!GlowReadings[type].entries[cnt]) node.warn([type + \" prev entry blank roll back units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\t\twhile (!GlowReadings[type].entries[cnt] && cnt>=0) {\n\t\t\tcnt--;\n\t\t}\n\t\tif (gDebug) if (cnt!= unitsSinceStart-1) node.warn([type + \" Rolling forward after cnt=\" + cnt, GlowReadings[type].entries[cnt],GlowReadings[type],newObj])\n\t\tfor (let ind = cnt+1; ind < unitsSinceStart;ind++){\n\t\t\tif (!GlowReadings[type].entries[ind]) GlowReadings[type].entries[ind] = {};\n\t\t\tGlowReadings[type].entries[ind].gasMeter = GlowReadings[type].entries[cnt].gasMeter;\n\t\t\tGlowReadings[type].entries[ind].elecMeter = GlowReadings[type].entries[cnt].elecMeter;\n\t\t\tGlowReadings[type].entries[ind].cnt = 0;\n\t\t\tlet wkDate = new Date(GlowReadings[type].entries[cnt].time);\n\t\t\twkDate.setTime(wkDate.getTime() + ((ind-cnt) * ms));\n\t\t\tGlowReadings[type].entries[ind].time = wkDate;\n\t\t\tGlowReadings[type].entries[ind].gmtime = wkDate\n\t\t\t//GlowReadings[type].entries[ind].time = new Date().setTime(wkDate.getTime() + ((ind-cnt) * 60 * 1000))\n\t\t\t//GlowReadings[type].entries[ind].gmtime = wkDate.setTime(wkDate.getTime() + ((ind-cnt) * 60 * 1000))\n\t\t\t//GlowReadings[type].entries[ind].gmtime = new Date().setTime(wkDate.getTime() + ((ind-cnt) * 60 * 1000))\n\t\t}\n\t\tif (gDebug) node.warn([type + \" About to set new obj units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\t\tif ( ( GlowReadings[type].entries[unitsSinceStart].gasMeter - GlowReadings[type].entries[unitsSinceStart-1].gasMeter < 0 ) || \n\t\t\t( GlowReadings[type].entries[unitsSinceStart].elecMeter - GlowReadings[type].entries[unitsSinceStart-1].elecMeter < 0 )) {\n\t\t\tnode.error([\"difference is less than 0 this ind=\" + unitsSinceStart,GlowReadings[type].entries[unitsSinceStart],GlowReadings[type].entries[unitsSinceStart-1]]);\n\t\t}\n\t}\n\tif (gDebug) node.warn([type + \" Added entry units=\" + unitsSinceStart, GlowReadings[type].entries[unitsSinceStart],GlowReadings[type],newObj])\n\treturn unitsSinceStart;\n}\nlet  newEntry = {gmtime:msg.payload.gmtime , gasMeter: msg.payload.gas.meter, elecMeter: msg.payload.elec.meter, cnt: 1}\nif (gDebug) node.warn([\"minutes\" + \" Calling addEntry \",GlowReadings[\"minutes\"],newEntry])\nlet ind = addEntry(newEntry,\"minutes\");\nif (ind == null) {\n\treturn null, null\n}\nif (msg.payload.gmtime.getMinutes() == 0) addEntry(newEntry,\"hours\");\nif ( (msg.payload.gmtime.getMinutes() == 0) && (msg.payload.gmtime.getHours() == 0) ) addEntry(newEntry,\"days\");\nlet glowCsvMsg = null;\nlet endEntry = null;\nlet startEntry = null;\nif ( ( (msg.payload.gmtime.getMinutes() == 1) || (msg.payload.gmtime.getMinutes() == 31) )  && (ind>30) ){\n\tendEntry = GlowReadings.minutes.entries[ind-1];\n\tstartEntry = GlowReadings.minutes.entries[ind-31];\n\tif (gDebug) node.warn([\" 30 min msg \" + ind + \" time=\" + msg.payload.gmtime.toLocaleTimeString(),endEntry,startEntry]);\n\tif (startEntry) {\n\t\tif (!GlowReadings.minutes.entries[ind-1].done) {\n\t\t\tGlowReadings.minutes.entries[ind-1].done = true;\n\t\t\tglowCsvMsg = {topic:\"GasHistory\",\n\t\t\t\t\t\tfilename: \"/devices/gas30s.csv\",\n\t\t\t\t\t\tpayload:{type: \"update\", \n\t\t\t\t\t\t\tlastGasMeter: startEntry.gasMeter,\n\t\t\t\t\t\t\tlastElecMeter: startEntry.elecMeter,\n\t\t\t\t\t\t\tlastDate: startEntry.gmtime.toLocaleDateString(),\n\t\t\t\t\t\t\tlastTime: startEntry.gmtime.toLocaleTimeString(),\n\t\t\t\t\t\t\tgasMeter: endEntry.gasMeter,\n\t\t\t\t\t\t\telecMeter: endEntry.elecMeter,\n\t\t\t\t\t\t\tdate: endEntry.gmtime.toLocaleDateString(),\n\t\t\t\t\t\t\ttime: endEntry.gmtime.toLocaleTimeString()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t}\n\t}\n}\n//flow.set(\"GlowReadings\",GlowReadings)\nflow.set(ReadingsVariable,GlowReadings)\nendEntry = GlowReadings.minutes.entries[ind];\nstartEntry = (ind>30) ? GlowReadings.minutes.entries[ind-30] : GlowReadings.minutes.entries[0];\nif ( (endEntry.gasMeter - startEntry.gasMeter <0 ) || (endEntry.elecMeter - startEntry.elecMeter <0 )) {\n\tnode.error([\" glow30Msg difference is less than 0 this ind=\" + ind,endEntry,startEntry]);\n}\nconst glow30Msg = {topic:\"GasInLast30\",\n\t\t\tpayload:{type: \"update\", \n\t\t\t\tlastGasMeter: Math.round( startEntry.gasMeter * gasConversion * 100 )/100,\n\t\t\t\tlastElecMeter: Math.round( startEntry.elecMeter * 100 )/100,\n\t\t\t\tlastDate: startEntry.gmtime.toLocaleDateString(),\n\t\t\t\tlastTime: startEntry.gmtime.toLocaleTimeString(),\n\t\t\t\tgasMeter: Math.round( endEntry.gasMeter  * gasConversion * 100 )/100,\n\t\t\t\telecMeter: Math.round( endEntry.elecMeter * 100 )/100,\n\t\t\t\tdate: endEntry.gmtime.toLocaleDateString(),\n\t\t\t\ttime: endEntry.gmtime.toLocaleTimeString(),\n\t\t\t\tgasDiff: Math.round( (endEntry.gasMeter - startEntry.gasMeter) * gasConversion * 1000 )/1000,\n\t\t\t\telecDiff: Math.round( (endEntry.elecMeter - startEntry.elecMeter) * 1000 )/1000,\n\t\t\t\tminsDiff: Math.round( (endEntry.gmtime - startEntry.gmtime)/60000),\n\t\t\t\tleng: GlowReadings.minutes.entries.length\n\t\t\t}\n\t\t}\nendEntry = GlowReadings.minutes.entries[ind];\nstartEntry = (ind>60) ? GlowReadings.minutes.entries[ind-60] : GlowReadings.minutes.entries[0];\nif ( (endEntry.gasMeter - startEntry.gasMeter <0 ) || (endEntry.elecMeter - startEntry.elecMeter <0 )) {\n\tnode.error([\" glow60Msg difference is less than 0 this ind=\" + ind,endEntry,startEntry]);\n}\nconst glow60Msg = {topic:\"GasInLast60\",\n\t\t\tpayload:{type: \"update\", \n\t\t\t\tlastGasMeter: Math.round( startEntry.gasMeter * gasConversion * 100 )/100,\n\t\t\t\tlastElecMeter: Math.round( startEntry.elecMeter * 100 )/100,\n\t\t\t\tlastDate: startEntry.gmtime.toLocaleDateString(),\n\t\t\t\tlastTime: startEntry.gmtime.toLocaleTimeString(),\n\t\t\t\tgasMeter: Math.round( endEntry.gasMeter  * gasConversion * 100 )/100,\n\t\t\t\telecMeter: Math.round( endEntry.elecMeter * 100 )/100,\n\t\t\t\tdate: endEntry.gmtime.toLocaleDateString(),\n\t\t\t\ttime: endEntry.gmtime.toLocaleTimeString(),\n\t\t\t\tgasDiff: Math.round( (endEntry.gasMeter - startEntry.gasMeter) * gasConversion * 1000 )/1000,\n\t\t\t\telecDiff: Math.round( (endEntry.elecMeter - startEntry.elecMeter) * 1000 )/1000,\n\t\t\t\tminsDiff: Math.round( (endEntry.gmtime - startEntry.gmtime)/60000),\n\t\t\t\tleng: GlowReadings.minutes.entries.length\n\t\t\t}\n\t\t}\nreturn [glow30Msg, glow60Msg, glowCsvMsg];\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n//flow.set(\"GasReadings\",null)",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 240,
        "wires": [
            [
                "22dc687c63780af3",
                "52e2f7b9024d8cdf"
            ],
            [
                "22dc687c63780af3",
                "485fc381ed0a919c",
                "d026efeadb3a1a50",
                "107a67688432168c"
            ],
            [
                "c8e38d4b330a07e5"
            ]
        ]
    },
    {
        "id": "c8e38d4b330a07e5",
        "type": "csv",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "lastDate,lastTime,lastGasMeter,lastElecMeter,date,time,gasMeter,",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1090,
        "y": 280,
        "wires": [
            [
                "9894d22a0a468601"
            ]
        ]
    },
    {
        "id": "9894d22a0a468601",
        "type": "file",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1240,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "afb9aa8d61217773",
        "type": "json",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 360,
        "wires": [
            [
                "dee7b20dfe5f1756"
            ]
        ]
    },
    {
        "id": "dee7b20dfe5f1756",
        "type": "file",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1060,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e9ee0d2b14b544b9",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Full Def",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Definitions",
        "payload": "{\"saveToFile\":\"/devices/savedGlowMessages.json\",\"rotateOn\":1000,\"variableName\":\"savedGlowMessages\",\"scope\":\"flow\"}",
        "payloadType": "json",
        "x": 490,
        "y": 160,
        "wires": [
            [
                "85beddb7bc75826d"
            ]
        ]
    },
    {
        "id": "ecde024f978b65dd",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Save On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Save_On",
        "payloadType": "date",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "85beddb7bc75826d"
            ]
        ]
    },
    {
        "id": "9eaef2a87f2f255d",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Save Off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Save_Off",
        "payloadType": "date",
        "x": 660,
        "y": 200,
        "wires": [
            [
                "85beddb7bc75826d"
            ]
        ]
    },
    {
        "id": "334fd87fe8e8a0a0",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Rotate Now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Rotate_Now",
        "payloadType": "date",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "85beddb7bc75826d"
            ]
        ]
    },
    {
        "id": "381912180ae71a15",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Clear GlowReadings",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1110,
        "y": 60,
        "wires": [
            [
                "8eaa28f5ee551492"
            ]
        ]
    },
    {
        "id": "e6898d2059376a2a",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Set Calorific Value",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "calorificValue",
                "v": "39.48",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "f0788c094a507c50"
            ]
        ]
    },
    {
        "id": "f0788c094a507c50",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Store Global Calorific Value",
        "func": "let calorificValue = global.get(\"calorificValue\");\nif (msg.calorificValue) calorificValue = msg.calorificValue;\nglobal.set(\"calorificValue\", calorificValue);\nstatusMsg = {fill:\"green\",shape:\"ring\",text: \"calorificValue is \" + calorificValue};\nnode.status(statusMsg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8eaa28f5ee551492",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Init Readings",
        "func": "\nconst ReadingsVariable = \"GlowReadings\";\nlet GlowReadings = flow.get(ReadingsVariable) \n//const ReadingsVariable = \"GlowReadings\";\nif (GlowReadings) GlowReadings = null;\nflow.set(ReadingsVariable,GlowReadings);\nnode.warn([\"[\" + node.name + \"][Info]\\t \" + \" Readings inited \" + ReadingsVariable]);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "22dc687c63780af3",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "func": "let msgs1 = [];\nlet msgs2 = [];\nlet msgs3 = [];\nif (msg.topic == \"GasInLast30\") {\n\tmsgs2.push({topic: \"Gas\", payload: msg.payload.gasMeter});\n\tmsgs3.push({topic: \"Elec\", payload: msg.payload.elecMeter});\n    msgs1.push({topic: \"Gas/30\", payload: msg.payload.gasDiff});\n\tmsgs1.push({topic: \"Elec/30\", payload: msg.payload.elecDiff});\n\treturn [msgs1, msgs2, msgs3];\n} else if (msg.topic == \"GasInLast60\") {\n    msgs1.push({topic: \"Gas/hr\", payload: msg.payload.gasDiff});\n\tmsgs1.push({topic: \"Elec/hr\", payload: msg.payload.elecDiff});\n\treturn [msgs1, msgs2, msgs3];\n}\nreturn null;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "46397b904a182090"
            ],
            [
                "d0960ce240f4b1fe"
            ],
            [
                "8a20ab964fe7fed7"
            ]
        ]
    },
    {
        "id": "485fc381ed0a919c",
        "type": "ui_gauge",
        "z": "fd2ee22c0f5f3787",
        "name": "Gas/hr",
        "group": "c97e9bb1ac824975",
        "order": 0,
        "width": "5",
        "height": "5",
        "gtype": "gage",
        "title": "Gas/hr {{msg.timeText}}",
        "label": "kWh",
        "format": "{{msg.payload.gasDiff}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1260,
        "y": 160,
        "wires": []
    },
    {
        "id": "d026efeadb3a1a50",
        "type": "ui_gauge",
        "z": "fd2ee22c0f5f3787",
        "name": "Elec/hr",
        "group": "c97e9bb1ac824975",
        "order": 0,
        "width": "5",
        "height": "5",
        "gtype": "gage",
        "title": "Elec/hr {{msg.timeText}}",
        "label": "kWh",
        "format": "{{msg.payload.elecDiff}}",
        "min": 0,
        "max": "2",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1280,
        "y": 200,
        "wires": []
    },
    {
        "id": "1941b202d094d988",
        "type": "link in",
        "z": "fd2ee22c0f5f3787",
        "name": "30 Min Displays",
        "links": [
            "52e2f7b9024d8cdf"
        ],
        "x": 1535,
        "y": 260,
        "wires": [
            [
                "f602192a0b9be3f3",
                "2e5a2b150c586e39",
                "f7f59ed364caa824",
                "31812effe258bd7d",
                "1181b6fc3e421815",
                "dc23fba34379255a",
                "6c611663a894a996",
                "d2960f816c1b0fc3",
                "6bde08656d371503",
                "d4958946e03aeeac"
            ]
        ]
    },
    {
        "id": "6bde08656d371503",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Last Time",
        "format": "{{msg.payload.lastTime}}",
        "layout": "row-left",
        "x": 1790,
        "y": 440,
        "wires": []
    },
    {
        "id": "d4958946e03aeeac",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 2,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Time",
        "format": "{{msg.payload.time}}",
        "layout": "row-left",
        "x": 1780,
        "y": 480,
        "wires": []
    },
    {
        "id": "2e5a2b150c586e39",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 7,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Last Elec Usage",
        "format": "{{msg.payload.lastElecMeter}}",
        "layout": "row-left",
        "x": 1810,
        "y": 160,
        "wires": []
    },
    {
        "id": "31812effe258bd7d",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 11,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Gas Usage",
        "format": "{{msg.payload.gasMeter}}",
        "layout": "row-left",
        "x": 1800,
        "y": 240,
        "wires": []
    },
    {
        "id": "dc23fba34379255a",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 12,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Gas Diff",
        "format": "{{msg.payload.gasDiff}}",
        "layout": "row-left",
        "x": 1790,
        "y": 320,
        "wires": []
    },
    {
        "id": "d2960f816c1b0fc3",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 13,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "# of Entries",
        "format": "{{msg.payload.leng}}",
        "layout": "row-left",
        "x": 1800,
        "y": 400,
        "wires": []
    },
    {
        "id": "6c611663a894a996",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 14,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Mins Diff",
        "format": "{{msg.payload.minsDiff}}",
        "layout": "row-left",
        "x": 1790,
        "y": 360,
        "wires": []
    },
    {
        "id": "f7f59ed364caa824",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 9,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Elec Diff",
        "format": "{{msg.payload.elecDiff}}",
        "layout": "row-left",
        "x": 1790,
        "y": 200,
        "wires": []
    },
    {
        "id": "f602192a0b9be3f3",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 8,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Elec Usage",
        "format": "{{msg.payload.elecMeter}}",
        "layout": "row-left",
        "x": 1800,
        "y": 120,
        "wires": []
    },
    {
        "id": "1181b6fc3e421815",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "0717bf37e43f2199",
        "group": "1d04a057fbe64e1b",
        "order": 10,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Last Gas Usage",
        "format": "{{msg.payload.lastGasMeter}}",
        "layout": "row-left",
        "x": 1810,
        "y": 280,
        "wires": []
    },
    {
        "id": "008df86dcc688f2f",
        "type": "link in",
        "z": "fd2ee22c0f5f3787",
        "name": "1 hr Displays",
        "links": [
            "107a67688432168c"
        ],
        "x": 1535,
        "y": 820,
        "wires": [
            [
                "c3b243ec7cf9d50e",
                "cdb375dedb047601",
                "5866aa4f7b6e79d4",
                "3fa5e3311c28c5fa",
                "d030214a238bb64e",
                "9f5afe294dac58dd",
                "b36326180ee36474",
                "8b94da1b5fd03d58",
                "3acd8964e85c741c",
                "4791f399fa1319b2"
            ]
        ]
    },
    {
        "id": "3acd8964e85c741c",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Last Time",
        "format": "{{msg.payload.lastTime}}",
        "layout": "row-left",
        "x": 1790,
        "y": 1000,
        "wires": []
    },
    {
        "id": "4791f399fa1319b2",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 2,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Time",
        "format": "{{msg.payload.time}}",
        "layout": "row-left",
        "x": 1780,
        "y": 1040,
        "wires": []
    },
    {
        "id": "cdb375dedb047601",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 7,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Last Elec Usage",
        "format": "{{msg.payload.lastElecMeter}}",
        "layout": "row-left",
        "x": 1810,
        "y": 720,
        "wires": []
    },
    {
        "id": "3fa5e3311c28c5fa",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 11,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Gas Usage",
        "format": "{{msg.payload.gasMeter}}",
        "layout": "row-left",
        "x": 1800,
        "y": 800,
        "wires": []
    },
    {
        "id": "9f5afe294dac58dd",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 12,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Gas Diff",
        "format": "{{msg.payload.gasDiff}}",
        "layout": "row-left",
        "x": 1790,
        "y": 880,
        "wires": []
    },
    {
        "id": "8b94da1b5fd03d58",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 13,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "# of Entries",
        "format": "{{msg.payload.leng}}",
        "layout": "row-left",
        "x": 1800,
        "y": 960,
        "wires": []
    },
    {
        "id": "b36326180ee36474",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 14,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Mins Diff",
        "format": "{{msg.payload.minsDiff}}",
        "layout": "row-left",
        "x": 1790,
        "y": 920,
        "wires": []
    },
    {
        "id": "5866aa4f7b6e79d4",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 9,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Elec Diff",
        "format": "{{msg.payload.elecDiff}}",
        "layout": "row-left",
        "x": 1790,
        "y": 760,
        "wires": []
    },
    {
        "id": "c3b243ec7cf9d50e",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 8,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Elec Usage",
        "format": "{{msg.payload.elecMeter}}",
        "layout": "row-left",
        "x": 1800,
        "y": 680,
        "wires": []
    },
    {
        "id": "d030214a238bb64e",
        "type": "ui_text",
        "z": "fd2ee22c0f5f3787",
        "g": "4d3a22ee044f7563",
        "group": "f7c9bcba0870aa94",
        "order": 10,
        "width": "5",
        "height": "1",
        "name": "",
        "label": "Last Gas Usage",
        "format": "{{msg.payload.lastGasMeter}}",
        "layout": "row-left",
        "x": 1810,
        "y": 840,
        "wires": []
    },
    {
        "id": "6f22759a6069ce55",
        "type": "ui_template",
        "z": "fd2ee22c0f5f3787",
        "group": "1d04a057fbe64e1b",
        "name": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\n#Glow_Market_Last_30_mins_cards > md-card.nr-dashboard-text p.value {\n    color: Yellow;\n}\n#Glow_Market_Last_30_mins_cards  > md-card.nr-dashboard-text p {\n    font-size: 120%;\n}\n#Glow_Market_Last_Hour_cards > md-card.nr-dashboard-text p.value {\n    color: Yellow;\n}\n#Glow_Market_Last_Hour_cards  > md-card.nr-dashboard-text p {\n    font-size: 120%;\n}\n.nr-dashboard-theme .nr-dashboard-form form md-input-container label {\n    color: Yellow;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "x": 1800,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "52e2f7b9024d8cdf",
        "type": "link out",
        "z": "fd2ee22c0f5f3787",
        "name": "Derive 30 Mins",
        "mode": "link",
        "links": [
            "1941b202d094d988"
        ],
        "x": 1015,
        "y": 160,
        "wires": []
    },
    {
        "id": "107a67688432168c",
        "type": "link out",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "mode": "link",
        "links": [
            "008df86dcc688f2f"
        ],
        "x": 975,
        "y": 300,
        "wires": []
    },
    {
        "id": "6c7a69b22ac995f3",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "init",
        "payload": "reset",
        "payloadType": "str",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "8f685b8b0482f751",
                "b74da9628544de9f",
                "aa611bfd6822d543"
            ]
        ]
    },
    {
        "id": "8f685b8b0482f751",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Gas MinsTable Prep (Non Standard)",
        "func": "//Gas MinsTable Prep (Non Standard)\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"GlowDerivedData\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"GlowReadings\",\n    tableDatabaseName: \"GlowReadings\",\n    tableJsonName: \"/devices/GlowReadings.json\",\n    tableType: \"array\",\n    tableKeys: [\"time\"],\n    lastID: null,\n    tableTab: \"Home for smarts\",\n    tableName: flowTableName,\n\t\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\n\nlet globalData = flow.get(tableDetails.tableDatabaseName).minutes.entries;\n\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\nconst gasConversion = (global.get(\"calorificValue\") * 1.02264 ) / 3.6;\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n\t/*\n    msg.payload = globalData.map( (ele,ind, eles) => {\n\t    return {\n\t\t\tid: tableDetails.lastID++,\n\t\t\tmins:((ele.time - eles[0].time)/60000),\n\t\t\tgasKw: Math.round(ele.gasMeter * gasConversion * 1000) / 1000,\n\t\t\tgasDiff: ( (ind>29) ? Math.round( (ele.gasMeter - eles[ind-30].gasMeter) * gasConversion * 1000 ) / 1000 : null ),\n\t\t\telecDiff: ( (ind>29) ? Math.round( (ele.elecMeter - eles[ind-30].elecMeter) * 1000 ) / 1000 : null ),\n\t\t\ttimeString: ele.time.toTimeString(),\n\t\t\tdateString: ele.time.toDateString(),\n\t\t\t...ele}\n    });\n\t*/\n\tmsg.payload = [];\n\tglobalData.forEach( (ele,ind,eles) => {\n\t\tmsg.payload.unshift({\n\t\t\tid: tableDetails.lastID++,\n\t\t\tmins:((ele.time - eles[0].time)/60000),\n\t\t\tgasKw: Math.round(ele.gasMeter * gasConversion * 1000) / 1000,\n\t\t\tgasDiff: ( (ind>29) ? Math.round( (ele.gasMeter - eles[ind-30].gasMeter) * gasConversion * 1000 ) / 1000 : null ),\n\t\t\telecDiff: ( (ind>29) ? Math.round( (ele.elecMeter - eles[ind-30].elecMeter) * 1000 ) / 1000 : null ),\n\t\t\ttimeString: ele.time.toLocaleTimeString(),\n\t\t\tdateString: ele.time.toDateString(),\n\t\t\t...ele});\n\t});\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\nflow.set(flowTableName,tableDetails);\n\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"rowFormatter\": \"function(row){var data = row.getData();var nowDate=new Date();var rowDate=new Date((!data.gmtime)?data.time:data.gmtime);var defCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';console.log('diff='+(nowDate - rowDate)+' pos='+row.getPosition(true));if ((nowDate - rowDate)< 60000){row.getElement().style.backgroundColor = '#A6A6DF'}else {row.getElement().style.backgroundColor = defCol}}\",\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t\t{\"title\":\"Date\",\"field\":\"dateString\",\"width\":125, align:\"center\"},\n\t\t\t\t{\"title\":\"Time\",\"field\":\"timeString\",\"width\":100, align:\"center\"},\n\t\t\t\t{\"title\":\"Gas Meter\",\"field\":\"gasKw\",\"width\":100, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Gas Diff\",\"field\":\"gasDiff\",\"width\":90, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Elec Meter\",\"field\":\"elecMeter\",\"width\":100, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Elec Diff\",\"field\":\"elecDiff\",\"width\":90, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Mins\",\"field\":\"mins\",\"width\":70, align:\"center\"},\n\t\t\t\t{\"title\":\"Cnt\",\"field\":\"cnt\",\"width\":65, align:\"center\"},\n\t\t\t\t{\"title\":\"TimeGM\",\"field\":\"gmtime\",\"visible\":false}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 660,
        "wires": [
            [
                "4b3e9528cca91eb9"
            ]
        ]
    },
    {
        "id": "ec31eae52d31d78d",
        "type": "ui_table",
        "z": "fd2ee22c0f5f3787",
        "group": "9436b22b19bb3f7e",
        "name": "Gas Mins",
        "order": 2,
        "width": "15",
        "height": "15",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1060,
        "y": 660,
        "wires": []
    },
    {
        "id": "2386595480066b20",
        "type": "ui_ui_control",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "events": "all",
        "x": 660,
        "y": 600,
        "wires": [
            [
                "4b3e9528cca91eb9",
                "e3b1ab477790c7fb",
                "5e8286c62acb98c0"
            ]
        ]
    },
    {
        "id": "4b3e9528cca91eb9",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "env": [],
        "x": 880,
        "y": 660,
        "wires": [
            [
                "ec31eae52d31d78d",
                "c85f49ea81c9e8eb"
            ]
        ]
    },
    {
        "id": "b74da9628544de9f",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Gas Hours Table Prep (Non Standard)",
        "func": "//Gas Hours Table Prep (Non Standard)\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"GlowDerivedDataHours\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"GlowReadings\",\n    tableDatabaseName: \"GlowReadings\",\n    tableJsonName: \"/devices/GlowReadings.json\",\n    tableType: \"array\",\n    tableKeys: [\"time\"],\n    lastID: null,\n    tableTab: \"Home for smarts\",\n    tableName: flowTableName,\n\t\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\n\nlet globalData = flow.get(tableDetails.tableDatabaseName).hours.entries;\n\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\nconst gasConversion = (global.get(\"calorificValue\") * 1.02264 ) / 3.6;\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n\tmsg.payload = [];\n\tglobalData.forEach( (ele,ind,eles) => {\n\t\tmsg.payload.unshift({\n\t\t\tid: tableDetails.lastID++,\n\t\t\tmins:((ele.time - eles[0].time)/60000),\n\t\t\tgasKw: Math.round(ele.gasMeter * gasConversion * 1000) / 1000,\n\t\t\tgasDiff: ( (ind>29) ? Math.round( (ele.gasMeter - eles[ind-30].gasMeter) * gasConversion * 1000 ) / 1000 : null ),\n\t\t\telecDiff: ( (ind>29) ? Math.round( (ele.elecMeter - eles[ind-30].elecMeter) * 1000 ) / 1000 : null ),\n\t\t\ttimeString: ele.time.toLocaleTimeString(),\n\t\t\tdateString: ele.time.toDateString(),\n\t\t\t...ele});\n\t});\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\nflow.set(flowTableName,tableDetails);\n\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"rowFormatter\": \"function(row){var data = row.getData();var nowDate=new Date();var rowDate=new Date((!data.gmtime)?data.time:data.gmtime);var defCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';console.log('diff='+(nowDate - rowDate)+' pos='+row.getPosition(true));if ((nowDate - rowDate)< 60000){row.getElement().style.backgroundColor = '#A6A6DF'}else {row.getElement().style.backgroundColor = defCol}}\",\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t\t{\"title\":\"Date\",\"field\":\"dateString\",\"width\":125, align:\"center\"},\n\t\t\t\t{\"title\":\"Time\",\"field\":\"timeString\",\"width\":100, align:\"center\"},\n\t\t\t\t{\"title\":\"Gas Meter\",\"field\":\"gasKw\",\"width\":100, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Gas Diff\",\"field\":\"gasDiff\",\"width\":90, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Elec Meter\",\"field\":\"elecMeter\",\"width\":100, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Elec Diff\",\"field\":\"elecDiff\",\"width\":90, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Mins\",\"field\":\"mins\",\"width\":70, align:\"center\"},\n\t\t\t\t{\"title\":\"Cnt\",\"field\":\"cnt\",\"width\":65, align:\"center\"},\n\t\t\t\t{\"title\":\"TimeGM\",\"field\":\"gmtime\",\"visible\":false}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 720,
        "wires": [
            [
                "e3b1ab477790c7fb"
            ]
        ]
    },
    {
        "id": "282e14101f6264f7",
        "type": "ui_table",
        "z": "fd2ee22c0f5f3787",
        "group": "9436b22b19bb3f7e",
        "name": "Gas Hours",
        "order": 2,
        "width": "15",
        "height": "10",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1070,
        "y": 720,
        "wires": []
    },
    {
        "id": "e3b1ab477790c7fb",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "env": [],
        "x": 880,
        "y": 720,
        "wires": [
            [
                "282e14101f6264f7"
            ]
        ]
    },
    {
        "id": "aa611bfd6822d543",
        "type": "function",
        "z": "fd2ee22c0f5f3787",
        "name": "Gas Days Table Prep (Non Standard)",
        "func": "//Gas Days Table Prep (Non Standard)\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"GlowDerivedDataDays\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"GlowReadings\",\n    tableDatabaseName: \"GlowReadings\",\n    tableJsonName: \"/devices/GlowReadings.json\",\n    tableType: \"array\",\n    tableKeys: [\"time\"],\n    lastID: null,\n    tableTab: \"Home for smarts\",\n    tableName: flowTableName,\n\t\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\n\nlet globalData = flow.get(tableDetails.tableDatabaseName).days.entries;\n\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\nconst gasConversion = (global.get(\"calorificValue\") * 1.02264 ) / 3.6;\ntableDetails.lastID = 0;\nif (tableDetails.tableType == \"array\") {\n\tmsg.payload = [];\n\tglobalData.forEach( (ele,ind,eles) => {\n\t    //node.warn([\"extracting \" + ind, ele,eles])\n\t\tmsg.payload.unshift({\n\t\t\tid: tableDetails.lastID++,\n\t\t\tmins:((ele.time - eles[0].time)/60000),\n\t\t\tgasKw: Math.round(ele.gasMeter * gasConversion * 1000) / 1000,\n\t\t\tgasDiff: ( (ind>29) ? Math.round( (ele.gasMeter - eles[ind-30].gasMeter) * gasConversion * 1000 ) / 1000 : null ),\n\t\t\telecDiff: ( (ind>29) ? Math.round( (ele.elecMeter - eles[ind-30].elecMeter) * 1000 ) / 1000 : null ),\n\t\t\ttimeString: ele.time.toLocaleTimeString(),\n\t\t\tdateString: ele.time.toDateString(),\n\t\t\t...ele});\n\t});\n} else {\n   msg.payload = Object.keys(globalData).map( (ele) => {\n\treturn {\"id\": tableDetails.lastID++, [tableDetails.tableKeys[0]]: ele, ...globalData[ele]}\n    }); \n}\n\nflow.set(flowTableName,tableDetails);\n\nmsg.ui_control =  {\n    \"tabulator\":{\n        \"rowFormatter\": \"function(row){var data = row.getData();var nowDate=new Date();var rowDate=new Date((!data.gmtime)?data.time:data.gmtime);var defCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';console.log('diff='+(nowDate - rowDate)+' pos='+row.getPosition(true));if ((nowDate - rowDate)< 60000){row.getElement().style.backgroundColor = '#A6A6DF'}else {row.getElement().style.backgroundColor = defCol}}\",\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, },\n\t\t\t\t{\"title\":\"Date\",\"field\":\"dateString\",\"width\":125, align:\"center\"},\n\t\t\t\t{\"title\":\"Time\",\"field\":\"timeString\",\"width\":100, align:\"center\"},\n\t\t\t\t{\"title\":\"Gas Meter\",\"field\":\"gasKw\",\"width\":100, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Gas Diff\",\"field\":\"gasDiff\",\"width\":90, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Elec Meter\",\"field\":\"elecMeter\",\"width\":100, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Elec Diff\",\"field\":\"elecDiff\",\"width\":90, align:\"center\",formatter:\"money\"},\n\t\t\t\t{\"title\":\"Mins\",\"field\":\"mins\",\"width\":70, align:\"center\"},\n\t\t\t\t{\"title\":\"Cnt\",\"field\":\"cnt\",\"width\":65, align:\"center\"},\n\t\t\t\t{\"title\":\"TimeGM\",\"field\":\"gmtime\",\"visible\":false}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\n\nif (gDebug) node.warn([\"[\" + node.name + \"] [Info] Initialising \" + tableDetails.tableDatabaseName + \" - \" + globalData.length + \" entries \"])\nmsg.options = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 780,
        "wires": [
            [
                "5e8286c62acb98c0"
            ]
        ]
    },
    {
        "id": "dde020b6bad0a7a3",
        "type": "ui_table",
        "z": "fd2ee22c0f5f3787",
        "group": "9436b22b19bb3f7e",
        "name": "Days",
        "order": 2,
        "width": "15",
        "height": "10",
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1050,
        "y": 780,
        "wires": []
    },
    {
        "id": "5e8286c62acb98c0",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "env": [],
        "x": 880,
        "y": 780,
        "wires": [
            [
                "dde020b6bad0a7a3"
            ]
        ]
    },
    {
        "id": "1ecd96cb4e541278",
        "type": "inject",
        "z": "fd2ee22c0f5f3787",
        "name": "RefreshTable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "RefreshTable",
        "payloadType": "date",
        "x": 280,
        "y": 760,
        "wires": [
            [
                "4b3e9528cca91eb9",
                "e3b1ab477790c7fb",
                "5e8286c62acb98c0"
            ]
        ]
    },
    {
        "id": "c85f49ea81c9e8eb",
        "type": "debug",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "c706f012f4f9796b",
        "type": "comment",
        "z": "fd2ee22c0f5f3787",
        "name": "",
        "info": "",
        "x": 350,
        "y": 580,
        "wires": []
    },
    {
        "id": "46397b904a182090",
        "type": "ui_chart",
        "z": "fd2ee22c0f5f3787",
        "name": "Per 30 and Per hr",
        "group": "3a5fd9a15c317965",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Per Hour",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "120",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1470,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d0960ce240f4b1fe",
        "type": "ui_chart",
        "z": "fd2ee22c0f5f3787",
        "name": "Gas",
        "group": "3a5fd9a15c317965",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Gas",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "120",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1430,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8a20ab964fe7fed7",
        "type": "ui_chart",
        "z": "fd2ee22c0f5f3787",
        "name": "Elec",
        "group": "3a5fd9a15c317965",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Elec",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "120",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1430,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "59c36e961f9d3f35",
        "type": "mqtt in",
        "z": "fd2ee22c0f5f3787",
        "name": "Glow MQTT",
        "topic": "SMART/HILD/F008D1ED1A48",
        "qos": "2",
        "datatype": "auto",
        "broker": "930bac7c73f417f1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 300,
        "wires": [
            [
                "a06a3b74ee3d6090"
            ]
        ]
    },
    {
        "id": "dab11a8c88883b4d",
        "type": "http request",
        "z": "ac5cca1e38fc76be",
        "d": true,
        "name": "Smartthings REST API",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "f9ce0b4d2dceed55",
                "5bbfc8e8bfa35560"
            ]
        ]
    },
    {
        "id": "31a83c2a8503d241",
        "type": "inject",
        "z": "ac5cca1e38fc76be",
        "name": "Scenes",
        "props": [
            {
                "p": "url",
                "v": "https://api.smartthings.com/v1/scenes?locationId=fd64e95a-22a4-4b70-83b2-2c8a9561278c",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10800",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "scenes",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "dab11a8c88883b4d"
            ]
        ]
    },
    {
        "id": "4ccd5de0b3eac84f",
        "type": "inject",
        "z": "ac5cca1e38fc76be",
        "name": "Rules",
        "props": [
            {
                "p": "url",
                "v": "https://api.smartthings.com/v1/rules?locationId=fd64e95a-22a4-4b70-83b2-2c8a9561278c",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10800",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "rules",
        "payloadType": "str",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "dab11a8c88883b4d"
            ]
        ]
    },
    {
        "id": "563a7dd3659c873a",
        "type": "inject",
        "z": "ac5cca1e38fc76be",
        "name": "locations",
        "props": [
            {
                "p": "url",
                "v": "https://api.smartthings.com/v1/locations",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "302400",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "locations",
        "payloadType": "str",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "dab11a8c88883b4d"
            ]
        ]
    },
    {
        "id": "be403a6e05afd618",
        "type": "inject",
        "z": "ac5cca1e38fc76be",
        "name": "Rooms",
        "props": [
            {
                "p": "url",
                "v": "https://api.smartthings.com/v1/locations/fd64e95a-22a4-4b70-83b2-2c8a9561278c/rooms",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10800",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "rooms",
        "payloadType": "str",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "dab11a8c88883b4d"
            ]
        ]
    },
    {
        "id": "f9ce0b4d2dceed55",
        "type": "function",
        "z": "ac5cca1e38fc76be",
        "name": "Setup smartStuff Global",
        "func": "//Load smartthings stuff\nlet smartStuff = global.get(\"smartStuff\");\nif (!smartStuff) {\n\tnode.warn (\"initialising SmartStuff\");\n\tsmartStuff = {};\n}\nlet items = JSON.parse(msg.payload);\nsmartStuff[msg.topic] = items.items\nglobal.set(\"smartStuff\",smartStuff)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "cb7b057c890860d2",
        "type": "inject",
        "z": "ac5cca1e38fc76be",
        "name": "devices",
        "props": [
            {
                "p": "url",
                "v": "https://api.smartthings.com/v1/devices",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10800",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "devices",
        "payloadType": "str",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "dab11a8c88883b4d"
            ]
        ]
    },
    {
        "id": "5bbfc8e8bfa35560",
        "type": "debug",
        "z": "ac5cca1e38fc76be",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 180,
        "wires": []
    },
    {
        "id": "23bd3d24.796492",
        "type": "link in",
        "z": "86ae6dbd.035eb",
        "name": "Sensor Values",
        "links": [
            "93c4b920.59bd18",
            "abdcd7ed43cb1856",
            "412a0940f2f6b613",
            "164bd974595663f0",
            "3b139ac70f397984"
        ],
        "x": 155,
        "y": 560,
        "wires": [
            [
                "dcd33547f2e07734",
                "feab6738979e8c7d",
                "33d60e6e688a0a10"
            ]
        ]
    },
    {
        "id": "dcd33547f2e07734",
        "type": "function",
        "z": "86ae6dbd.035eb",
        "name": "Map Widgets-1",
        "func": "//Map Widgets-1\n\nlet gDebug = global.get(\"gDebug\");\nlet gDegreeSymbol = global.get(\"gDegreeSymbol\");\n//gDebug = true;\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] SmartDevices does not exist\"])\n    return null;\n}\nlet widgetMapping = global.get(\"widgetMapping\");\nif (!widgetMapping) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] widgetMapping does not exist\",tableDetails])\n    return null;\n}\n\nlet debugMsg = null;\n\nconst device = SmartDevices.find( sm => sm.mqtName == msg.topic );\n\nfunction timeFormat(dateObj) {\n    return dateObj.getHours() + \":\" + dateObj.getMinutes() + \":\" + dateObj.getSeconds()\n}\nif (device) {\n\tlet found = false;\n\tmsgs = [];\n\tdebugMsgs = [];\n\twidgetMapping.forEach( (widget) => {\n\t\tif ( (widget.measure == msg.payload.cmd) && (widget.devName == device.devName) ) {\n\t\t\tfound = true;\n\t\t\tif (gDebug) node.warn([\"[\" + node.name + \"][Info] widgetMapping processed\",widget,device,msg.topic,msg.payload.cmd,msg]);\n\t\t\tdebugMsgs.push( {topic: device.devName,\n\t\t\t\twidget: widget,\n\t\t\t\tdebugFileName: \"/devices/debugSensors.csv\",\n\t\t\t\tpayload: \"Processed \" + msg.topic + \" origTopic=\" + msg.topic +\n\t\t\t\t\t\t\" msg.payload.cmd=\" + msg.payload.cmd + \" payload:\" +\n\t\t\t\t\t\tmsg.payload.payload});\n\t\t\t\tnode.status({fill:\"green\",shape:\"dot\",text: \"Processed \" + msg.topic + \" \" + msg.payload.cmd});\n\t\t\tmsgs.push({topic: device.devName,\n\t\t\t\t\twidget: widget,\n\t\t\t\t\ttime: timeFormat(new Date()),\n\t\t\t\t\tdebugFileName: \"/devices/sensordebug.csv\",\n\t\t\t\t\tunits: msg.payload.cmd + \" \" + msg.units,\n\t\t\t\t\tpayload: msg.payload.payload,\n\t\t\t\t\tmeasure: msg.payload.cmd\n\t\t\t\t\t});\n\t\t}\n\t});\n\tif (!found) {\n\t\tif (gDebug) node.warn([\"WidgetMapping Measure does not match msg.payload.cmd=\" + msg.payload.cmd + \" for \" + msg.topic + \" \" +device.devName,widgetMapping,msg])\n\t\tdebugMsgs.push({topic: device.devName,\n\t\t\tdebugFileName: \"/devices/debugSensors.csv\",\n\t\t\tpayload: \"widgetMapping Measure does not match \" + msg.topic + \" \" + msg.payload.cmd + \" \" + msg.payload.payload});\n\t\treturn [null, debugMsgs]\n\t}\n\treturn [msgs,debugMsgs];\n}\nif (gDebug) node.warn([\"[\" + node.name + \"][Info] SmartDevice not found\",msg.topic,msg.payload.cmd,msg]);\nnode.status({fill:\"red\",shape:\"dot\",text: \" SmartDevice not found \" + msg.topic + \" \" + msg.payload.cmd})\ndebugMsgs.push({topic: msg.topic,\n\t\t\tdebugFileName: \"/devices/debugSensors.csv\",\n\t\t\tpayload: \"SmartDevice not found \" + msg.topic + \" \" + msg.payload.cmd + \" \" + msg.payload.payload});\t\nreturn [null, debugMsgs];\n/*\n        msg.units = \"°C\";\n        msg.ui_control = {\"options\":{\"symbol\":\"°\"}}\n        let graphMsg=null;\n        if (device.devName.includes(\"Temp\") || device.devName.includes(\"Efergy\") ) {\n            let tmp = parseInt(wid.widgetNumber)\n            if ((tmp==0) || (tmp>6)) tmp=1\n            if (tmp>4) tmp = tmp-3\n            graphMsg = {topic: device.devName,\n                payload:msg.payload.payload,\n                widgetType: \"Graph\",\n                widgetNumber: tmp.toString()}\n        }\n*/",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 560,
        "wires": [
            [
                "771e0f109ab9ecd9"
            ],
            []
        ]
    },
    {
        "id": "68e24be64c5c8555",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Init Panels",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "f83cb2c02d209519"
            ]
        ]
    },
    {
        "id": "f83cb2c02d209519",
        "type": "function",
        "z": "86ae6dbd.035eb",
        "name": "",
        "func": "let panels = {\"general\": [], \"pool\": [], \"upstairs\": [],\"downstairs\": [],\"downstairs2\": []};\nflow.set(\"panels\",panels);\nnode.warn(\"Panels initialised \")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "771e0f109ab9ecd9",
        "type": "function",
        "z": "86ae6dbd.035eb",
        "name": "Map Widgets-2",
        "func": "//Apply Widgets 2\nlet gDebug = global.get(\"gDebug\");\nlet gDegreeSymbol = global.get(\"gDegreeSymbol\");\n//gDebug = true;\nlet widgetMapping = global.get(\"widgetMapping\");\nif (!widgetMapping) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] widgetMapping does not exist\",tableDetails])\n    return null;\n}\nlet panels = flow.get(\"panels\");\nif (!panels){\n\tpanels = {\"general\": [], \"pool\": [], \"upstairs\": [],\"downstairs\": [],\"downstairs2\": []};\n\tif (gDebug) node.warn([\"[\" + node.name + \"] \", \"[Info] panels does not exist initialising\",panels])\n\tflow.set(\"panels\",panels)\n}\nif ( (!msg.widget.panelName) || (!panels[msg.widget.panelName]) ){\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] panelName missing or invalid \" + msg.widget.panelName,msg,panels])\n    return null;\n}\nif ( (!msg.widget.widgetNumber)  || (!Number.isInteger(parseInt(msg.widget.widgetNumber))) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] widgetNumber missing or invalid \" + msg.widget.panelName,msg,panels])\n\treturn null;\n}\n\nlet panel = panels[msg.widget.panelName];\nif (!panel) {\n\tif(gDebug) node.warn([\"[\" + node.name + \"] \", \"Panel does not exist initialising\",panel, panels,msg])\n\tpanel = [];\n\tpanels[msg.widget.panelName] = panel;\n\tflow.set(\"panels\",panels);\n}\n\n\nlet panelWidget = panel[parseInt(msg.widget.widgetNumber)];\nlet ui_control = {options:{symbol: \"$\"}};\nlet statusMsg = {fill:\"green\",shape:\"dot\",text: \"Sending \" + msg.topic + \" \" + msg.payload};\nif (!panelWidget) panelWidget = {}\nObject.keys( msg.widget).forEach( (wid) => {\n\tif ( (!panel[parseInt(msg.widget.widgetNumber)])  || (panelWidget[wid] != msg.widget[wid]) ) {\n\t\tif (wid==\"min\" || wid==\"max\") {\n\t\t\tui_control[wid] = msg.widget[wid]\n\t\t\tpanelWidget[wid] = msg.widget[wid];\n\t\t}\n\t\tif (wid==\"gaugeType\") {\n\t\t\tui_control[\"gtype\"] = msg.widget[wid]\n\t\t\tpanelWidget[wid] = msg.widget[wid];\n\t\t}\n\t\tif (wid==\"units\") panelWidget[wid] = msg.widget[wid]\n\t}\n});\nif (!panel[parseInt(msg.widget.widgetNumber)]){\n\tif(gDebug) node.warn([\"[\" + node.name + \"] \", \"[Info] widget in panel does not exist initialising\",panel, panels],msg)\n\tpanel[parseInt(msg.widget.widgetNumber)] = panelWidget;\n\tpanels[msg.widget.panelName] = panel;\n\tflow.set(\"panels\",panels);\n}\n//node.warn(\"DEBUG - for \" + msg.topic + \" Panel=\" + msg.widget.panelName + \" #\" +  parseInt(msg.widget.widgetNumber))\n \n//let retMsg = {topic:msg.topic, payload:msg.payload, panel: msg.widget.panelName,\nlet retMsg = {topic:(msg.widget.label) ? msg.widget.label : msg.topic, payload:msg.payload, panel: msg.widget.panelName,\n\t\t\t\ttime: msg.time,\n\t\t\t\tunits: msg.measure + \" \" + (msg.widget.units || \"\"),\n\t\t\t\tdebugFileName: \"/devices/debugSensors.csv\", widgetNumber: parseInt(msg.widget.widgetNumber), ui_control: ui_control };\n\t\nnode.status(statusMsg);\nreturn retMsg;\n/*\n{\n   \"gtype\":\"donut\",\n   \"min\":0,\n   \"max\":100,\n   \"seg1\":30,\n   \"seg2\":60,\n   \"colors\":[\"blue\",\"orange\",\"lime\"],\n   \"options\":{\n       \"width\":50,\n       \"valueFontFamily\":\"D14C\",\n       \"gaugeWidthScale\":0.5,\n       \"labelFontColor\":\"#d11d3e\",\n       \"label\": unit\n   }\n}\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 520,
        "wires": [
            [
                "a98860dd1ee319ec"
            ]
        ]
    },
    {
        "id": "a98860dd1ee319ec",
        "type": "switch",
        "z": "86ae6dbd.035eb",
        "name": "Select Panel",
        "property": "panel",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "general",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pool",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "downstairs",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "downstairs2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "upstairs",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 710,
        "y": 520,
        "wires": [
            [
                "e891442cd81af953"
            ],
            [
                "e23512fc0642243a"
            ],
            [
                "e6f6979c3768aeec"
            ],
            [
                "1ee16e6b116d0079"
            ],
            [
                "cacc4d53b9f04827"
            ],
            []
        ]
    },
    {
        "id": "e891442cd81af953",
        "type": "switch",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "General",
        "property": "widgetNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "3f263d10048907d8",
                "a9fecd29f3b96a38"
            ],
            [
                "5b55d0c47a95efe1",
                "a9fecd29f3b96a38"
            ],
            [
                "b595e6915835510a",
                "a9fecd29f3b96a38"
            ],
            [
                "6a8592f7fe85cce9",
                "a9fecd29f3b96a38"
            ],
            [
                "4ec374a4a7d5ecea",
                "a9fecd29f3b96a38"
            ],
            [
                "11930e9b515b50a0",
                "a9fecd29f3b96a38"
            ],
            []
        ]
    },
    {
        "id": "3f263d10048907d8",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Gauge",
        "group": "910db11be4a8484f",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1070,
        "y": 120,
        "wires": []
    },
    {
        "id": "5b55d0c47a95efe1",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Gauge",
        "group": "910db11be4a8484f",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 140,
        "wires": []
    },
    {
        "id": "b595e6915835510a",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Gauge",
        "group": "910db11be4a8484f",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 180,
        "wires": []
    },
    {
        "id": "6a8592f7fe85cce9",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Gauge",
        "group": "910db11be4a8484f",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9fecd29f3b96a38",
        "type": "ui_chart",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Chart",
        "group": "f636ab702bc4979b",
        "order": 1,
        "width": "12",
        "height": "3",
        "label": "{{msg.topic}}",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "5",
        "ymax": "28",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1350,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "b2f2eeb67ce9104a",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Gauge",
        "group": "1801e84be6377def",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1810,
        "y": 460,
        "wires": []
    },
    {
        "id": "66f92c803338e6f7",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Gauge",
        "group": "1801e84be6377def",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1930,
        "y": 480,
        "wires": []
    },
    {
        "id": "855747dc43e5831e",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Gauge",
        "group": "1801e84be6377def",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1930,
        "y": 520,
        "wires": []
    },
    {
        "id": "681cd0f1d66e1e90",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Gauge",
        "group": "1801e84be6377def",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1930,
        "y": 560,
        "wires": []
    },
    {
        "id": "7609e2c0e8fe921b",
        "type": "ui_chart",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Chart",
        "group": "f636ab702bc4979b",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "{{msg.topic}}",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "5",
        "ymax": "28",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2090,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e6f6979c3768aeec",
        "type": "switch",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Downstairs",
        "property": "widgetNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 1690,
        "y": 580,
        "wires": [
            [
                "b2f2eeb67ce9104a",
                "7609e2c0e8fe921b"
            ],
            [
                "66f92c803338e6f7",
                "7609e2c0e8fe921b"
            ],
            [
                "855747dc43e5831e",
                "7609e2c0e8fe921b"
            ],
            [
                "681cd0f1d66e1e90",
                "7609e2c0e8fe921b"
            ],
            [
                "cfe4d13ccf3eed32",
                "7609e2c0e8fe921b"
            ],
            [
                "c1b815f4951b7317",
                "7609e2c0e8fe921b"
            ],
            []
        ]
    },
    {
        "id": "7ecddb4d43b6c109",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Gauge",
        "group": "34766c9549917e68",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1230,
        "y": 940,
        "wires": []
    },
    {
        "id": "251fa2bc93445284",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Gauge",
        "group": "34766c9549917e68",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1330,
        "y": 980,
        "wires": []
    },
    {
        "id": "55cbc63ec94fadb7",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Gauge",
        "group": "34766c9549917e68",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1e104e8c3dbebe5f",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Gauge",
        "group": "34766c9549917e68",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1330,
        "y": 1060,
        "wires": []
    },
    {
        "id": "f2e4aa2eea37c0ba",
        "type": "ui_chart",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Chart",
        "group": "f636ab702bc4979b",
        "order": 4,
        "width": "0",
        "height": "0",
        "label": "{{msg.topic}}",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "5",
        "ymax": "28",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1470,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "cacc4d53b9f04827",
        "type": "switch",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Upstairs",
        "property": "widgetNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 1080,
        "y": 1060,
        "wires": [
            [
                "7ecddb4d43b6c109",
                "f2e4aa2eea37c0ba"
            ],
            [
                "251fa2bc93445284",
                "f2e4aa2eea37c0ba"
            ],
            [
                "55cbc63ec94fadb7",
                "f2e4aa2eea37c0ba"
            ],
            [
                "1e104e8c3dbebe5f",
                "f2e4aa2eea37c0ba"
            ],
            [
                "098472a3d72119a0",
                "f2e4aa2eea37c0ba"
            ],
            [
                "7cd6f3d2c9312a28",
                "f2e4aa2eea37c0ba"
            ],
            []
        ]
    },
    {
        "id": "e1d1abf4f54d3aa8",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Hall",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "smartthings/Temp - Hall/temperature",
        "payload": "12.5",
        "payloadType": "str",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "6f62a37ac27c4478",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Test Motion Active",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "smartthings/Motion/motion",
        "payload": "active",
        "payloadType": "str",
        "x": 390,
        "y": 180,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "86bd11ccc84c90a0",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Test Motion Inactive",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "smartthings/Motion/motion",
        "payload": "inactive",
        "payloadType": "str",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "dd6688519703b4a2",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Lounge 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "esphome/sensors/sensor/xiaomi0d_temperature/state",
        "payload": "15.1",
        "payloadType": "str",
        "x": 121,
        "y": 283.20001220703125,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "6dc92fb058876458",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Test esp32/WEMO-04/temperatureC",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "esp32/WEMO-04/temperatureC",
        "payload": "23.19",
        "payloadType": "str",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "3b139ac70f397984",
        "type": "link out",
        "z": "86ae6dbd.035eb",
        "name": "",
        "links": [
            "23bd3d24.796492"
        ],
        "x": 585,
        "y": 200,
        "wires": []
    },
    {
        "id": "33598982fc47f9ed",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Hall 2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "esphome/sensors/sensor/xiaomi3d_temperature/state",
        "payload": "16.1",
        "payloadType": "str",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "b0a87d4bda9a225f",
        "type": "inject",
        "z": "86ae6dbd.035eb",
        "name": "Test smartthings/Swimming Pool/temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "smartthings/Swimming Pool/temperature",
        "payload": "23.19",
        "payloadType": "str",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "3b139ac70f397984"
            ]
        ]
    },
    {
        "id": "feab6738979e8c7d",
        "type": "function",
        "z": "86ae6dbd.035eb",
        "d": true,
        "name": "Sensor Debug",
        "func": "//Map Widgets-1\n\nlet gDebug = global.get(\"gDebug\");\nlet gDegreeSymbol = global.get(\"gDegreeSymbol\");\n//gDebug = true;\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] SmartDevices does not exist\"])\n    return null;\n}\nlet widgetMapping = global.get(\"widgetMapping\");\nif (!widgetMapping) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] widgetMapping does not exist\",tableDetails])\n    return null;\n}\nlet topics = msg.topic.split(\"/\");\nlet shortTopic = topics.slice(0,-1).join(\"/\");\nlet cmd = topics[topics.length-1];\nlet originalCmd = cmd;\nlet debugMsg = {};\n\nif (!msg.topic.includes(\"esphome\")) return\nlet found = SmartDevices.findIndex((dev) =>{\n\treturn (dev.mqtName.includes(shortTopic))\n});\nif (found == -1) {\n\tnode.warn([\"[\" + node.name + \"] SmartDevice not found for topic=\" + msg.topic + \" shortTopic =\" + shortTopic + \" cmd=\" + cmd, msg]);\n\treturn null;\n} \nlet found2 = widgetMapping.findIndex((widget) =>{\n\treturn (widget.devName == SmartDevices[found].devName)\n});\nif (found2 == -1) {\n\tnode.warn([\"[\" + node.name + \"] Widget not found for devName=\" + SmartDevices[found].devName + \" for topic=\" + \n\t\t\t\t\t\t\tmsg.topic + \" shortTopic =\" + shortTopic + \" cmd=\" + cmd, msg,SmartDevices[found]]);\n\treturn null;\n}\nfunction timeFormat(dateObj) {\n    return dateObj.getHours() + \":\" + dateObj.getMinutes() + \":\" + dateObj.getSeconds()\n}\n//node.warn([\"[\" + node.name + \"] Found widget ind=\" + found2 + \" for devName=\" + SmartDevices[found].devName + \" for topic=\" + \n//\t\t\t\t\t\tmsg.topic + \" shortTopic =\" + shortTopic + \" cmd=\" + cmd, msg,SmartDevices[found],widgetMapping[found2]])\nlet newMsg = {topic: SmartDevices[found].devName,\n\t\t\t\t\twidget: widgetMapping[found2],\n\t\t\t\t\ttime: timeFormat(new Date()),\n\t\t\t\t\tdebugFileName: \"/devices/sensordebug.csv\",\n\t\t\t\t\t//payload: ( (msg.topic == \"esp32/WEMO-05c/temperature\") ? msg.payload.sensorAdjAvg : msg.payload ) \n\t\t\t\t\tpayload: ( (typeof(payloadJSON) == \"object\" ) ? payloadJSON.sensorAdjAvg : msg.payload ) \n\t\t\t\t}\nnode.warn([\"[\" + node.name + \"] Would send message for devName=\" + SmartDevices[found].devName + \" for topic=\" + \n\t\t\t\t\t\tmsg.topic + \" shortTopic =\" + shortTopic + \" cmd=\" + cmd, newMsg,msg,SmartDevices[found]]);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "4d82693150c14b7f",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Gauge",
        "group": "fb687f3f164627c1",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1990,
        "y": 760,
        "wires": []
    },
    {
        "id": "0b689f9edb76b332",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Gauge",
        "group": "fb687f3f164627c1",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2110,
        "y": 780,
        "wires": []
    },
    {
        "id": "e384c082645e310b",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Gauge",
        "group": "fb687f3f164627c1",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2110,
        "y": 820,
        "wires": []
    },
    {
        "id": "01b83b0de977e111",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Gauge",
        "group": "fb687f3f164627c1",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2110,
        "y": 860,
        "wires": []
    },
    {
        "id": "fdeccbdcf6f1b509",
        "type": "ui_chart",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Chart",
        "group": "f636ab702bc4979b",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "{{msg.topic}}",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "5",
        "ymax": "28",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2230,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "1ee16e6b116d0079",
        "type": "switch",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Downstairs 2",
        "property": "widgetNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 1850,
        "y": 860,
        "wires": [
            [
                "4d82693150c14b7f",
                "fdeccbdcf6f1b509"
            ],
            [
                "0b689f9edb76b332",
                "fdeccbdcf6f1b509"
            ],
            [
                "e384c082645e310b",
                "fdeccbdcf6f1b509"
            ],
            [
                "01b83b0de977e111",
                "fdeccbdcf6f1b509"
            ],
            [
                "3c216a2db6871c4e",
                "fdeccbdcf6f1b509"
            ],
            [
                "cac720b013b0de58"
            ],
            []
        ]
    },
    {
        "id": "85e7127facc55531",
        "type": "ui_template",
        "z": "86ae6dbd.035eb",
        "group": "1d04a057fbe64e1b",
        "name": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\np.label.nr-dashboard-gauge-title {\n    color: Yellow;font-size: 120%;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "x": 700,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d3609b0cff2844bb",
        "type": "subflow:bfa2bdee7c11e1ae",
        "z": "86ae6dbd.035eb",
        "name": "",
        "env": [],
        "x": 590,
        "y": 640,
        "wires": []
    },
    {
        "id": "4ec374a4a7d5ecea",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Gauge",
        "group": "910db11be4a8484f",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1190,
        "y": 260,
        "wires": []
    },
    {
        "id": "11930e9b515b50a0",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "8658ca8daeea84ce",
        "name": "Gauge",
        "group": "910db11be4a8484f",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "e23512fc0642243a",
        "type": "switch",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Pool",
        "property": "widgetNumber",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 1830,
        "y": 260,
        "wires": [
            [
                "24206e97a02b3b78",
                "df6ba2c38a9ba79e"
            ],
            [
                "df409031cd5eabfc",
                "df6ba2c38a9ba79e"
            ],
            [
                "cbcf05c4bf130809",
                "df6ba2c38a9ba79e"
            ],
            [
                "e633a780ff7b5415",
                "df6ba2c38a9ba79e"
            ],
            [
                "fdef494a1c38896a",
                "df6ba2c38a9ba79e"
            ],
            [
                "7499a32f116bfc0c",
                "df6ba2c38a9ba79e"
            ],
            []
        ]
    },
    {
        "id": "24206e97a02b3b78",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Gauge",
        "group": "b02fb250b6c39f8a",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1950,
        "y": 140,
        "wires": []
    },
    {
        "id": "df409031cd5eabfc",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Gauge",
        "group": "b02fb250b6c39f8a",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2070,
        "y": 160,
        "wires": []
    },
    {
        "id": "cbcf05c4bf130809",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Gauge",
        "group": "b02fb250b6c39f8a",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value | number:2}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2070,
        "y": 200,
        "wires": []
    },
    {
        "id": "e633a780ff7b5415",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Gauge",
        "group": "b02fb250b6c39f8a",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2070,
        "y": 240,
        "wires": []
    },
    {
        "id": "df6ba2c38a9ba79e",
        "type": "ui_chart",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Chart",
        "group": "f636ab702bc4979b",
        "order": 2,
        "width": 10,
        "height": 4,
        "label": "{{msg.topic}}",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "5",
        "ymax": "28",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2210,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fdef494a1c38896a",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Gauge",
        "group": "b02fb250b6c39f8a",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2070,
        "y": 280,
        "wires": []
    },
    {
        "id": "7499a32f116bfc0c",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "21b9376f567aa702",
        "name": "Gauge",
        "group": "b02fb250b6c39f8a",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1950,
        "y": 340,
        "wires": []
    },
    {
        "id": "cfe4d13ccf3eed32",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Gauge",
        "group": "1801e84be6377def",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1930,
        "y": 600,
        "wires": []
    },
    {
        "id": "c1b815f4951b7317",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "6b2966ab51d0e6f1",
        "name": "Gauge",
        "group": "1801e84be6377def",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1850,
        "y": 640,
        "wires": []
    },
    {
        "id": "3c216a2db6871c4e",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Gauge",
        "group": "fb687f3f164627c1",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 2110,
        "y": 900,
        "wires": []
    },
    {
        "id": "cac720b013b0de58",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "4b7ff161dbf34933",
        "name": "Gauge",
        "group": "fb687f3f164627c1",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1990,
        "y": 940,
        "wires": []
    },
    {
        "id": "098472a3d72119a0",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Gauge",
        "group": "34766c9549917e68",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1330,
        "y": 1100,
        "wires": []
    },
    {
        "id": "7cd6f3d2c9312a28",
        "type": "ui_gauge",
        "z": "86ae6dbd.035eb",
        "g": "36e2d1781b0b5433",
        "name": "Gauge",
        "group": "34766c9549917e68",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "{{msg.topic}} {{msg.time}}",
        "label": "{{msg.units}}",
        "format": "{{value}}",
        "min": "5",
        "max": "28",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1230,
        "y": 1140,
        "wires": []
    },
    {
        "id": "33d60e6e688a0a10",
        "type": "function",
        "z": "86ae6dbd.035eb",
        "name": "Create Sensor CSVs",
        "func": "//Create Sensor CSVs\nlet SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n\tnode.warn(\"[\" + node.name + \"][Error] SmartDevices is undefined\");\n\treturn null\n}\nlet found = SmartDevices.findIndex( (dev) => msg.topic==dev.mqtName );\nlet fileName = null;\nif (msg.topic == \"Efergy\") {\n\treturn { topic: \"Sensor_Readings\",\n\t\tfilename: \"/devices/power.csv\",\n\t\tpayload:{timestamp: (new Date().toISOString()),\n\t\t\tdevice: msg.topic,\n\t\t\ttype: \"energy\",\n\t\t\tvalue: msg.payload}\n\t\t}\n} else if (!msg.payload.cmd) {\n\treturn null;\n} else if (msg.payload.cmd.includes(\"temperature\")) {\n    fileName = \"/devices/temperature.csv\"\n} else if (msg.payload.cmd.includes(\"illuminance\")) {\n\tfileName = \"/devices/illuminance.csv\"\n} else if (msg.payload.cmd.includes(\"power\")) {\n\tfileName = \"/devices/power.csv\"\n} else if (msg.payload.cmd.includes(\"energy\")) {\n\tfileName = \"/devices/power.csv\"\n} else if (msg.payload.cmd.includes(\"motion\")) {\n\tfileName = \"/devices/motion.csv\"\n} else if ( (found != -1) && (SmartDevices[found].sensor == true) ) {\n\tfileName = \"/devices/other.csv\"\n} else {\n\t//Do nothing not a sensor and not an indicated topic\n\treturn null;\n}\nreturn { topic: \"Sensor_Readings\",\n\t\tfilename: fileName,\n\t\tpayload:{timestamp: (new Date().toISOString()),\n\t\t\tdevice: msg.topic,\n\t\t\ttype: msg.payload.cmd,\n\t\t\tvalue: msg.payload.payload}\n\t\t}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 740,
        "wires": [
            [
                "f450f25ccde53b57"
            ]
        ]
    },
    {
        "id": "f450f25ccde53b57",
        "type": "csv",
        "z": "86ae6dbd.035eb",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "date,device,type,value",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 740,
        "wires": [
            [
                "c56262db2bd9342e"
            ]
        ]
    },
    {
        "id": "c56262db2bd9342e",
        "type": "file",
        "z": "86ae6dbd.035eb",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 760,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "9821b51b.e60a88",
        "type": "template",
        "z": "95d00868.2c53c8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "[\n    {\"name\": \"Computer 1\", \"ip\": {{payload}}},\n    {\"name\": \"Computer 2\", \"ip\": \"6.3.6.6\"},\n    {\"name\": \"Computer 3\", \"ip\": \"6.7.6.6\"},\n    {\"name\": \"Computer 4\", \"ip\": \"6.4.6.6\"}\n]\n    ",
        "x": 330,
        "y": 80,
        "wires": [
            [
                "79324ea7.8b49b"
            ]
        ]
    },
    {
        "id": "b291d0c9.4ce62",
        "type": "inject",
        "z": "95d00868.2c53c8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "9821b51b.e60a88"
            ]
        ]
    },
    {
        "id": "79324ea7.8b49b",
        "type": "json",
        "z": "95d00868.2c53c8",
        "name": "JSON 1",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 480,
        "y": 80,
        "wires": [
            [
                "4575fa0.e4f1108"
            ]
        ]
    },
    {
        "id": "4575fa0.e4f1108",
        "type": "template",
        "z": "95d00868.2c53c8",
        "name": "css",
        "field": "style",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "table {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n}\ntd {\n    background: #FAFAFA;\n    text-align: center;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */",
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "873a1906.09dac8",
        "type": "comment",
        "z": "95d00868.2c53c8",
        "name": "Efergy - Get Power Consumption",
        "info": "Get and Put Sensor data",
        "x": 170,
        "y": 140,
        "wires": []
    },
    {
        "id": "3da408fb.329d48",
        "type": "range",
        "z": "95d00868.2c53c8",
        "minin": "0",
        "maxin": "1000",
        "minout": "0",
        "maxout": "1",
        "action": "scale",
        "round": false,
        "name": "Scaler",
        "x": 820,
        "y": 240,
        "wires": [
            [
                "33e9c1fd.fce45e",
                "52668d23.636524",
                "46d7ac4f.6ac8d4"
            ]
        ]
    },
    {
        "id": "f0d5c894.a63288",
        "type": "function",
        "z": "95d00868.2c53c8",
        "name": "Extract \"reading\"",
        "func": "var power = { payload: msg.payload.reading };\nreturn power;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 240,
        "wires": [
            [
                "3da408fb.329d48"
            ]
        ]
    },
    {
        "id": "33e9c1fd.fce45e",
        "type": "ui_gauge",
        "z": "95d00868.2c53c8",
        "name": "Efergy - Reading",
        "group": "4b60f798.d4fa",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Efergy - Reading",
        "label": "kW",
        "format": "{{value}} ",
        "min": "0",
        "max": "3.2",
        "colors": [
            "#00ff00",
            "#ffff80",
            "#ca3838"
        ],
        "x": 1010,
        "y": 280,
        "wires": []
    },
    {
        "id": "52668d23.636524",
        "type": "ui_chart",
        "z": "95d00868.2c53c8",
        "name": "Efergy - Chart",
        "group": "4b60f798.d4fa",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Efergy - Chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "%a %H:%M",
        "interpolate": "linear",
        "nodata": "waiting for inject...",
        "ymin": "0",
        "ymax": "3.2",
        "removeOlder": "1",
        "removeOlderUnit": "86400",
        "outputs": 1,
        "x": 1000,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "46d7ac4f.6ac8d4",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "Power [kW]",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 320,
        "wires": []
    },
    {
        "id": "2bade27f.0de4ce",
        "type": "json",
        "z": "95d00868.2c53c8",
        "name": "JSON 4",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "f0d5c894.a63288"
            ]
        ]
    },
    {
        "id": "6e503c06.e638c4",
        "type": "http request",
        "z": "95d00868.2c53c8",
        "name": "Efergy Data",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://engage.efergy.com/mobile_proxy/getInstant?token=5rf0IzxwkX9LWGQ1z5al-AKw8SeqcaTP",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 280,
        "y": 200,
        "wires": [
            [
                "2bade27f.0de4ce",
                "86fb5186.865ee",
                "4a816745.0a7bf8"
            ]
        ]
    },
    {
        "id": "86fb5186.865ee",
        "type": "json",
        "z": "95d00868.2c53c8",
        "name": "JSON 3",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "d566247d.615e38"
            ]
        ]
    },
    {
        "id": "4a816745.0a7bf8",
        "type": "json",
        "z": "95d00868.2c53c8",
        "name": "JSON 2",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 160,
        "wires": [
            [
                "958c8fc3.97fe2"
            ]
        ]
    },
    {
        "id": "a17c54da.6a8c08",
        "type": "inject",
        "z": "95d00868.2c53c8",
        "name": "20s - Ping",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "6e503c06.e638c4"
            ]
        ]
    },
    {
        "id": "d566247d.615e38",
        "type": "function",
        "z": "95d00868.2c53c8",
        "name": "Time Compiler",
        "func": "var date = new Date(msg.payload.last_reading_time);\nmsg.payload.last_reading_time = date.toString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 200,
        "wires": [
            [
                "388906f1.8e912a",
                "d83358ea.94db48"
            ]
        ]
    },
    {
        "id": "958c8fc3.97fe2",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "Age [s]",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "payload.age",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 160,
        "wires": []
    },
    {
        "id": "388906f1.8e912a",
        "type": "ui_text",
        "z": "95d00868.2c53c8",
        "group": "4b60f798.d4fa",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Efergy - Time Stamp",
        "label": "Efergy - Timestamp:",
        "format": "{{msg.payload.last_reading_time}}",
        "layout": "col-center",
        "x": 1000,
        "y": 140,
        "wires": []
    },
    {
        "id": "d83358ea.94db48",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "Time",
        "active": false,
        "tosidebar": true,
        "console": false,
        "complete": "payload.last_reading_time",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "a18c677a.329148",
        "type": "catch",
        "z": "95d00868.2c53c8",
        "name": "JSON Errors",
        "scope": [
            "79324ea7.8b49b",
            "2bade27f.0de4ce",
            "86fb5186.865ee",
            "4a816745.0a7bf8"
        ],
        "uncaught": false,
        "x": 180,
        "y": 360,
        "wires": [
            [
                "31d4365c.631afa"
            ]
        ]
    },
    {
        "id": "74f49a3d.23e414",
        "type": "catch",
        "z": "95d00868.2c53c8",
        "name": "Other Errors",
        "scope": null,
        "uncaught": true,
        "x": 170,
        "y": 440,
        "wires": [
            [
                "b8cdff1e.4faa5"
            ]
        ]
    },
    {
        "id": "31d4365c.631afa",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 360,
        "wires": []
    },
    {
        "id": "b8cdff1e.4faa5",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 440,
        "wires": []
    },
    {
        "id": "c4d3c2c5f9266675",
        "type": "function",
        "z": "95d00868.2c53c8",
        "name": "Send Efergy",
        "func": "//Send Efergy\nlet gDebug = global.get(\"gDebug\");\n//gDebug = true;\nlet power = { topic: \"Efergy\", payload:{cmd:\"power\", payload: msg.payload.reading.toString()} };\nlet statusMsg = {fill:\"green\",shape:\"dot\",text: \"Power is \" + msg.payload.reading.toString() + \"kwH\"};\nnode.status(statusMsg);\nreturn power;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 680,
        "wires": [
            [
                "d325f10d5ceabfd4",
                "412a0940f2f6b613"
            ]
        ]
    },
    {
        "id": "5f40c93af3c81c02",
        "type": "json",
        "z": "95d00868.2c53c8",
        "name": "",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "c4d3c2c5f9266675",
                "d06d62f3d299ab49"
            ]
        ]
    },
    {
        "id": "6d4734fb5fac451e",
        "type": "http request",
        "z": "95d00868.2c53c8",
        "name": "Efergy Data",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://engage.efergy.com/mobile_proxy/getInstant?token=5rf0IzxwkX9LWGQ1z5al-AKw8SeqcaTP",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "5f40c93af3c81c02"
            ]
        ]
    },
    {
        "id": "fdc6d56747285513",
        "type": "inject",
        "z": "95d00868.2c53c8",
        "name": "10s - Ping",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "6d4734fb5fac451e"
            ]
        ]
    },
    {
        "id": "d75d5b9c9fa6fdc6",
        "type": "json",
        "z": "95d00868.2c53c8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 940,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d325f10d5ceabfd4",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 680,
        "wires": []
    },
    {
        "id": "412a0940f2f6b613",
        "type": "link out",
        "z": "95d00868.2c53c8",
        "name": "",
        "links": [
            "23bd3d24.796492"
        ],
        "x": 685,
        "y": 580,
        "wires": []
    },
    {
        "id": "d06d62f3d299ab49",
        "type": "debug",
        "z": "95d00868.2c53c8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 760,
        "wires": []
    },
    {
        "id": "cc9bf701.9b47b8",
        "type": "mqtt in",
        "z": "24aebbb7.83d844",
        "name": "",
        "topic": "from_smartthings/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "d7848d36.072f5"
            ]
        ]
    },
    {
        "id": "794c1235.dc874c",
        "type": "yeelight",
        "z": "24aebbb7.83d844",
        "name": "Cab4",
        "command": "toggle",
        "config": "a90d6502.9380d8",
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "8e8c855d.cac5b8"
            ]
        ]
    },
    {
        "id": "10698b87.635d24",
        "type": "yeelight",
        "z": "24aebbb7.83d844",
        "name": "Cab2",
        "command": "toggle",
        "config": "ce366a3.9ab9b98",
        "x": 1130,
        "y": 160,
        "wires": [
            [
                "8e8c855d.cac5b8"
            ]
        ]
    },
    {
        "id": "8b37dfc4.99ade",
        "type": "yeelight",
        "z": "24aebbb7.83d844",
        "name": "Cab3",
        "command": "toggle",
        "config": "4c3d1daa.2f8fa4",
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "8e8c855d.cac5b8"
            ]
        ]
    },
    {
        "id": "af2b8069.3c07c",
        "type": "yeelight",
        "z": "24aebbb7.83d844",
        "name": "Cab1",
        "command": "toggle",
        "config": "4549c65.b965538",
        "x": 1130,
        "y": 100,
        "wires": [
            [
                "8e8c855d.cac5b8"
            ]
        ]
    },
    {
        "id": "8142d29f.1a3ff",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "set rgb blue 255",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"cmd\":\"set_rgb\",\"value\":255}",
        "payloadType": "json",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "69d051d2.0da01"
            ]
        ]
    },
    {
        "id": "a7558865.a30ca8",
        "type": "hue-light",
        "z": "24aebbb7.83d844",
        "name": "Office hue",
        "bridge": "9851a518.c1e1b8",
        "lightid": "21",
        "colornamer": true,
        "skipevents": false,
        "universalevents": false,
        "x": 1130,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4c7088c7.534a08",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "set rgb Orange",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"cmd\":\"set_rgb\",\"value\":16742912}",
        "payloadType": "json",
        "x": 320,
        "y": 300,
        "wires": [
            [
                "69d051d2.0da01"
            ]
        ]
    },
    {
        "id": "8e8c855d.cac5b8",
        "type": "debug",
        "z": "24aebbb7.83d844",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 240,
        "wires": []
    },
    {
        "id": "69d051d2.0da01",
        "type": "function",
        "z": "24aebbb7.83d844",
        "name": "Relay to Multiple Lights",
        "func": "\nreturn [msg,msg,msg,msg];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "af2b8069.3c07c"
            ],
            [
                "10698b87.635d24"
            ],
            [
                "8b37dfc4.99ade"
            ],
            [
                "794c1235.dc874c"
            ]
        ]
    },
    {
        "id": "f825fb09.13fc78",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "set rgb pink",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"cmd\":\"set_rgb\",\"value\":16744361}",
        "payloadType": "json",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "69d051d2.0da01"
            ]
        ]
    },
    {
        "id": "8d343611.e0e3c8",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "get prop rgb",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"cmd\":\"get_prop\",\"value\":[\"rgb\",\"ct\",\"hue\",\"sat\",\"bright\",\"color_mode\",\"power\"]}",
        "payloadType": "json",
        "x": 330,
        "y": 360,
        "wires": [
            [
                "69d051d2.0da01"
            ]
        ]
    },
    {
        "id": "d7848d36.072f5",
        "type": "function",
        "z": "24aebbb7.83d844",
        "name": "Process RGB Bulb ",
        "func": "// Process RGB Bulb\nvar pt1Topic;\nvar firstSlash = msg.topic.indexOf(\"/\");\nvar secondSlash = msg.topic.indexOf(\"/\",firstSlash+1);\nvar incDev = msg.topic.slice(firstSlash+1,secondSlash);\nvar incCmd = msg.topic.slice(secondSlash+1);\nvar found=-1;\nlet ss = \"smartthings/Cabinet Lights/color\"\nlet newpayload = {};\nif (msg.topic.indexOf(\"Cabinet Lights\")!=-1) {\n    //let val = msg.payload.slice(msg.payload.indexOf(\" \"));\n    //node.warn(\" topic =\" + msg.topic + \" incDev=\" + incDev + \" cmd=\" + incCmd)\n    newpayload.smartthingsPayload = msg.payload;\n    newpayload[incCmd] = msg.payload\n    if (incCmd==\"color\") {\n        newpayload.cmd = \"set_rgb\";\n        newpayload.value = parseInt(msg.payload.slice(1),16);\n    } else if (incCmd==\"switch\") {\n\t\tnewpayload.cmd = \"set_power\";\n\t\tnewpayload.value = msg.payload;\n    } else if (incCmd==\"level\") {\n\t\tnewpayload.cmd = \"set_bright\";\n\t\tnewpayload.value = parseInt(msg.payload);\n    } else {\n        return null;\n    }\n    //node.warn(JSON.stringify({topic:\"test\", payload:newpayload}));\n    return [{topic:\"test\", payload:newpayload}];\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "69d051d2.0da01"
            ]
        ]
    },
    {
        "id": "7e74939e.128f9c",
        "type": "hue-bridge-node",
        "z": "24aebbb7.83d844",
        "name": "",
        "bridge": "9851a518.c1e1b8",
        "autoupdates": true,
        "skipglobalevents": false,
        "x": 310,
        "y": 480,
        "wires": [
            [
                "dea5794c.860ed8"
            ]
        ]
    },
    {
        "id": "6e38cb7.0200034",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"fetch\":\"lights\"}",
        "payloadType": "json",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "7e74939e.128f9c"
            ]
        ]
    },
    {
        "id": "dea5794c.860ed8",
        "type": "debug",
        "z": "24aebbb7.83d844",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 480,
        "wires": []
    },
    {
        "id": "ebb2475c.7fc298",
        "type": "hue-light",
        "z": "24aebbb7.83d844",
        "name": "Table lamp left",
        "bridge": "9851a518.c1e1b8",
        "lightid": "10",
        "colornamer": false,
        "skipevents": false,
        "universalevents": false,
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "76cf8f54.ff87b"
            ]
        ]
    },
    {
        "id": "58f63e51.74d9b",
        "type": "hue-light",
        "z": "24aebbb7.83d844",
        "name": "Table lamp right",
        "bridge": "9851a518.c1e1b8",
        "lightid": "12",
        "colornamer": true,
        "skipevents": false,
        "universalevents": false,
        "x": 1130,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "deefd4db.78f8e8",
        "type": "hue-light",
        "z": "24aebbb7.83d844",
        "name": "Fireplace strip",
        "bridge": "9851a518.c1e1b8",
        "lightid": "19",
        "colornamer": true,
        "skipevents": false,
        "universalevents": false,
        "x": 1130,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "327cfe8c.13d0c2",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "on",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 310,
        "y": 560,
        "wires": [
            [
                "46a39003.887f9"
            ]
        ]
    },
    {
        "id": "78c28a96.966f94",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 310,
        "y": 620,
        "wires": [
            [
                "46a39003.887f9"
            ]
        ]
    },
    {
        "id": "3f06a8ec.32ecb8",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "Alert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"alert\":10,\"rgb\":[0,0,255]}",
        "payloadType": "json",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "46a39003.887f9"
            ]
        ]
    },
    {
        "id": "46a39003.887f9",
        "type": "function",
        "z": "24aebbb7.83d844",
        "name": "Relay to Multiple Lights",
        "func": "\nreturn [msg,msg,msg,msg,msg];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 660,
        "wires": [
            [
                "38bfdb62.6b1724"
            ],
            [
                "ebb2475c.7fc298"
            ],
            [
                "58f63e51.74d9b"
            ],
            [
                "deefd4db.78f8e8"
            ],
            [
                "d22edd7c.68cec"
            ]
        ]
    },
    {
        "id": "2cefd4ab.68b12c",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "100% bright",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true,\"brightness\":100}",
        "payloadType": "json",
        "x": 310,
        "y": 700,
        "wires": [
            [
                "46a39003.887f9"
            ]
        ]
    },
    {
        "id": "c047eb54.56edb8",
        "type": "link in",
        "z": "24aebbb7.83d844",
        "name": "Hue Left Table Lamp",
        "links": [
            "f33ec620.441808",
            "37e239b6.eca8d6"
        ],
        "x": 535,
        "y": 760,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "30138704.cc5808",
        "type": "function",
        "z": "24aebbb7.83d844",
        "name": "Relay to specified light",
        "func": "let msgs = [null,null,null,null,null];\nif ( (!msg.alertDevice) || isNaN(msg.alertDevice) || (!Number.isInteger(msg.alertDevice)) ||\n\t\t\t(msg.alertDevice < 1) || (msg.alertDevice > 5) ) {\n    msgs[0] = msg;\n    node.warn(\"Light Relay invalid alertDevice =\" + msg.alertDevice);\n    return msgs\n}\nmsgs[(msg.alertDevice - 1)] = msg;\nreturn msgs",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 780,
        "wires": [
            [
                "38bfdb62.6b1724"
            ],
            [
                "ebb2475c.7fc298"
            ],
            [
                "58f63e51.74d9b"
            ],
            [
                "deefd4db.78f8e8"
            ],
            [
                "d22edd7c.68cec",
                "59006d57.80deb4"
            ]
        ]
    },
    {
        "id": "3ec3783b.540938",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "Pink ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true,\"hex\":\"#FF63AA\"}",
        "payloadType": "json",
        "x": 290,
        "y": 740,
        "wires": [
            [
                "46a39003.887f9"
            ]
        ]
    },
    {
        "id": "76cf8f54.ff87b",
        "type": "debug",
        "z": "24aebbb7.83d844",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 680,
        "wires": []
    },
    {
        "id": "d22edd7c.68cec",
        "type": "hue-light",
        "z": "24aebbb7.83d844",
        "name": "Hue lightstrip plus 1",
        "bridge": "9851a518.c1e1b8",
        "lightid": "23",
        "colornamer": false,
        "skipevents": false,
        "universalevents": false,
        "x": 1130,
        "y": 880,
        "wires": [
            [
                "2c48c5d3.d4712a"
            ]
        ]
    },
    {
        "id": "f1200b4a.661128",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "on",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 290,
        "y": 800,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "8038e2d4.8ccbf",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 290,
        "y": 840,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "fb639b14.fb30a8",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "Alert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"alert\":10,\"transitionTime\":0,\"brightness\":100,\"rgb\":[0,0,255]}",
        "payloadType": "json",
        "x": 290,
        "y": 880,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "b691ab9b.df4de8",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "100% bright",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true,\"brightness\":100}",
        "payloadType": "json",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "57439036.0bc94",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "Yellow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true,\"color\":\"yellow\"}",
        "payloadType": "json",
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "aa142b89.91fa08",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "Pink ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true,\"hex\":\"#FF63AA\"}",
        "payloadType": "json",
        "x": 270,
        "y": 960,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "2c48c5d3.d4712a",
        "type": "debug",
        "z": "24aebbb7.83d844",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 880,
        "wires": []
    },
    {
        "id": "59006d57.80deb4",
        "type": "debug",
        "z": "24aebbb7.83d844",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 940,
        "wires": []
    },
    {
        "id": "3b095430.8557cc",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "Blue",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true,\"color\":\"blue\"}",
        "payloadType": "json",
        "x": 270,
        "y": 1000,
        "wires": [
            [
                "30138704.cc5808"
            ]
        ]
    },
    {
        "id": "d4c82ba7.3a8618",
        "type": "node-lifx-in",
        "z": "24aebbb7.83d844",
        "server": "d37d8f53.a8add",
        "name": "Corner Light",
        "lightID": "d073d520a578",
        "x": 450,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9a64bc87.12176",
        "type": "node-lifx-out",
        "z": "24aebbb7.83d844",
        "server": "d37d8f53.a8add",
        "name": "Corner Light",
        "lightID": "d073d520a578",
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "bd892b6e.280f48"
            ]
        ]
    },
    {
        "id": "bd892b6e.280f48",
        "type": "debug",
        "z": "24aebbb7.83d844",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1020,
        "wires": []
    },
    {
        "id": "81a4ac25.eefc4",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "on",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":true}",
        "payloadType": "json",
        "x": 250,
        "y": 1160,
        "wires": [
            [
                "d4c82ba7.3a8618"
            ]
        ]
    },
    {
        "id": "84495c33.c4e3f",
        "type": "inject",
        "z": "24aebbb7.83d844",
        "name": "off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "alertDevice",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"on\":false}",
        "payloadType": "json",
        "x": 250,
        "y": 1240,
        "wires": [
            [
                "d4c82ba7.3a8618"
            ]
        ]
    },
    {
        "id": "38bfdb62.6b1724",
        "type": "node-lifx-in",
        "z": "24aebbb7.83d844",
        "server": "d37d8f53.a8add",
        "name": "Corner Light",
        "lightID": "d073d520a578",
        "x": 1130,
        "y": 600,
        "wires": []
    },
    {
        "id": "250bd6410f4bcd17",
        "type": "catch",
        "z": "24aebbb7.83d844",
        "name": "Catch Yeelight Errors",
        "scope": [
            "794c1235.dc874c",
            "10698b87.635d24",
            "8b37dfc4.99ade",
            "af2b8069.3c07c"
        ],
        "uncaught": false,
        "x": 580,
        "y": 380,
        "wires": [
            [
                "3e13af2179a9ef46"
            ]
        ]
    },
    {
        "id": "3e13af2179a9ef46",
        "type": "function",
        "z": "24aebbb7.83d844",
        "name": "Process yeelight errors",
        "func": "node.warn([\"[Info] yeeelight connect problem \" + error.message,msg])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "957d75be.5ba988",
        "type": "amazon-echo-hub",
        "z": "bebdbac7.9f4e88",
        "d": true,
        "port": "3247",
        "processinput": 0,
        "discovery": true,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "be7e7bbc.b80f88",
                "7d5e5c6e.f47464"
            ]
        ]
    },
    {
        "id": "be7e7bbc.b80f88",
        "type": "amazon-echo-device",
        "z": "bebdbac7.9f4e88",
        "name": "Status Report",
        "topic": "Alexa/StatusReport",
        "x": 380,
        "y": 60,
        "wires": [
            [
                "f418ebbe.43c738"
            ]
        ]
    },
    {
        "id": "f418ebbe.43c738",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Check Status",
        "func": "//Check Status - Alexa\nconst deviceStatus = global.get(\"DevStatus\").devices\nvar txt = \"\";\nif (deviceStatus[\"smartthings/Fountain\"][\"switch\"].payload == \"on\") {\n    txt = txt + ((txt===\"\") ? \"Fountain is on\" :\",\" + \"Fountain is on\")\n}\nif (parseInt(deviceStatus[\"Efergy\"].payload) > 2000) {\n    txt = txt + ((txt===\"\") ? \"Electricity is very high\" : \",\" + \"Electricity is very high\")\n} else if (parseInt(deviceStatus[\"Efergy\"].payload) > 1000) {\n    txt = txt + ((txt===\"\") ? \"Electricity is quite high\" : \",\" + \"Electricity is quite high\")\n}\nif ( (deviceStatus[\"smartthings/Attic Bedroom Heater\"][\"switch\"].payload == \"on\") ||\n\t\t(deviceStatus[\"smartthings/Attic Bathroom\"][\"switch\"].payload == \"on\") || \n\t\t(deviceStatus[\"smartthings/Attic Lounge Heater\"][\"switch\"].payload == \"on\") ) {\n\t\t\ttxt = txt + ((txt===\"\") ? \"Some Attic Heating is on\" : \",\" + \"Some Attic Heating is on\")\n\t\t}\nmsg.payload = txt;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "7952f993.7f3ba8"
            ]
        ]
    },
    {
        "id": "7d5e5c6e.f47464",
        "type": "amazon-echo-device",
        "z": "bebdbac7.9f4e88",
        "name": "Mode Status",
        "topic": "Alexa/ModeStatus",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "cd70ba88.9f2308"
            ]
        ]
    },
    {
        "id": "cd70ba88.9f2308",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Check Modes",
        "func": "//Check Modes\nconst deviceStatus = global.get(\"DevStatus\").devices\nvar txt = \"\";\nif (deviceStatus[\"smartthings/Attic Guest\"][\"switch\"].payload == \"on\"){\n    txt = txt + ((txt===\"\") ? \"Attic Guest is Set\" :\",\" + \"Attic Guest is Set\")\n} else {\n    txt = txt + ((txt===\"\") ? \"Attic Guest is not Set\" :\",\" + \"Attic Guest is not Set\")\n}\nif (deviceStatus[\"smartthings/Pool Schedule\"][\"switch\"].payload == \"on\") {\n    txt = txt + ((txt===\"\") ? \"Pool Schedule is Set\" :\",\" + \"Pool Schedule is Set\")\n} else {\n    txt = txt + ((txt===\"\") ? \"Pool Schedule is not Set\" :\",\" + \"Pool Schedule is not Set\")\n}\nnode.warn(\"message is\" + txt);\nmsg.payload = txt;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 140,
        "wires": [
            [
                "7952f993.7f3ba8"
            ]
        ]
    },
    {
        "id": "7952f993.7f3ba8",
        "type": "alexa-remote-routine",
        "z": "bebdbac7.9f4e88",
        "d": true,
        "name": "Speak Message",
        "account": "a002bf14.accf6",
        "routineNode": {
            "type": "speak",
            "payload": {
                "type": "regular",
                "text": {
                    "type": "msg",
                    "value": "payload"
                },
                "devices": [
                    "G090NV03740504U7",
                    "G090LF09651302W0",
                    "90F007186433015M",
                    "G090U50984762LGC",
                    "G090LF0964651N96"
                ]
            }
        },
        "x": 840,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f55e7990.30c828",
        "type": "http in",
        "z": "bebdbac7.9f4e88",
        "name": "/alexa",
        "url": "/alexa",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "47d1d43f.b98dac"
            ]
        ]
    },
    {
        "id": "35615f09.0c866",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Extract Message",
        "func": "var message = \"\";\nif (msg.payload.request.intent && msg.payload.request.intent.slots)\n    message = msg.payload.request.intent.slots.Text.value\n\nmsg.text = message;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "f9b26346.b20d2"
            ]
        ]
    },
    {
        "id": "7e2a6f7c.ac297",
        "type": "switch",
        "z": "bebdbac7.9f4e88",
        "name": "",
        "property": "payload.request.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LaunchRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IntentRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SessionEndedRequest",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 240,
        "wires": [
            [
                "c701e64d.2f8e18"
            ],
            [
                "35615f09.0c866"
            ],
            [
                "9f50b1a8.97f81"
            ],
            [
                "9f50b1a8.97f81",
                "bb3d2b3d.4e7f68"
            ]
        ]
    },
    {
        "id": "9f50b1a8.97f81",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "End Session Message",
        "func": "msg.payload = {\n  \"response\": {\n    \"outputSpeech\": {\n      \"type\": \"SSML\",\n      \"ssml\": \"<speak> Thank you for using Status Reporting and have a nice day! </speak>\"\n    },\n    \"shouldEndSession\": true\n  },\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 320,
        "wires": [
            [
                "61002dc4.3fbf64"
            ]
        ]
    },
    {
        "id": "c701e64d.2f8e18",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Start Session Message",
        "func": "msg.payload = {\n    \"version\": \"1.0\",\n    \"response\": {\n        \"outputSpeech\": {\n            \"type\": \"SSML\",\n            \"ssml\": \"<speak> Hi. Welcome to the Creagers Home Status Reporting! </speak>\"\n        },\n        \"shouldEndSession\": false\n    },\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "f9b26346.b20d2"
            ]
        ]
    },
    {
        "id": "47d1d43f.b98dac",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Extract User",
        "func": "if (msg.payload.session) {\n    msg.userId = msg.payload.session.user.userId;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "7e2a6f7c.ac297"
            ]
        ]
    },
    {
        "id": "61002dc4.3fbf64",
        "type": "http response",
        "z": "bebdbac7.9f4e88",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1370,
        "y": 320,
        "wires": []
    },
    {
        "id": "3be7bc3b.30c5a4",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Parse Message To Alexa",
        "func": "msg.payload = {\n  \"version\": \"1.0\",\n  \"response\": {\n    \"outputSpeech\": {\n      \"type\": \"SSML\",\n      \"ssml\": \"<speak> \"  + msg.text + \" </speak>\"\n    },\n    \"reprompt\": {\n      \"outputSpeech\": {\n        \"type\": \"SSML\",\n        \"ssml\": \"<speak> \"  + msg.text + \" </speak>\"\n      }\n    },\n    \"shouldEndSession\": true\n  }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1170,
        "y": 260,
        "wires": [
            [
                "61002dc4.3fbf64"
            ]
        ]
    },
    {
        "id": "f9b26346.b20d2",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Do Something",
        "func": "//Do Something\nconst deviceStatus = global.get(\"DevStatus\").devices\nvar txt = \"\";\nif (deviceStatus[\"esp32-03\"]) {\n    //if (deviceStatus[\"esp32-03\"][\"temperatureC\"]) {\n    if (deviceStatus[\"esp32-03\"].indexOf(\"temperatureC\") != -1) {\n        var ind = deviceStatus[\"esp32-03\"].length\n        if ( deviceStatus[\"esp32-03\"].indexOf(\",\") != -1) {\n            ind = deviceStatus[\"esp32-03\"].indexOf(\",\");\n        }\n        var wk = deviceStatus[\"esp32-03\"].substring(deviceStatus[\"esp32-03\"].indexOf(\"C:\") + 2, ind ) + \" degrees\"\n        txt = \"Pool Temperature is \" + wk;\n    } else {\n        node.warn(\"Error Pool tempC not set esp32-03=\" + deviceStatus[\"esp32-03\"]);\n    }\n} else {\n        node.warn(\"Error Pool sensor not set\");\n}\nif (deviceStatus[\"smartthings/Attic Guest\"][\"switch\"].payload == \"on\") {\n    txt = txt + ((txt===\"\") ? \"Attic Guest is Set\" :\",\" + \"Attic Guest is Set\")\n} else {\n    txt = txt + ((txt===\"\") ? \"Attic Guest is not Set\" :\",\" + \"Attic Guest is not Set\")\n}\nif (deviceStatus[\"smartthings/Pool Schedule\"][\"switch\"].payload == \"on\") {\n    txt = txt + ((txt===\"\") ? \"Pool Schedule is Set\" :\",\" + \"Pool Schedule is Set\")\n} else {\n    txt = txt + ((txt===\"\") ? \"Pool Schedule is not Set\" :\",\" + \"Pool Schedule is not Set\")\n}\nif (deviceStatus[\"smartthings/Fountain\"][\"switch\"].payload == \"on\") {\n    txt = txt + ((txt===\"\") ? \"Fountain is on\" :\",\" + \"Fountain is on\")\n}\nif (parseInt(deviceStatus[\"Efergy\"].payload) > 2000) {\n    txt = txt + ((txt===\"\") ? \"Electricity is very high\" : \",\" + \"Electricity is very high\")\n} else if (parseInt(deviceStatus[\"Efergy\"].payload) > 1000) {\n    txt = txt + ((txt===\"\") ? \"Electricity is quite high\" : \",\" + \"Electricity is quite high\")\n}\nif ( (deviceStatus[\"smartthings/Attic Bedroom Heater\"][\"switch\"].payload == \"on\") ||\n\t\t(deviceStatus[\"smartthings/Attic Bathroom\"][\"switch\"].payload == \"on\") || \n\t\t(deviceStatus[\"smartthings/Attic Lounge Heater\"][\"switch\"].payload == \"on\") ) {\n\t\t\ttxt = txt + ((txt===\"\") ? \"Some Attic Heating is on\" : \",\" + \"Some Attic Heating is on\")\n\t\t}\n//node.warn(\"message is\" + txt);\nmsg.text = txt;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "3be7bc3b.30c5a4"
            ]
        ]
    },
    {
        "id": "bb3d2b3d.4e7f68",
        "type": "debug",
        "z": "bebdbac7.9f4e88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "4e081c0d8b617002",
        "type": "alexa-remote-event",
        "z": "bebdbac7.9f4e88",
        "d": true,
        "name": "",
        "account": "a002bf14.accf6",
        "event": "ws-device-activity",
        "x": 260,
        "y": 560,
        "wires": [
            [
                "4a7343aea49fcf0e"
            ]
        ]
    },
    {
        "id": "4a7343aea49fcf0e",
        "type": "function",
        "z": "bebdbac7.9f4e88",
        "name": "Save Alexa Events",
        "func": "//Save Alexa Events\nlet gDebug = global.get(\"gDebug\");\nfunction getData(name, scope=\"global\") {\n\treturn ( (scope == \"global\") ? global.get(name) : flow.get(name) );\n}\nfunction setData(name,value, scope=\"global\") {\n\tif (scope==\"global\") {\n\t\tglobal.set(name,value);\n\t} else {\n\t\tflow.set(name,value);\n\t}\n}\nconst fs = global.get(\"fs\");\nconst path = global.get(\"path\");\nlet statusMsg = null;\nlet Message_Saves_Def = flow.get(\"Message_Saves_Def\");\nif (msg.topic == \"Message_Saves_Definitions\") {\n    if (!Message_Saves_Def) Message_Saves_Def = {};\n\tnode.warn([ \"[\" + node.name + \"] Configuring Definitions\", msg.payload])\n\tObject.keys(msg.payload).forEach( (key) => {\n\t\tif (Message_Saves_Def[key] != msg.payload[key]) node.warn( \"[\" + node.name + \"]  Setting \" + key + \" from \" + Message_Saves_Def[key] + \" to \" + msg.payload[key]);\n\t\tMessage_Saves_Def[key] = msg.payload[key];\n\t});\n\tflow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Save_On\") {\n\tnode.warn([ \"[\" + node.name + \"] Turning Saves On to \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\t\t\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t\t\t\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\tMessage_Saves_Def.doSave = true;\n    flow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\nif (msg.topic == \"Message_Saves_Save_Off\") {\n\tnode.warn([ \"[\" + node.name + \"] Turning Saves Off for \" + Message_Saves_Def.scope + \".\" + Message_Saves_Def.variableName +\n\t\t\t\t\t\t\" rotating every \" + Message_Saves_Def.rotateOn +\n\t\t\t\t\t\t((Message_Saves_Def.saveToFile) ? \" Saving to \" + Message_Saves_Def.saveToFile : \" Not saving to a file\")])\n\n\tMessage_Saves_Def.doSave = false;\n    flow.set(\"Message_Saves_Def\",Message_Saves_Def);\n\treturn [null, null];\n}\n\nif (!Message_Saves_Def) {\n\tnode.error( \"[\" + node.name + \"] Message_Saves_Def not set up\");\n\treturn [msg, null];\n}\nlet data = getData(Message_Saves_Def.variableName,Message_Saves_Def.scope);\nif (!data) data = [];\nif (Message_Saves_Def.doSave) {\n\tlet msg2 = null;\n\tlet fileName = null;\n\tlet rotateOn = 0;\n\tif (Message_Saves_Def.saveToFile) fileName = Message_Saves_Def.saveToFile;\n\tif (Message_Saves_Def.rotateOn) rotateOn = Message_Saves_Def.rotateOn;\n\n\tdata.push(msg);\n\tsetData(Message_Saves_Def.variableName, data, Message_Saves_Def.scope);\n\tstatusMsg = {fill:\"green\",shape:\"ring\",text: \"Saving msgs to \" + Message_Saves_Def.scope + \n\t\t\t\t\t\t\".\" + Message_Saves_Def.variableName + \" \" + data.length + \" currently saved\"};\n\tif ( (rotateOn!=0) && (data.length >= rotateOn) ) {\n\t\tlet oldMessages = getData(\"old_\" + Message_Saves_Def.variableName, Message_Saves_Def.scope);\n\t\tif ( (oldMessages) && (oldMessages.length>0) ) {\n\t\t\tlet cnt = 1;\n\t\t\tlet varName = \"old_\" + Message_Saves_Def.variableName + \"_\" + cnt;\n\t\t\twhile  (getData(varName, Message_Saves_Def.scope)) {\n\t\t\t\tcnt++;\n\t\t\t\tvarName = \"old_\" + Message_Saves_Def.variableName + \"_\" + cnt;\n\t\t\t}\n\t\t\tnode.warn( \"[\" + node.name + \"] Copying old_\" + Message_Saves_Def.variableName + \" to \" + varName);\n\t\t\tsetData(varName, oldMessages, Message_Saves_Def.scope);\n\t\t}\n\t\tnode.warn( \"[\" + node.name + \"] Saving \" + Message_Saves_Def.variableName + \" to \" + \"old_\" + Message_Saves_Def.variableName);\n\t\tsetData(\"old_\" + Message_Saves_Def.variableName, data, Message_Saves_Def.scope);\n\t\tsetData(Message_Saves_Def.variableName, [], Message_Saves_Def.scope);\n\t\tnode.warn( \"[\" + node.name + \"] Cleared \" + Message_Saves_Def.variableName);\n\t\tif (fileName) {\n\t\t\tlet baseName = path.join(path.dirname(fileName),path.basename(fileName,path.extname(fileName)))\n\t\t\tnode.warn( [ \"[\" + node.name + \"] \" + \"[Info] \" + \"Filename is \" + fileName]);\n\t\t\tcnt = 0;\n\t\t\tlet rotator = \"_\" + (++cnt) + path.extname(fileName);\n\t\t\twhile (fs.existsSync(baseName + rotator)) {\n\t\t\t\trotator = \"_\" + (++cnt) + path.extname(fileName);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (fs.existsSync(fileName)) {\n\t\t\t\t\tnode.warn( [ \"[\" + node.name + \"] \" + \"[Info] \", \n\t\t\t\t\t\t\t\"Output File old file renamed from  \" + fileName + \"to \" + baseName + rotator ]);\n\t\t\t\t\tfs.renameSync(fileName,baseName + rotator);\n\t\t\t\t}\n\t\t\t} catch(err) {\n\t\t\t\tnode.warn( [err, \"[\" + node.name + \"] \" + \"[Info] \", \"Output File does not exist \" + fileName ]);\n\t\t\t}\n\t\t\tmsg2 = {topic:\"\", filename:fileName ,payload:oldMessages};\n\t\t}\n\t}\n\tnode.status(statusMsg);\n\treturn [msg, msg2]\n} else {\n\tstatusMsg = {fill:\"red\",shape:\"dot\",text: \"Saving Off to \" + Message_Saves_Def.scope + \n\t\t\t\t\t\t\".\" + Message_Saves_Def.variableName + \" \" + data.length + \" currently saved\"};\n}\nnode.status(statusMsg);\nreturn [msg, null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 580,
        "wires": [
            [],
            [
                "7978d54067542f14"
            ]
        ]
    },
    {
        "id": "71127b98be2e86fc",
        "type": "inject",
        "z": "bebdbac7.9f4e88",
        "name": "Setup Event Saves",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Definitions",
        "payload": "{\"saveToFile\":\"/devices/AlexaEvents.json\",\"rotateOn\":200,\"variableName\":\"AlexaEvents\",\"scope\":\"flow\"}",
        "payloadType": "json",
        "x": 280,
        "y": 660,
        "wires": [
            [
                "4a7343aea49fcf0e"
            ]
        ]
    },
    {
        "id": "121d54c477a93a9c",
        "type": "file",
        "z": "bebdbac7.9f4e88",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 900,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "7978d54067542f14",
        "type": "json",
        "z": "bebdbac7.9f4e88",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 620,
        "wires": [
            [
                "121d54c477a93a9c"
            ]
        ]
    },
    {
        "id": "b9bc2c7075231869",
        "type": "inject",
        "z": "bebdbac7.9f4e88",
        "name": "Saves On",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Save_On",
        "payloadType": "date",
        "x": 330,
        "y": 740,
        "wires": [
            [
                "4a7343aea49fcf0e"
            ]
        ]
    },
    {
        "id": "f387b7d572ca3d3d",
        "type": "inject",
        "z": "bebdbac7.9f4e88",
        "name": "Saves off",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Message_Saves_Save_Off",
        "payloadType": "date",
        "x": 350,
        "y": 800,
        "wires": [
            [
                "4a7343aea49fcf0e"
            ]
        ]
    },
    {
        "id": "aca0616b.a9f8f",
        "type": "mqtt in",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "topic": "from_smartthings/+/motion",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "2b15ee24.caba92",
                "5ee8edbcb253d052",
                "257499ecd0ae242e"
            ]
        ]
    },
    {
        "id": "964f7a5f.8154e8",
        "type": "alexa-remote-routine",
        "z": "fbc788ea.fbf9a8",
        "d": true,
        "name": "",
        "account": "ed2bef2.d13bd1",
        "routineNode": {
            "type": "routine",
            "payload": {
                "routine": {
                    "type": "str",
                    "value": "amzn1.alexa.automation.ecba134b-0c56-433b-baaa-8990467cc437"
                },
                "device": {
                    "type": "str",
                    "value": "G090LF10717423TL"
                }
            }
        },
        "x": 1440,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "2b15ee24.caba92",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Select Garden",
        "func": "const SmartDevices = global.get(\"SmartDevices\");\nlet statusMsg = {};\nif (!SmartDevices) {\n    node.error( [ \"[\" + node.name + \"] \" + \" [Error] \", \"Smartdevices does not exist\"]);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: \"Smartdevices does not exist\"};\n\tnode.status(statusMsg)\n\treturn [null,null]\n}\nconst smDevice = SmartDevices.find( sm => sm.mqtName == msg.topic );\nconst isGarden = ( smDevice && (smDevice.room == \"Garden\"));\n\n//if ( msg.topic.includes(\"Garden\")  ) {\nif (isGarden) {\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: msg.topic + \"Garden Motion \" + msg.payload}\n\tnode.status(statusMsg);\n    return {\"topic\": msg.topic, payload: msg.payload};\n\t//return {\"topic\":\"motion detected\", \"payload\": { type: 'routine', payload: { routine: 'barking' }} };\n}\nstatusMsg = {fill:\"yellow\",shape:\"ring\",text: msg.topic + \"Not Garden motion \" + msg.payload}\nnode.status(statusMsg);\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 140,
        "wires": [
            [
                "1b954157.9fd02f",
                "c6d588bd.bfa608"
            ]
        ]
    },
    {
        "id": "1b954157.9fd02f",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "func": "let currentState = context.get(\"currentState\");\nif (!currentState) currentState = {status: \"ready\", \n\t\t\t\t\t\t\ttimeStamp: new Date(),\n\t\t\t\t\t\t\tlastTopic: msg.topic,\n\t\t\t\t\t\t\tlastPayload: msg.payload\n\t\t\t\t\t\t\t};\nif (msg.payload == \"active\" ) {\n\t//node.warn(\"State - status\" + currentState.status + \" time:\" + currentState.timeStamp.toLocaleTimeString());\n\t//node.warn(\"Active - \" + msg.topic + \" state \" );\n\tcurrentState.status = \"active\";\n\tcurrentState.timeStamp = new Date();\n\tcurrentState.lastTopic = msg.topic;\n\tcurrentState.lastPayload = msg.payload;\n} else if (msg.payload == \"inactive\" ) {\n\t//node.warn(\"State - status\" + currentState.status + \" time:\" + currentState.timeStamp.toLocaleTimeString());\n\t//node.warn(\"Inactive - \" + msg.topic);\n\tcurrentState.status = \"inactive\";\n\tcurrentState.timeStamp = new Date();\n\tcurrentState.lastTopic = msg.topic;\n\tcurrentState.lastPayload = msg.payload;\n} else {\n\tnode.warn(\"State - status\" + currentState.status + \" time:\" + currentState.timeStamp.toLocaleTimeString());\n\tnode.warn(\"Invalid Payload \" + msg.topic + \" pay=\" + msg.payload);\n}\ncontext.set(\"currentState\", currentState);\nif (currentState.status == \"ready\") {\n    node.status({fill:\"blue\",shape:\"ring\",text:\"ready\"});\n} else if (currentState.status == \"active\") {\n    node.status({fill:\"red\",shape:\"ring\",text:\"active\"});\n} else if (currentState.status == \"ready\") {\n    node.status({fill:\"green\",shape:\"ring\",text:\"inactive\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a49e7cb6.64577",
        "type": "mqtt in",
        "z": "fbc788ea.fbf9a8",
        "name": "Ring Cameras",
        "topic": "ring/gcpvdm-32vd9-0/camera/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "827c9488.27bf78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "96ba1ac6.11b468"
            ]
        ]
    },
    {
        "id": "96ba1ac6.11b468",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Parse Ring Msg",
        "func": "let topics = msg.topic.split(\"/\");\nlet incDev = topics[3];\n//ring/gcpvdm-32vd9-0/camera/0cae7df601e5/info/state\n//ring/gcpvdm-32vd9-0/camera/54e0199d43ea/info/state\n//ring/gcpvdm-32vd9-0/camera/e04f434a9720/info/state\n// {\"batteryLevel\":\"95\",\"firmwareStatus\":\"Up to Date\",\"lastUpdate\":\"2021-04-13T11:33:10Z\",\n//    \"wirelessNetwork\":\"creagers-mesh\",\"wirelessSignal\":-71}\n// {\"firmwareStatus\":\"Up to Date\",\"lastUpdate\":\"2021-04-13T16:20:02Z\",\n//    \"wirelessNetwork\":\"creagers-mesh\",\"wirelessSignal\":-70}\n\n//ring/gcpvdm-32vd9-0/camera/0cae7df601e5/motion/attributes\n//{\"lastMotion\":1618328202,\"lastMotionTime\":\"2021-04-13T15:36:42Z\",\n//  \"personDetected\":false}\n\n//0cae7df601e5 - Garden1\n//54e0199d43ea - Garden2\n//e04f434a9720 - Front Door\nconst cameras = {\"0cae7df601e5\": \"Garden\", \"54e0199d43ea\": \"Garden2\", \"e04f434a9720\": \"Front Door\"}\n\nif (!cameras[topics[3]]) {\n    node.warn(\"WIERD - camera ID not known topic=\" + msg.topic + \"payload=\" + msg.payload); \n    return null;\n}\nif (topics[4]==\"motion\") {\n    if (topics[5] == \"state\") {\n        if ( (msg.payload==\"ON\") || (msg.payload==\"on\") ) {\n            return {topic: cameras[topics[3]] + \"/motion\", payload: \"ON\"}\n        }\n        return null;\n    } else if ( topics[5] == \"attributes\" ) {\n        //node.warn(\"Unrecognised motion topic \" + msg.topic)\n        return null;\n    } else {\n        node.warn(\"Unrecognised topic \" + msg.topic)\n        return null;\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "c6d588bd.bfa608",
                "56c79bf.e97b964"
            ]
        ]
    },
    {
        "id": "b6089e8f.8a2fb",
        "type": "mytimeout",
        "z": "fbc788ea.fbf9a8",
        "name": "Garden Light Timer",
        "outtopic": "Timer",
        "outsafe": "safe",
        "outwarning": "Warning",
        "outunsafe": "unsafe",
        "warning": "5",
        "timer": "30",
        "debug": false,
        "ndebug": false,
        "ignoreCase": true,
        "repeat": false,
        "again": false,
        "x": 910,
        "y": 200,
        "wires": [
            [
                "1772db39.a577b5"
            ],
            []
        ]
    },
    {
        "id": "2e1e67fe.dac488",
        "type": "mqtt out",
        "z": "fbc788ea.fbf9a8",
        "d": true,
        "name": "Garden-Flood",
        "topic": "Tasmota/Garden-Flood/cmnd/POWER1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "827c9488.27bf78",
        "x": 1440,
        "y": 280,
        "wires": []
    },
    {
        "id": "c6d588bd.bfa608",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Format Tasmota",
        "func": "//Format Tasmota\nlet inProgress = flow.get(\"inProgress\");\nlet alexaInProgress = flow.get(\"alexaInProgress\");\nlet nightOrDay = global.get(\"nightOrDay\");\nlet alertMsg = null;\nlet timerMsg = null;\nlet lightMsg = null;\nlet alexaMsg = null;\n//node.warn(\"alexaInProgress=\" + alexaInProgress +\" inProgress=\" + inProgress);\nlet alertDevice = 1;\nif (!inProgress) {\n    inProgress = false;\n    flow.set(\"inProgress\",inProgress);\n}\nif (!alexaInProgress) {\n    inProgress = false;\n    flow.set(\"alexaInProgress\",alexaInProgress);\n}\nif ( !msg.topic.includes(\"Front Door\") ) {\n    if ( (msg.payload == \"ON\") || (msg.payload == \"active\") || (msg.payload == \"on\") ) {\n        if (nightOrDay) {\n    \t\tif (msg.topic == \"Garden2\") alertDevice = 2\n    \t\tif (!inProgress) {\n    \t\t\talertMsg = {topic: msg.topic, payload:\"on\", warning:0 , timeout:300, alertDevice: alertDevice}\n    \t\t\tinProgress = true;\n    \t\t\tflow.set(\"inProgress\",inProgress);\n    \t\t}\n    \t\tif (!alexaInProgress) {\n    \t\t\talexaMsg = {topic: msg.topic, payload:\"on\", warning:0 , timeout:60}\n    \t\t\talexaInProgress = true;\n    \t\t\tflow.set(\"alexaInProgress\",alexaInProgress);\n    \t\t}\n\t\t\tlightMsg = {topic: msg.topic, source: \"node-red\", payload: \"on\"};\n\t\t\ttimerMsg = {topic: msg.topic, source: \"node-red\", payload: \"on\", warning:0 , timeout:60};\n\t\t}\n\t\treturn [timerMsg, lightMsg, alertMsg,alexaMsg];\n\t}\n}\nreturn null;",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "b6089e8f.8a2fb"
            ],
            [
                "2e1e67fe.dac488",
                "cf1c9bf4c610246e"
            ],
            [
                "91f62ef0.6ff75"
            ],
            [
                "b3b9f2f0.f9bf7"
            ]
        ]
    },
    {
        "id": "4df9634b.17f74c",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "enable/disable alerts",
        "func": "if (msg.payload==\"safe\") {\n        if (!msg.alertDevice) node.warn(\"Handle Alerts invalid alertDevice is not set - setting to 0\")\n        let alertDevice = msg.alertDevice || 0\n        inProgress = true;\n        flow.set(\"inProgress\",inProgress);\n        return {topic:\"alert\", payload:{\"alert\":5,\"rgb\":[0,0,255]}, alertDevice: alertDevice}\n}\nif (msg.payload==\"unsafe\") {\n        inProgress = false;\n        flow.set(\"inProgress\",inProgress);\n        return null    \n}\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1772db39.a577b5",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Format Tasmota",
        "func": "if (msg.payload==\"unsafe\") {\n    return {topic: \"TimerEnd\",payload: \"off\"};\n}\n\nreturn  null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 200,
        "wires": [
            [
                "2e1e67fe.dac488",
                "cf1c9bf4c610246e"
            ]
        ]
    },
    {
        "id": "91f62ef0.6ff75",
        "type": "mytimeout",
        "z": "fbc788ea.fbf9a8",
        "name": "Light Alert",
        "outtopic": "AlertTimer",
        "outsafe": "safe",
        "outwarning": "Warning",
        "outunsafe": "unsafe",
        "warning": "5",
        "timer": "30",
        "debug": false,
        "ndebug": false,
        "ignoreCase": true,
        "repeat": false,
        "again": false,
        "x": 860,
        "y": 340,
        "wires": [
            [
                "4df9634b.17f74c"
            ],
            []
        ]
    },
    {
        "id": "37e239b6.eca8d6",
        "type": "link out",
        "z": "fbc788ea.fbf9a8",
        "name": "From Garden Movement",
        "links": [
            "d9b8fa01.83d7b8",
            "c047eb54.56edb8"
        ],
        "x": 1355,
        "y": 340,
        "wires": []
    },
    {
        "id": "b3b9f2f0.f9bf7",
        "type": "mytimeout",
        "z": "fbc788ea.fbf9a8",
        "name": "Alexa Alert",
        "outtopic": "AlexaAlertTimer",
        "outsafe": "safe",
        "outwarning": "Warning",
        "outunsafe": "unsafe",
        "warning": "5",
        "timer": "30",
        "debug": false,
        "ndebug": false,
        "ignoreCase": true,
        "repeat": false,
        "again": false,
        "x": 870,
        "y": 440,
        "wires": [
            [
                "6b60ef01.7d26f"
            ],
            []
        ]
    },
    {
        "id": "6b60ef01.7d26f",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "enable/disable Alexa Alerts",
        "func": "if (msg.payload==\"safe\") {\n        alexaInProgress = true;\n        flow.set(\"alexaInProgress\",alexaInProgress);\n        return {topic:\"alert\", payload:{\"alert\":5,\"rgb\":[0,0,255]}}\n}\nif (msg.payload==\"unsafe\") {\n        alexaInProgress = false;\n        flow.set(\"alexaInProgress\",alexaInProgress);\n        return null    \n}\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "26ece2db.3004ae",
        "type": "inject",
        "z": "fbc788ea.fbf9a8",
        "name": "reset Alers",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "db63080e.1a6e28"
            ]
        ]
    },
    {
        "id": "db63080e.1a6e28",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "reset alerts",
        "func": "        inProgress = false;\n        flow.set(\"inProgress\",inProgress);\n        alexaInProgress = false;\n        flow.set(\"alexaInProgress\",alexaInProgress);\nreturn null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "bf44407a.c20d4",
        "type": "alexa-remote-init",
        "z": "fbc788ea.fbf9a8",
        "d": true,
        "name": "",
        "account": "ed2bef2.d13bd1",
        "option": "initialise",
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "123e6678.5acbaa"
            ]
        ]
    },
    {
        "id": "c7f04444.fed188",
        "type": "inject",
        "z": "fbc788ea.fbf9a8",
        "name": "Daily Alexa Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "alexa",
        "payloadType": "flow",
        "x": 880,
        "y": 40,
        "wires": [
            [
                "bf44407a.c20d4"
            ]
        ]
    },
    {
        "id": "123e6678.5acbaa",
        "type": "change",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "alexa",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f57bccae.04dbf",
        "type": "inject",
        "z": "fbc788ea.fbf9a8",
        "name": "Init Alexa",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "alexa",
        "payloadType": "flow",
        "x": 880,
        "y": 120,
        "wires": [
            [
                "bf44407a.c20d4"
            ]
        ]
    },
    {
        "id": "56c79bf.e97b964",
        "type": "link out",
        "z": "fbc788ea.fbf9a8",
        "name": "From Ring Messages",
        "links": [
            "71099781.f13e28"
        ],
        "x": 575,
        "y": 420,
        "wires": []
    },
    {
        "id": "cf1c9bf4c610246e",
        "type": "debug",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 220,
        "wires": []
    },
    {
        "id": "14edb44730c5ce0f",
        "type": "comment",
        "z": "fbc788ea.fbf9a8",
        "name": "Need to allow for garden light to be on",
        "info": "(Motion Turns it off)",
        "x": 400,
        "y": 520,
        "wires": []
    },
    {
        "id": "6952c28c7a5b6a62",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Manage Motion Detectors",
        "func": "//Manage Motion Detectors\nlet gDebug = global.get(\"gDebug\")\nconst SmartDevices = global.get(\"SmartDevices\");\nif (!SmartDevices) {\n    node.error( [ \"[\" + node.name + \"] \" + \" [Error] \", \"Smartdevices does not exist\"]);\n\tstatusMsg = {fill:\"red\",shape:\"ring\",text: \"Smartdevices does not exist\"};\n\tnode.status(statusMsg)\n\treturn [null,null]\n}\nlet RoomMotions = flow.get(\"RoomMotions\")\nif (!RoomMotions) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"RoomMotions does not exist - Initialising\"]);\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"RoomMotions does not exist\"};\n\tnode.status(statusMsg);\n\tRoomMotions = {};\n}\nconst nowDate = new Date();\nconst smDevice = SmartDevices.find( sm => sm.mqtName == msg.topic );\nconst isMotion = (smDevice && (smDevice.room));\nif (isMotion) {\n\tif (gDebug) node.warn([\"DEBUG Motion received \" + msg.topic + \" dev=\" + smDevice.devName, msg])\n    if (!RoomMotions[smDevice.room]) {\n        RoomMotions[smDevice.room] = {};\n        RoomMotions[smDevice.room].devices = {};\n    }\n\tif (!RoomMotions[smDevice.room].devices[smDevice.devName]) {\n        RoomMotions[smDevice.room].devices[smDevice.devName] = {};\n    }\n\tRoomMotions[smDevice.room].devices[smDevice.devName].state = msg.payload.payload\n    RoomMotions[smDevice.room].devices[smDevice.devName].lastUpdated = nowDate;\n    const active = Object.values(RoomMotions[smDevice.room].devices).reduce((pv,cv,ind) => { return ( pv||(cv.state==\"active\"))}, false);\n    RoomMotions[smDevice.room].state = (active) ? \"active\" : \"inactive\";\n    RoomMotions[smDevice.room].lastUpdated = nowDate;\n    statusMsg = (active) ? {fill:\"green\",shape:\"dot\",text: smDevice.room + \" is active\"} : {fill:\"blue\",shape:\"ring\",text: smDevice.room + \" is inactive\"};\n\tnode.status(statusMsg);\n}\nflow.set(\"RoomMotions\",RoomMotions);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "f82f3f8d3af285be"
            ]
        ]
    },
    {
        "id": "5ee8edbcb253d052",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Pre Proc",
        "func": "//Pre Proc\nlet gDebug = global.get(\"gDebug\")\nlet platforms = global.get(\"Platforms\");\n//Platform always the start\nlet topics = msg.topic.split(\"/\");\nlet platform = platforms[topics[0]];\nlet device = topics[1];\nlet payload = {cmd: topics.slice(2).join(\"/\"), payload: msg.payload};\nlet shortTopic = topics.slice(0,2).join(\"/\");\n\nlet debugText = \"\";\nlet debugMessage = {topic: \"debug\", debugFileName: \"/devices/commonDebug.csv\",\n\t\t\t\t\tpayload:[\"PreProc\", msg.topic, payload.cmd]};\nlet statusMsg = \"\";\nif ( (msg.source==\"node-red\") ||  (msg.topic.includes(\"set_state\")) ) {\n    if (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"Ignoring a node-red generated message\",msg]);\n    return [null,null];\n}\n\nif (topics[0] == \"esphome\") {\n\tif ( platform && platform.topicCommands && (topics.length > 3) ) {\n\t\tlet found;\n\t\ttry {\n\t\t\tfound = platform.topicCommands.find( (tc) => topics[3].includes(tc));\n\t\t} catch (err) {\n\t\t\tdebugText = (debugText == \"\") ? \"espHome Catch \" + err  : \";\" + \"espHome Catch \" + err;\n\t\t\tnode.error([ \"[\" + node.name + \"][error] \" + err, topics, msg]);\n\t\t\tfound = false\n\t\t}\n\t\tif (found) {\n\t\t\tshortTopic = \"esphome/\" + topics[3].slice(0, topics[3].indexOf(found));\n\t\t\tpayload.cmd = platform.parsedCommand[platform.topicCommands.indexOf(found)];\n\t\t\tif (!payload.cmd) {\n\t\t\t\tdebugText = (debugText == \"\")\n\t\t\t\t\t\t\t? \"Esphome ignoring \" + topics.join(\"/\") + \" cmd not in pForm.parsed\"\n\t\t\t\t\t\t\t: debugText + \";\" + \"Esphome ignoring \" + topics.join(\"/\") + \" cmd not in pForm.parsed\";\n\t\t\t\t\t\n\t\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\t\t\tdebugMessage.payload.push(debugText);\n\t\t\t\treturn [debugMessage, null]\n\t\t\t}\n\t\t\tdebugText = (debugText == \"\") ? \"Processing esphome \" + payload.cmd : debugText + \";\" + \"Processing esphome \" + payload.cmd\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\t\tdebugMessage.payload.push(debugText);\n\t\t\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"esphome mapped to \" + shortTopic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn [debugMessage, {topic: shortTopic, oldTopic: msg.topic, oldPayload: msg.payload, debugFileName: \"/devices/preproc.csv\", payload: payload}]\n\t\t} else {\n\t\t\tdebugText = (debugText == \"\")\n\t\t\t\t\t\t? \"Esphome ignoring Command not in pForm.topicCom \" + topics.join(\"/\")\n\t\t\t\t\t\t: \";\" + \"Esphome ignoring Command not in pForm.topicCom \" + topics.join(\"/\");\n\t\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\t\tdebugMessage.payload.push(debugText);\n\t\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Command not in pForm \" + msg.topic};\n\t\t\tnode.status(statusMsg)\n\t\t\treturn [debugMessage,null]\n\t\t}\n\t} else {\n\t\tdebugText = (debugText == \"\")\n\t\t\t\t\t? \"Esphome ignoring Platform/topics error \" + topics.join(\"/\")\n\t\t\t\t\t: \";\" + \"Esphome ignoring Platform/topics error \" + topics.join(\"/\");\n\t\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\t\tdebugMessage.payload.push(debugText);\n\t\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"Pform/topics error \" + msg.topic};\n\t\tnode.status(statusMsg)\n\t\treturn [debugMessage,null]\n\t}\n} else if (topics[0] == \"fromesp\") {\n\t//payload = {cmd: topics.slice(3).join(\"/\"), payload: msg.payload};\n\t//shortTopic = topics.slice(0,3).join(\"/\");\n\tif (topics.length>2) {\n\t\tpayload = {cmd: topics.slice(3).join(\"/\"), payload: msg.payload};\n\t\tshortTopic = \"fromesp/\" + topics[2];\n\t}\n\tdebugText = (debugText == \"\") ?\n\t\t\t\t\t\t\t\"Processing \" + msg.topic + \" \" + msg.payload + \" to \" + shortTopic + \" \" + payload.cmd + \":\" + payload.payload :\n\t\t\t\t\t\t\tdebugText + \";\" + \"Processing \" + msg.topic + \" \" + msg.payload + \" to \" + shortTopic + \" \" + payload.cmd + \":\" + payload.payload;\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText, msg]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"green\",shape:\"dot\",text: \"fromesp mapped \" + msg.topic + \" to \" + shortTopic};\n\tnode.status(statusMsg)\n\treturn [debugMessage, {topic:shortTopic, oldTopic: msg.topic, oldPayload: msg.payload, debugFileName: \"/devices/preproc.csv\", payload: payload}]\n} else if (topics[0] == \"toesp\") {\n\tdebugText = (debugText == \"\")\n\t\t\t\t? \"Esphome ignoring toesp \" + topics.join(\"/\")\n\t\t\t\t: \";\" + \"Esphome ignoring toesp \" + topics.join(\"/\");\n\tif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\n\tdebugMessage.payload.push(debugText);\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"toesp ignored \" + msg.topic};\n\tnode.status(statusMsg)\n\treturn [debugMessage,null]\n}\ndebugText = (debugText == \"\") ? \"Processing \" + topics[0] + \" \" + payload.cmd : debugText + \";\" + \"Processing \" + topics[0] + \" \" + payload.cmd\nif (gDebug) node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \" + debugText,msg]);\ndebugMessage.payload.push(debugText);\nreturn [debugMessage, {topic:shortTopic, oldTopic: msg.topic, oldPayload: msg.payload, debugFileName: \"/devices/preproc.csv\", payload: payload}]\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 660,
        "wires": [
            [],
            [
                "6952c28c7a5b6a62"
            ]
        ]
    },
    {
        "id": "f82f3f8d3af285be",
        "type": "debug",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 640,
        "wires": []
    },
    {
        "id": "257499ecd0ae242e",
        "type": "debug",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 220,
        "wires": []
    },
    {
        "id": "12ce690b91a0e0e1",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Room Motion Table Prep",
        "func": "//RoomMotion Dev Table Prep\nlet gDebug = global.get(\"gDebug\");\n\nconst flowTableName = \"RoomMotionDevicesTable\";\nlet tableDetails = {\n    tableData:[],\n    tableDatabase: \"RoomMotions\",\n    tableDatabaseName: \"RoomMotions\",\n    tableJsonName: null,\n    tableType: \"object\",\n    tableKeys: [\"room\"],\n    lastID: null,\n    tableTab: \"Motions\",\n    refreshableTable: true,\n\trefreshTime: 20,\n\tstaleDetails: [{\"time\": 2*60, \"color\":'#baffc9'}, {\"time\": 5*60, \"color\":'#ffffba'}],\n    tableName: flowTableName,\n\taddRowInject: {\"command\":\"addRow\",\"arguments\":[[{\"Service\":\"Service\",\"mqttPrefix\":\"mqttPrefix\",\"delayTime\":12}],true],\"returnPromise\":true}\n};\ntableDetails.rowFormatter = null;\nif (tableDetails.staleDetails) {\n\tlet staleCheck = \"\";\n\ttableDetails.staleDetails.forEach( (chk) => {\n\t\tstaleCheck = ( (staleCheck==\"\") ? \"if\" : staleCheck + \" else if\" ) + \" ((nDate-lDate)<\" + (chk.time * 1000) + \") {dCol='\" + chk.color + \"'}\"\t\t\n\t});\n\tif (staleCheck != \"\") tableDetails.rowFormatter = \"function(row){var nDate=new Date();var lDate=new Date(row.getData().lastUpdated);var dCol=(row.getPosition(true)%2==0)?'$rowAltBackgroundColor':'$rowBackgroundColor';\" + staleCheck + \";row.getElement().style.backgroundColor=dCol}\"\n}\n\nlet globalData = flow.get(tableDetails.tableDatabaseName);\nif (!globalData) {\n    node.error([\"[\" + node.name + \"] \", \"[Error] \" + tableDetails.tableDatabaseName + \" does not exist\",tableDetails])\n    return null;\n}\nif ( (tableDetails.tableType == \"object\" ) && ( tableDetails.tableKeys.length !=1 ) ) {\n\tnode.error([\"[\" + node.name + \"] \", \"[Error] \" + \" for object type, a single key must be specified \",tableDetails]);\n\treturn null;\n}\n\ntableDetails.lastID = 0;\nmsg.payload = [];\nObject.keys(globalData).forEach( (room) => {\n\tObject.keys(globalData[room].devices).forEach((dev) => {\n\t\tmsg.payload.push({\"id\": tableDetails.lastID++,\n\t\t\t\t\t\t\troom:room,\n\t\t\t\t\t\t\troomState: globalData[room].state,\n\t\t\t\t\t\t\tlastUpdated: globalData[room].lastUpdated,\n\t\t\t\t\t\t\tdevice: dev,\n\t\t\t\t\t\t\tdeviceState: globalData[room].devices[dev].state,\n\t\t\t\t\t\t\tdeviceTime: globalData[room].devices[dev].lastUpdated });\n\t});\n});\n\nflow.set(flowTableName,tableDetails);\n//node.warn([\"rowFormatter\",tableDetails.rowFormatter])\nheaderClickFunc = \"function(e,col){var tbs=col.getTable().getSorters();var srts = tbs.map( tb => {return {field:tb.field, dir:tb.dir}});console.log(srts);this.send({topic:'headerClicked',ui_control:{callback:'headerClicked',column:col.getField(), getSorters: srts },payload:col.getDefinition()})}\"\nmsg.ui_control =  {\n    \"tabulator\":{\n\t\t\"rowFormatter\": tableDetails.rowFormatter,\n        \"columns\":[{\"title\":\"id\",\"field\":\"id\",\"width\":30, align: \"center\", headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Room\",\"field\":\"room\",\"width\":80, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Device\",\"field\":\"device\",\"width\":120, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"State\",\"field\":\"deviceState\",\"width\":80, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Device Time\",\"field\":\"deviceTime\",formatter:\"datetime\", formatterParams:{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputFormat:\"hh:mm\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvalidPlaceholder:\"\"},\"width\":160, headerClick: headerClickFunc},\n\t\t\t\t{\"title\":\"Room Time\",\"field\":\"lastUpdated\",formatter:\"datetime\", formatterParams:{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toutputFormat:\"DD/MM hh:mm:ss\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tinvalidPlaceholder:\"\"},\"width\":160, headerClick: headerClickFunc}\n        ],\n        \"cellEdited\": \"function(cell){var rowtmp = cell.getRow().getIndex();var rowFs=cell.getRow().getCells();var rws = rowFs.map((rw)=>{return {field:rw.getField(),val:rw.getValue()}});this.send({ui_control:{callback:'cellEdited'},payload:cell.getValue(),oldValue:cell.getOldValue(),field:cell.getColumn().getField(),id:rowtmp,rowFields:rws});}\",\n        \"layout\":\"fitColumns\",\n        \"movableColumns\":false,\n        \"groupBy\":\"\"\n    },\n}\nmsg.topic = \"initTable\";\nmsg.tableInit = {ready:true, details: flowTableName};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 780,
        "wires": [
            [
                "b89ab5efdd4ce1a1"
            ]
        ]
    },
    {
        "id": "486d6135b991a5c7",
        "type": "inject",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 240,
        "y": 780,
        "wires": [
            [
                "12ce690b91a0e0e1"
            ]
        ]
    },
    {
        "id": "b89ab5efdd4ce1a1",
        "type": "subflow:e6dcd8331e41ae02",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "x": 720,
        "y": 780,
        "wires": [
            [
                "68f5dfdffbc5531e",
                "b62844e7c43c7680"
            ]
        ]
    },
    {
        "id": "68f5dfdffbc5531e",
        "type": "ui_table",
        "z": "fbc788ea.fbf9a8",
        "group": "4e4468465663eb6e",
        "name": "Motions Table",
        "order": 2,
        "width": "12",
        "height": "20",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 720,
        "y": 720,
        "wires": [
            [
                "b89ab5efdd4ce1a1"
            ]
        ]
    },
    {
        "id": "b62844e7c43c7680",
        "type": "ui_text",
        "z": "fbc788ea.fbf9a8",
        "group": "4e4468465663eb6e",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Refreshed",
        "format": "{{msg.refreshDate}}",
        "layout": "row-center",
        "x": 857,
        "y": 829,
        "wires": []
    },
    {
        "id": "ce9015f2a4c36ff7",
        "type": "function",
        "z": "fbc788ea.fbf9a8",
        "name": "Set Room Updated",
        "func": "let RoomMotions = flow.get(\"RoomMotions\")\nif (!RoomMotions) {\n    node.warn( [ \"[\" + node.name + \"] \" + \" [Info] \", \"RoomMotions does not exist - Initialising\"]);\n\tstatusMsg = {fill:\"yellow\",shape:\"ring\",text: \"RoomMotions does not exist\"};\n\tnode.status(statusMsg);\n\tRoomMotions = {};\n}\nObject.values(RoomMotions).forEach( (room) => {\n\tif (!room.lastUpdated) {\n\t\tlet lastUpdated = null;\n\t\tObject.values(room.devices).forEach( (dev) => {\n\t\t\tif ( (!lastUpdated) || (lastUpdated<dev.lastUpdated) ) lastUpdated = dev.lastUpdated;\n\t\t} );\n\t\troom.lastUpdated = lastUpdated;\n\t\tnode.warn(room + \" lastUpdated was null - set to \" + lastUpdated);\t\t\n\t}\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "afa76b4aba178191",
        "type": "inject",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 920,
        "wires": [
            [
                "ce9015f2a4c36ff7"
            ]
        ]
    },
    {
        "id": "92683432f5301657",
        "type": "ui_ui_control",
        "z": "fbc788ea.fbf9a8",
        "name": "",
        "events": "all",
        "x": 530,
        "y": 840,
        "wires": [
            [
                "b89ab5efdd4ce1a1"
            ]
        ]
    },
    {
        "id": "3b1fa3c6.1066ec",
        "type": "inject",
        "z": "f0af95b4.d8efc8",
        "name": "Zero-01 only",
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "Pi-ZeroW-01",
        "payload": "{\"camera\":\"Pi-ZeroW-01.creagers:7546\",\"lamp\":null}",
        "payloadType": "json",
        "x": 140,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4aac136a.9b034c",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Parse inject",
        "func": "var night = flow.get(\"nightOrDay\");\nvar msg2 = null;\nvar msg3 = null;\nif (  (night) ) {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Night\"});\n} else {\n    node.status({fill:\"green\",shape:\"ring\",text:\"Day\"});\n}\nif (flow.get(msg.topic)) {\n    msg2={\"topic\":msg.payload.camera,\"payload\":\"on\",\"delay\":0};\n    if ( (msg.payload.lamp) && (night) && (msg.payload.onlyNight) ) {\n        msg2.delay=null;\n        var lightDevicePowerOn = {\"cmnd\":\"Power on\",\"user\":\"admin\",\"password\":\"Twister10\"};\n        var lightDevicePowerOff = {\"cmnd\":\"Power off\",\"user\":\"admin\",\"password\":\"Twister10\"};\n        msg3 = { \"topic\":msg.payload.lamp,\n                \"payload\":{ action:\"on\",\n                            \"lampOnCmd\": lightDevicePowerOn,\n                            \"lampOffCmd\": lightDevicePowerOff\n                            }\n                };\n    }\n} else {\n    node.warn(\"Camera not online \" + msg.topic);\n}\n    \nreturn [msg2,msg3];",
        "outputs": 2,
        "noerr": 0,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "bacc8a6e.ebba88"
            ],
            [
                "b7325677.c8e9e8"
            ]
        ]
    },
    {
        "id": "5b4aaa71.213444",
        "type": "inject",
        "z": "f0af95b4.d8efc8",
        "name": "Zero-02 & Lamp",
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "Pi-ZeroW-02",
        "payload": "{\"camera\":\"Pi-ZeroW-02.creagers:7547\",\"lamp\":\"192.168.1.217\",\"onlyNight\":true}",
        "payloadType": "json",
        "x": 130,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b7325677.c8e9e8",
        "type": "trigger",
        "z": "f0af95b4.d8efc8",
        "name": "On/Off after 3mins",
        "op1": "",
        "op2": "turnOff",
        "op1type": "pay",
        "op2type": "str",
        "duration": "3",
        "extend": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "6741db40.d7fae4"
            ]
        ]
    },
    {
        "id": "40e156e9.3e63b8",
        "type": "debug",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 300,
        "wires": []
    },
    {
        "id": "d27594ef.af1e38",
        "type": "debug",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1170,
        "y": 240,
        "wires": []
    },
    {
        "id": "bacc8a6e.ebba88",
        "type": "delay",
        "z": "f0af95b4.d8efc8",
        "name": "Delay for Lamp",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 580,
        "y": 240,
        "wires": [
            [
                "656e11ab.75a2e"
            ]
        ]
    },
    {
        "id": "6741db40.d7fae4",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Manage payload",
        "func": "var savedPayload\nif (msg.payload==\"turnOff\") {\n    savedPayload = context.get(\"savedPayload\");\n    if (savedPayload) {\n        msg.payload = savedPayload.lampOffCmd;\n    } else {\n        node.warn(\"Weird - savedPayload is null\");\n    }\n} else {\n    savedPayload = msg.payload\n    context.set(\"savedPayload\",savedPayload)\n    msg.payload = savedPayload.lampOnCmd;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 810,
        "y": 300,
        "wires": [
            [
                "97d13cac.41886"
            ]
        ]
    },
    {
        "id": "656e11ab.75a2e",
        "type": "http request",
        "z": "f0af95b4.d8efc8",
        "name": "Snapshot",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://{{{topic}}}/0/action/snapshot",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "d27594ef.af1e38"
            ]
        ]
    },
    {
        "id": "97d13cac.41886",
        "type": "http request",
        "z": "f0af95b4.d8efc8",
        "name": "Switch lamp",
        "method": "GET",
        "ret": "txt",
        "paytoqs": true,
        "url": "http://{{{topic}}}/cm",
        "tls": "",
        "proxy": "",
        "authType": "basic",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "40e156e9.3e63b8"
            ]
        ]
    },
    {
        "id": "7b5d236.2a3fbdc",
        "type": "http request",
        "z": "f0af95b4.d8efc8",
        "name": "Pause Detection Zero-01",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://Pi-ZeroW-01.creagers:7546/0/detection/pause",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 950,
        "y": 40,
        "wires": [
            [
                "d27594ef.af1e38"
            ]
        ]
    },
    {
        "id": "da818155.02cf5",
        "type": "http request",
        "z": "f0af95b4.d8efc8",
        "name": "Pause Detection Zero-02",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://Pi-ZeroW-02:7547/0/detection/pause",
        "tls": "",
        "proxy": "",
        "authType": "",
        "x": 950,
        "y": 120,
        "wires": [
            [
                "40e156e9.3e63b8"
            ]
        ]
    },
    {
        "id": "1806f76d.48af89",
        "type": "inject",
        "z": "f0af95b4.d8efc8",
        "name": "Run at start",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "603371b3.c0a12"
            ]
        ]
    },
    {
        "id": "ab7f980d.eae938",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "set night or day",
        "func": "var night = flow.get(\"nightOrDay\");\nif (msg.topic==\"bigtimer\") {\n    if (msg.payload==\"night\") {\n        night=true;\n        node.status({fill:\"red\",shape:\"ring\",text:\"Night\"});\n        flow.set(\"nightOrDay\",night);\n        global.set(\"nightOrDay\",night);\n    } else if (msg.payload==\"day\") {\n        node.status({fill:\"green\",shape:\"ring\",text:\"Day\"});\n        night=false;\n        flow.set(\"nightOrDay\",night);\n        global.set(\"nightOrDay\",night);\n    } else {\n        node.warn(\"Weird payload from bigtimer \" + msg.payload)\n    }\n    node.warn(\"bigtimer debug \" + msg.payload + \" night =\" + night)\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "603371b3.c0a12",
        "type": "bigtimer",
        "z": "f0af95b4.d8efc8",
        "outtopic": "bigtimer",
        "outpayload1": "night",
        "outpayload2": "day",
        "name": "Night/Day",
        "comment": "",
        "lat": "51.622340",
        "lon": " -0.249060",
        "starttime": "5004",
        "endtime": "5003",
        "starttime2": 0,
        "endtime2": 0,
        "startoff": "-30",
        "endoff": "+30",
        "startoff2": 0,
        "endoff2": 0,
        "offs": 0,
        "outtext1": "Night is on",
        "outtext2": "Night is off",
        "timeout": 1440,
        "sun": true,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "jan": true,
        "feb": true,
        "mar": true,
        "apr": true,
        "may": true,
        "jun": true,
        "jul": true,
        "aug": true,
        "sep": true,
        "oct": true,
        "nov": true,
        "dec": true,
        "day1": 0,
        "month1": 0,
        "day2": 0,
        "month2": 0,
        "day3": 0,
        "month3": 0,
        "day4": 0,
        "month4": 0,
        "day5": 0,
        "month5": 0,
        "day6": 0,
        "month6": 0,
        "day7": 0,
        "month7": 0,
        "day8": 0,
        "month8": 0,
        "day9": 0,
        "month9": 0,
        "day10": 0,
        "month10": 0,
        "day11": 0,
        "month11": 0,
        "day12": 0,
        "month12": 0,
        "d1": 0,
        "w1": 0,
        "d2": 0,
        "w2": 0,
        "d3": 0,
        "w3": 0,
        "d4": 0,
        "w4": 0,
        "d5": 0,
        "w5": 0,
        "d6": 0,
        "w6": 0,
        "xday1": 0,
        "xmonth1": 0,
        "xday2": 0,
        "xmonth2": 0,
        "xday3": 0,
        "xmonth3": 0,
        "xday4": 0,
        "xmonth4": 0,
        "xday5": 0,
        "xmonth5": 0,
        "xday6": 0,
        "xmonth6": 0,
        "xday7": "",
        "xmonth7": "",
        "xday8": "",
        "xmonth8": "",
        "xday9": "",
        "xmonth9": "",
        "xday10": "",
        "xmonth10": "",
        "xday11": "",
        "xmonth11": "",
        "xday12": "",
        "xmonth12": "",
        "xd1": 0,
        "xw1": 0,
        "xd2": 0,
        "xw2": 0,
        "xd3": 0,
        "xw3": 0,
        "xd4": 0,
        "xw4": 0,
        "xd5": 0,
        "xw5": 0,
        "xd6": 0,
        "xw6": 0,
        "suspend": false,
        "random": false,
        "randon1": false,
        "randoff1": false,
        "randon2": false,
        "randoff2": false,
        "repeat": false,
        "atstart": true,
        "odd": false,
        "even": false,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "ab7f980d.eae938"
            ],
            [],
            []
        ]
    },
    {
        "id": "87e44a91.5549e8",
        "type": "catch",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "scope": [
            "7b5d236.2a3fbdc",
            "da818155.02cf5"
        ],
        "uncaught": false,
        "x": 110,
        "y": 400,
        "wires": [
            [
                "b55e5b4c.278518",
                "7da55b3f.1a5e94"
            ]
        ]
    },
    {
        "id": "b55e5b4c.278518",
        "type": "debug",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1190,
        "y": 400,
        "wires": []
    },
    {
        "id": "7da55b3f.1a5e94",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Check if cameras there",
        "func": "node.warn(\"Error caught\")\nif (msg.error.source.name==\"Pause Detection Zero-01\") {\n    flow.set(\"Pi-ZeroW-01\",false);\n} else if (msg.error.source.name==\"Pause Detection Zero-01\") {\n    flow.set(\"Pi-ZeroW-02\",false);\n} else {\n    node.warn(\"Unexpected Error \" + msg.error.message,error);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "9adfd02a.3bab6",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Init cameras to true",
        "func": "flow.set(\"Pi-ZeroW-01\",true);\nflow.set(\"Pi-ZeroW-02\",true);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 60,
        "wires": [
            [
                "7b5d236.2a3fbdc",
                "da818155.02cf5"
            ]
        ]
    },
    {
        "id": "5ebd88b8.c52ba8",
        "type": "inject",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "f29f087d.349348"
            ]
        ]
    },
    {
        "id": "f29f087d.349348",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Initialise Cameras",
        "func": "var cameraTable = {};\nglobal.set(\"cameras\",cameraTable);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "b26d0872.ad4608",
        "type": "file in",
        "z": "f0af95b4.d8efc8",
        "name": "Input Camera file",
        "filename": "/devices/cameras",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 370,
        "y": 700,
        "wires": [
            [
                "8fcecd31.808af"
            ]
        ]
    },
    {
        "id": "8fcecd31.808af",
        "type": "json",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 700,
        "wires": [
            [
                "34811823.bb38b8"
            ]
        ]
    },
    {
        "id": "aa381b2f.8d4918",
        "type": "inject",
        "z": "f0af95b4.d8efc8",
        "name": "Init from file",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "b26d0872.ad4608"
            ]
        ]
    },
    {
        "id": "34811823.bb38b8",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Copy Cameras file to context",
        "func": "var cameraTable = {};\nfor (i=0; i<msg.payload.length;i++) {\n    /*\n    node.warn(\"DEBUG ID=\" + msg.payload[i].ID + \" Address=\" + msg.payload[i].address +\n                \" lampID=\" + msg.payload[i].lampID +\n                \" enabled=\" + msg.payload[i].enabled +\n                \" online=\" + msg.payload[i].online\n    );\n    */\n    cameraTable[msg.payload[i].ID] = {};\n    cameraTable[msg.payload[i].ID][\"address\"] = (msg.payload[i].address) ? msg.payload[i].address : null;\n    cameraTable[msg.payload[i].ID][\"lampID\"] = (msg.payload[i].lampID) ? msg.payload[i].lampID : null;\n    cameraTable[msg.payload[i].ID][\"enabled\"] = (msg.payload[i].enabled) ? msg.payload[i].enabled : null;\n    cameraTable[msg.payload[i].ID][\"online\"] = (msg.payload[i].online) ? msg.payload[i].online : null;\n}\nglobal.set(\"cameras\", cameraTable);\nnode.warn(\"length of cameraTable=\" +msg.payload.length )\nvar cameraNames = Object.keys(cameraTable);\nvar ind;\nmsg.payload = [];\ncameraNames.forEach((key, index) => {\n    //node.warn(\"Debug key=\" + key + \" index=\" + index)\n    ind = msg.payload.push(cameraTable[key]);\n    msg.payload[ind-1].ID = key;\n});\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 800,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "e40a915f.fa121",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "dump Camera table",
        "func": "var cameraTable = global.get(\"cameras\");\nvar oTable = [];\nif (!cameraTable) {\n    cameraTable = {};\n    global.set(\"cameras\", cameraTable);\n}\n\nvar cameraNames = Object.keys(cameraTable);\nvar ind;\nmsg.payload = [];\ncameraNames.forEach((key, index) => {\n    //node.warn(\"Debug key=\" + key + \" index=\" + index)\n    ind = msg.payload.push(cameraTable[key]);\n    msg.payload[ind-1].ID = key;\n});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 820,
        "wires": [
            [
                "80d3a43d.54fd18"
            ]
        ]
    },
    {
        "id": "80d3a43d.54fd18",
        "type": "template",
        "z": "f0af95b4.d8efc8",
        "name": "css",
        "field": "style",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "table {\n    color: #333;\n    font-family: Helvetica, Arial, sans-serif;\n    width: 50%;\n    border-collapse: collapse;\n    border-spacing: 0;\n}\ntd, th {\n    border: 1px solid transparent;\n    /* No more visible border */\n    height: 30px;\n    transition: all 0.3s;\n    /* Simple transition for hover effect */\n}\nth {\n    background: #DFDFDF;\n    /* Darken header a bit */\n    font-weight: bold;\n    text-align: left;\n}\ntd {\n    background: #FAFAFA;\n    text-align: left;\n}\n\n/* Cells in even rows (2,4,6...) are one color */\n\ntr:nth-child(even) td {\n    background: #F1F1F1;\n}\n\n/* Cells in odd rows (1,3,5...) are another (excludes header cells)  */\n\ntr:nth-child(odd) td {\n    background: #FEFEFE;\n}\ntr td:hover {\n    background: #666;\n    color: #FFF;\n}\n\n/* Hover cell effect! */",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "2e69765b.cf8b6a"
            ]
        ]
    },
    {
        "id": "4a3e8519.7e704c",
        "type": "ui_button",
        "z": "f0af95b4.d8efc8",
        "name": "Refresh Cams",
        "group": "a5ebe13.914e82",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "e40a915f.fa121",
                "f416fc22.23912"
            ]
        ]
    },
    {
        "id": "9f35ade3.722f5",
        "type": "function",
        "z": "f0af95b4.d8efc8",
        "name": "Add word to scrolling table",
        "func": "//let pay = msg.payload.devName;\nvar pay = msg.payload;\n// Read scrolling table from context\nvar cameraTable = {};\nif (global.get(\"cameras\")) {\n    cameraTable=global.get(\"cameras\");\n}\nif ( (pay.ID) && (cameraTable[pay.ID]) ) {\n    node.warn(\"pay ID=\" + pay.ID)\n    if (pay.Delete) {\n        cameraTable[pay.ID] = null\n    } else {\n        node.warn(\"Amending entry (old) id=\" + pay.ID + \" address=\" + cameraTable[pay.ID].address +\n                    \" lampID=\" + cameraTable[pay.ID].lampID +\n                    \" enabled=\" + cameraTable[pay.ID].enabled + \" online=\" + cameraTable[pay.ID].online);\n        node.warn(\"Amending entry (NEW) id=\" + pay.ID + \" address=\" + pay.address + \n                    \" lampID=\" + pay.lampID + \" enabled=\" + pay.enabled + \" online=\" + pay.online);\n        cameraTable[pay.ID] = { \"address\": pay.address, \"lampID\": pay.lampID, \"enabled\": pay.enabled, \"online\": pay.online};\n    }\n} else {\n    if (pay.Delete) {\n        node.warning(\"ERROR camera to delete does not exist ID=\" + pay.ID);\n    } else {\n        node.warn(\"Creating new entry id=\" + pay.ID + \" address=\" + pay.address + \" lampID=\" + pay.lampID +\n                        \" enabled=\" + pay.enabled + \" online=\" + pay.online);\n        cameraTable[pay.ID] = { \"address\": pay.address, \"lampID\":pay.lampID, \"enabled\": pay.enabled, \"online\": pay.online};\n        node.warn(\"key =\" + pay.ID );\n        node.warn(cameraTable[pay.ID]);\n    }\n}\n\n\nglobal.set(\"cameras\",cameraTable);\nvar cameraNames = Object.keys(cameraTable);\nvar ind;\nmsg.payload = [];\ncameraNames.forEach((key, index) => {\n    node.warn(\"Debug key=\" + key + \" index=\" + index)\n    ind = msg.payload.push(cameraTable[key]);\n    msg.payload[ind-1].ID = key;\n});\n//msg.payload = cameraTable;\n//node.warn(msg);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 600,
        "wires": [
            [
                "80d3a43d.54fd18",
                "a52be229.49968"
            ]
        ]
    },
    {
        "id": "2e69765b.cf8b6a",
        "type": "ui_template",
        "z": "f0af95b4.d8efc8",
        "group": "a5ebe13.914e82",
        "name": "Camera Table",
        "order": 4,
        "width": "12",
        "height": "8",
        "format": "<style>\n    {{msg.style}}\n</style>\n\n<table>\n    <tr>\n        <th>Camera ID</th>\n        <th>Camera Address</th>\n        <th>Lamp ID</th> \n        <th>Enabled</th> \n        <th>Online</th> \n    </tr>\n  <tr ng-repeat=\"obj in msg.payload\">\n    <td>{{ obj.ID }}</td>\n    <td>{{ obj.address }}</td>\n    <td>{{ obj.lampID }}</td>\n    <td>{{ obj.enabled }}</td>\n    <td>{{ obj.online }}</td>\n  </tr>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 800,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f416fc22.23912",
        "type": "debug",
        "z": "f0af95b4.d8efc8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 430,
        "y": 940,
        "wires": []
    },
    {
        "id": "9c222060.65caf",
        "type": "ui_form",
        "z": "f0af95b4.d8efc8",
        "name": "Camera Form",
        "label": "Cameras",
        "group": "ab341143.35405",
        "order": 1,
        "width": "0",
        "height": "0",
        "options": [
            {
                "label": "ID",
                "value": "ID",
                "type": "text",
                "required": true
            },
            {
                "label": "Delete",
                "value": "Delete",
                "type": "checkbox",
                "required": false
            },
            {
                "label": "Address",
                "value": "address",
                "type": "text",
                "required": false
            },
            {
                "label": "Lamp ID",
                "value": "lampID",
                "type": "text",
                "required": false
            },
            {
                "label": "online",
                "value": "online",
                "type": "switch",
                "required": false
            },
            {
                "label": "enabled",
                "value": "enabled",
                "type": "switch",
                "required": false
            }
        ],
        "formValue": {
            "ID": "",
            "Delete": false,
            "address": "",
            "lampID": "",
            "online": false,
            "enabled": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "cameraGUI",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "9f35ade3.722f5"
            ]
        ]
    },
    {
        "id": "a52be229.49968",
        "type": "file",
        "z": "f0af95b4.d8efc8",
        "name": "Cameras File",
        "filename": "/devices/cameras",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 590,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "db41bf66.e9b6",
        "type": "http in",
        "z": "96432656.4c5b18",
        "name": "/alexa",
        "url": "/alexa",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "37eaef94.79495",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "Extract Message",
        "func": "var message = \"\";\nif (msg.payload.request.intent && msg.payload.request.intent.slots)\n    message = msg.payload.request.intent.slots.Text.value\n\nmsg.text = message;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "8db08d81.c0f57"
            ]
        ]
    },
    {
        "id": "2c3f1dd.ceeaee2",
        "type": "switch",
        "z": "96432656.4c5b18",
        "name": "",
        "property": "payload.request.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LaunchRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IntentRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SessionEndedRequest",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "9e09b630.810198"
            ],
            [
                "37eaef94.79495"
            ],
            [
                "84c58164.5445f"
            ],
            [
                "84c58164.5445f"
            ]
        ]
    },
    {
        "id": "84c58164.5445f",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "End Session Message",
        "func": "msg.payload = {\n  \"response\": {\n    \"outputSpeech\": {\n      \"type\": \"SSML\",\n      \"ssml\": \"<speak> Thank you for using Chatbot and have a nice day! </speak>\"\n    },\n    \"shouldEndSession\": true\n  },\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 200,
        "wires": [
            [
                "9db357c2.62a0c8"
            ]
        ]
    },
    {
        "id": "9e09b630.810198",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "Start Session Message",
        "func": "msg.payload = {\n    \"version\": \"1.0\",\n    \"response\": {\n        \"outputSpeech\": {\n            \"type\": \"SSML\",\n            \"ssml\": \"<speak> Hi. Welcome to the Chatbot! </speak>\"\n        },\n        \"shouldEndSession\": false\n    },\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 80,
        "wires": [
            [
                "9db357c2.62a0c8"
            ]
        ]
    },
    {
        "id": "3117c858.86ccb8",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "Extract User",
        "func": "msg.userId = msg.payload.session.user.userId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "2c3f1dd.ceeaee2",
                "a650f7f6.e3a548"
            ]
        ]
    },
    {
        "id": "9db357c2.62a0c8",
        "type": "http response",
        "z": "96432656.4c5b18",
        "name": "",
        "x": 1270,
        "y": 140,
        "wires": []
    },
    {
        "id": "d0a4aff9.c0774",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "Parse Message To Alexa",
        "func": "msg.payload = {\n  \"version\": \"1.0\",\n  \"response\": {\n    \"outputSpeech\": {\n      \"type\": \"SSML\",\n      \"ssml\": \"<speak> \"  + msg.text + \" </speak>\"\n    },\n    \"reprompt\": {\n      \"outputSpeech\": {\n        \"type\": \"SSML\",\n        \"ssml\": \"<speak> \"  + msg.text + \" </speak>\"\n      }\n    },\n    \"shouldEndSession\": false\n  }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "9db357c2.62a0c8"
            ]
        ]
    },
    {
        "id": "8db08d81.c0f57",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "Do Something",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 140,
        "wires": [
            [
                "d0a4aff9.c0774"
            ]
        ]
    },
    {
        "id": "a650f7f6.e3a548",
        "type": "debug",
        "z": "96432656.4c5b18",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "cdd4bf2f.9f034",
        "type": "http in",
        "z": "96432656.4c5b18",
        "name": "Echo request",
        "url": "/echo",
        "method": "post",
        "swaggerDoc": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "ce08bf02.54eeb",
                "2c4da5ae.38e25a"
            ]
        ]
    },
    {
        "id": "ce08bf02.54eeb",
        "type": "switch",
        "z": "96432656.4c5b18",
        "name": "Request Type",
        "property": "payload.request.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LaunchRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IntentRequest",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SessionEndedRequest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 3,
        "x": 295,
        "y": 260,
        "wires": [
            [],
            [
                "f201b4c0.b54548"
            ],
            []
        ]
    },
    {
        "id": "ce407d9b.6ab85",
        "type": "template",
        "z": "96432656.4c5b18",
        "name": "Say OK!",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "OK!",
        "x": 860,
        "y": 260,
        "wires": [
            [
                "ab892957.d84e88"
            ]
        ]
    },
    {
        "id": "ab892957.d84e88",
        "type": "template",
        "z": "96432656.4c5b18",
        "name": "Format response",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n  \"version\": \"1.0\",\n  \"response\": {\n    \"outputSpeech\": {\n      \"type\": \"PlainText\",\n      \"text\": \"{{payload}}\"\n    },\n    \"shouldEndSession\": true\n  }\n}",
        "x": 1038,
        "y": 260,
        "wires": [
            [
                "75c69420.aa1dac"
            ]
        ]
    },
    {
        "id": "75c69420.aa1dac",
        "type": "json",
        "z": "96432656.4c5b18",
        "name": "",
        "x": 1203,
        "y": 260,
        "wires": [
            [
                "e794ca73.ce9ba8"
            ]
        ]
    },
    {
        "id": "e794ca73.ce9ba8",
        "type": "http response",
        "z": "96432656.4c5b18",
        "name": "",
        "x": 1330,
        "y": 260,
        "wires": []
    },
    {
        "id": "f201b4c0.b54548",
        "type": "switch",
        "z": "96432656.4c5b18",
        "name": "Intents",
        "property": "payload.request.intent.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "StatusReportIntent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ModeHomeIntent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ModeAwayIntent",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ModeBedIntent",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "outputs": 4,
        "x": 476,
        "y": 260,
        "wires": [
            [],
            [
                "c4e82b.a273e7d8"
            ],
            [],
            []
        ]
    },
    {
        "id": "c4e82b.a273e7d8",
        "type": "function",
        "z": "96432656.4c5b18",
        "name": "do something",
        "func": "// Add something to do here\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 657,
        "y": 253,
        "wires": [
            [
                "ce407d9b.6ab85"
            ]
        ]
    },
    {
        "id": "2c4da5ae.38e25a",
        "type": "debug",
        "z": "96432656.4c5b18",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 390,
        "y": 320,
        "wires": []
    }
]